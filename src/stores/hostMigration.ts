// hostMigration.ts - –ì–æ—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ —Ö–æ—Å—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è peer ID
import type { GameState, Player } from '@/types/game'
import { makeMessage } from '@/types/game'
import { peerService } from '@/services/peerSelector'

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –º–∏–≥—Ä–∞—Ü–∏–∏ —Ö–æ—Å—Ç–∞ –ø–æ—Å–ª–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –µ–≥–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è.
 * –õ–æ–≥–∏–∫–∞ –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∞ –∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –æ–±–º–µ–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –º–µ–∂–¥—É –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–æ–≤.
 *
 * @param currentState - –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã, –∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∫–ª–∏–µ–Ω—Ç—É.
 * @param myCurrentId - PeerJS ID —Ç–µ–∫—É—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞.
 * @param roomId - ID –∫–æ–º–Ω–∞—Ç—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è peer ID
 * @param callbacks - –§—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è gameStore
 * @returns {Promise<void>}
 */
export async function handleHostMigration(
  currentState: GameState,
  myCurrentId: string,
  roomId: string,
  callbacks?: {
    updateGameState: (state: GameState) => void
    updateMyPlayerId: (id: string) => void
    setIsHost: (isHost: boolean) => void
    setHostId: (hostId: string) => void
    setupHostHandlers: () => void
    setupClientHandlers: () => void
  },
): Promise<void> {
  console.log('üöÄ HOST MIGRATION: Process started.')
  console.log('üîç HOST MIGRATION: Input parameters:', {
    currentHostId: currentState.hostId,
    myCurrentId,
    roomId,
    totalPlayers: currentState.players.length,
    players: currentState.players.map(p => ({ id: p.id, nickname: p.nickname, isHost: p.isHost }))
  })

  // 1. –§–∏–ª—å—Ç—Ä—É–µ–º –∏–≥—Ä–æ–∫–æ–≤, —É–¥–∞–ª—è—è —Å—Ç–∞—Ä–æ–≥–æ —Ö–æ—Å—Ç–∞
  const remainingPlayers = currentState.players.filter((p) => p.id !== currentState.hostId)
  console.log('üßπ HOST MIGRATION: Filtered players (removed old host):', {
    oldHostId: currentState.hostId,
    remainingPlayersCount: remainingPlayers.length,
    remainingPlayers: remainingPlayers.map(p => ({ id: p.id, nickname: p.nickname }))
  })

  if (remainingPlayers.length === 0) {
    console.log('‚ùå HOST MIGRATION: No players left. Ending game.')
    // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä, –≤—ã–∑–æ–≤ leaveRoom()
    // leaveRoom();
    return
  }

  // 2. –î–ï–¢–ï–†–ú–ò–ù–ò–†–û–í–ê–ù–ù–´–ô –í–´–ë–û–† –ù–û–í–û–ì–û –•–û–°–¢–ê
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –ø–æ client ID (peer ID) - –≤—ã–±–∏—Ä–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π ID
  // –≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç nickname –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  
  const sortedPlayers = remainingPlayers.sort((a, b) => {
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ peer ID (client ID) –ª–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏ 
    const clientIdA = a.id || ''
    const clientIdB = b.id || ''
    return clientIdA.localeCompare(clientIdB)
  })
  const newHostCandidate = sortedPlayers[0]

  console.log('üëë HOST MIGRATION: New host selection:', {
    algorithm: 'client ID based (minimum peer ID)',
    allCandidates: sortedPlayers.map(p => ({ 
      id: p.id, 
      nickname: p.nickname,
      joinedAt: p.joinedAt
    })),
    selectedHost: { 
      id: newHostCandidate.id, 
      nickname: newHostCandidate.nickname
    },
    amITheNewHost: newHostCandidate.id === myCurrentId,
    expectedResult: 'Client with minimum peer ID should be selected as new host'
  })

  try {
    // 3. –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏: —Å—Ç–∞–Ω–æ–≤–ª—é—Å—å –ª–∏ —è —Ö–æ—Å—Ç–æ–º –∏–ª–∏ –ø–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ –Ω–æ–≤–æ–º—É?
    if (newHostCandidate.id === myCurrentId) {
      // –Ø –∏–∑–±—Ä–∞–Ω –Ω–æ–≤—ã–º —Ö–æ—Å—Ç–æ–º
      console.log('üè† HOST MIGRATION: I am the new host, calling becomeNewHost...')
      await becomeNewHost(currentState, myCurrentId, roomId, callbacks)
      console.log('‚úÖ HOST MIGRATION: becomeNewHost completed successfully')
    } else {
      // –î—Ä—É–≥–æ–π –∏–≥—Ä–æ–∫ –∏–∑–±—Ä–∞–Ω —Ö–æ—Å—Ç–æ–º, —è –¥–æ–ª–∂–µ–Ω –∫ –Ω–µ–º—É –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
      console.log('üîó HOST MIGRATION: Connecting to new host, calling reconnectToNewHost...')
      
      // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –î–∞–µ–º –Ω–æ–≤–æ–º—É —Ö–æ—Å—Ç—É –≤—Ä–µ–º—è –Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
      // –î–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –æ—Å–Ω–æ–≤–∞–Ω–Ω–∞—è –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ –≤ —Å–ø–∏—Å–∫–µ
      const myIndex = sortedPlayers.findIndex(p => p.id === myCurrentId)
      const reconnectDelay = Math.max(1000, myIndex * 500) // –ú–∏–Ω–∏–º—É–º 1—Å, +0.5—Å –∑–∞ –∫–∞–∂–¥—É—é –ø–æ–∑–∏—Ü–∏—é
      
      console.log(`üîó HOST MIGRATION: Waiting ${reconnectDelay}ms before connecting (position ${myIndex})`)
      await new Promise(resolve => setTimeout(resolve, reconnectDelay))
      
      await reconnectToNewHost(newHostCandidate.id, myCurrentId, currentState, callbacks)
      console.log('‚úÖ HOST MIGRATION: reconnectToNewHost completed successfully')
    }
    console.log('üéâ HOST MIGRATION: Migration process completed successfully')
  } catch (error) {
    console.error('üí• HOST MIGRATION: Migration failed catastrophically.', error)
    console.error('üí• HOST MIGRATION: Error stack:', (error as any)?.stack)
    // –ó–¥–µ—Å—å —Ç–∞–∫–∂–µ –≤—ã–∑—ã–≤–∞–µ–º –ª–æ–≥–∏–∫—É –≤—ã—Ö–æ–¥–∞ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã
    // leaveRoom();
    throw error // Re-throw to let caller handle it
  }
}

/**
 * –õ–æ–≥–∏–∫–∞ –¥–ª—è –∏–≥—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –∏–∑–±—Ä–∞–Ω –Ω–æ–≤—ã–º —Ö–æ—Å—Ç–æ–º.
 * –û–Ω —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π PeerJS-–æ–±—ä–µ–∫—Ç –∏ –≥–æ—Ç–æ–≤–∏—Ç—Å—è –ø—Ä–∏–Ω–∏–º–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.
 * –ö–†–ò–¢–ò–ß–ù–û: –ü–µ—Ä–µ–¥–∞–µ—Ç roomId –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è peer ID —Ö–æ—Å—Ç–∞.
 */
async function becomeNewHost(
  currentState: GameState,
  myOldId: string,
  roomId: string,
  callbacks?: {
    updateGameState: (state: GameState) => void
    updateMyPlayerId: (id: string) => void
    setIsHost: (isHost: boolean) => void
    setHostId: (hostId: string) => void
    setupHostHandlers: () => void
    setupClientHandlers: () => void
  },
): Promise<void> {
  console.log('üè† BECOME NEW HOST: Initializing...')
  console.log('üè† BECOME NEW HOST: Input params:', {
    myOldId,
    roomId,
    currentStateHostId: currentState.hostId,
    currentStatePlayers: currentState.players.map(p => ({ id: p.id, nickname: p.nickname, isHost: p.isHost }))
  })

  try {
    // 1. –ö–†–ò–¢–ò–ß–ù–û: –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π PeerJS instance —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º ID –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã
    console.log('üè† BECOME NEW HOST: Step 1 - Creating host peer...')
    const newHostPeerId = await peerService.createHost(roomId)
    console.log(`üè† BECOME NEW HOST: Host peer ID created: ${newHostPeerId}`)

    // 2. –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ gameState
    console.log('üè† BECOME NEW HOST: Step 2 - Updating game state...')
    // –≠—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ: gameState —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–æ–≤—ã–π ID —Ö–æ—Å—Ç–∞.
    // –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–µ–∑ —Å—Ç–∞—Ä–æ–≥–æ —Ö–æ—Å—Ç–∞
    const stateWithoutOldHost = {
      ...currentState,
      players: currentState.players.filter((p) => p.id !== currentState.hostId)
    }
    console.log('üè† BECOME NEW HOST: State without old host:', {
      oldHostId: currentState.hostId,
      remainingPlayers: stateWithoutOldHost.players.map(p => ({ id: p.id, nickname: p.nickname }))
    })
    
    const updatedGameState = updateStateForNewHost(stateWithoutOldHost, myOldId, newHostPeerId)
    console.log('üè† BECOME NEW HOST: Updated game state details:', {
      oldPlayerId: myOldId,
      newPlayerId: newHostPeerId,
      playersBefore: stateWithoutOldHost.players.map(p => ({ id: p.id, nickname: p.nickname, isHost: p.isHost })),
      playersAfter: updatedGameState.players.map(p => ({ id: p.id, nickname: p.nickname, isHost: p.isHost }))
    })
    console.log('üè† BECOME NEW HOST: Final game state after update:', {
      hostId: updatedGameState.hostId,
      players: updatedGameState.players.map(p => ({ id: p.id, nickname: p.nickname, isHost: p.isHost }))
    })

    // 3. –û–±–Ω–æ–≤–ª—è–µ–º store/—Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    console.log('üè† BECOME NEW HOST: Step 3 - Updating store state...')
    if (callbacks) {
      console.log('üè† BECOME NEW HOST: Calling callbacks...')
      callbacks.updateMyPlayerId(newHostPeerId)
      console.log('üè† BECOME NEW HOST: Updated my player ID to:', newHostPeerId)
      
      callbacks.setIsHost(true)
      console.log('üè† BECOME NEW HOST: Set isHost to true')
      
      callbacks.setHostId(newHostPeerId)
      console.log('üè† BECOME NEW HOST: Set hostId to:', newHostPeerId)
      
      callbacks.updateGameState(updatedGameState)
      console.log('üè† BECOME NEW HOST: Updated game state via callback')
      
      callbacks.setupHostHandlers()
      console.log('üè† BECOME NEW HOST: Set up host handlers')
    } else {
      console.warn('üè† BECOME NEW HOST: No callbacks provided!')
    }

    // 4. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º peer service –∫–∞–∫ —Ö–æ—Å—Ç
    console.log('üè† BECOME NEW HOST: Step 4 - Configuring peer service as host...')
    peerService.setAsHost(newHostPeerId, roomId)
    console.log('üè† BECOME NEW HOST: Peer service configured as host')

    console.log('‚úÖ BECOME NEW HOST: Successfully transitioned to host role.')
    
    // 5. –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ë–ê–ì–§–ò–ö–°: –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è
    // –ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –∫–ª–∏–µ–Ω—Ç—ã –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞—Ç—Å—è, –Ω—É–∂–Ω–æ —É–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –æ–Ω–∏ –ø–æ–ª—É—á–∏–ª–∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ñ–ª–∞–≥–∞–º–∏ isHost
    console.log('üè† BECOME NEW HOST: State ready for incoming client connections')
    
    // –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ë–ê–ì–§–ò–ö–°: –ù–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ª–Ω –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    const broadcastStateWithRetries = (attempt: number = 1, maxAttempts: number = 3) => {
      console.log(`üîÑ BECOME NEW HOST: Broadcasting state (attempt ${attempt}/${maxAttempts}) to ensure all clients have correct host flags`)
      console.log('üîÑ BECOME NEW HOST: State to broadcast:', {
        hostId: updatedGameState.hostId,
        players: updatedGameState.players.map(p => ({ id: p.id, nickname: p.nickname, isHost: p.isHost }))
      })
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å makeMessage
      const stateMessage = makeMessage(
        'game_state_update',
        updatedGameState,
        {
          roomId: updatedGameState.roomId,
          fromId: newHostPeerId,
          ts: Date.now()
        }
      )
      
      // –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–¥ —Ä–∞—Å—Å—ã–ª–∫–æ–π
      const currentConnections = peerService.getActiveConnections()
      console.log(`üîÑ BECOME NEW HOST: Current connections before broadcast:`, {
        connectionsCount: currentConnections.length,
        connectionIds: currentConnections.map(c => c.peerId)
      })
      
      peerService.broadcastMessage(stateMessage)
      console.log(`üîÑ BECOME NEW HOST: State broadcast attempt ${attempt} completed`)
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ —Å —É–≤–µ–ª–∏—á–∏–≤–∞—é—â–∏–º–∏—Å—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏
      if (attempt < maxAttempts) {
        const nextDelay = attempt * 1500; // 1.5s, 3s, 4.5s
        setTimeout(() => broadcastStateWithRetries(attempt + 1, maxAttempts), nextDelay);
      }
    }
    
    // –ü–µ—Ä–≤–∞—è –≤–æ–ª–Ω–∞ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => broadcastStateWithRetries(1, 3), 2000)
    
  } catch (error) {
    console.error('üí• BECOME NEW HOST: Error during host transition:', error)
    console.error('üí• BECOME NEW HOST: Error stack:', (error as any)?.stack)
    throw error
  }
}

/**
 * –õ–æ–≥–∏–∫–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –Ω–æ–≤–æ–º—É —Ö–æ—Å—Ç—É.
 */
async function reconnectToNewHost(
  newHostId: string,
  myCurrentId: string,
  currentState?: GameState,
  callbacks?: {
    updateGameState: (state: GameState) => void
    updateMyPlayerId: (id: string) => void
    setIsHost: (isHost: boolean) => void
    setHostId: (hostId: string) => void
    setupHostHandlers: () => void
    setupClientHandlers: () => void
  },
): Promise<void> {
  console.log(`üîó RECONNECT: Attempting to connect to new host ${newHostId}...`)
  console.log('üîó RECONNECT: Input params:', {
    newHostId,
    myCurrentId,
    hasCurrentState: !!currentState,
    hasCallbacks: !!callbacks,
    currentStatePlayers: currentState?.players.map(p => ({ id: p.id, nickname: p.nickname, isHost: p.isHost })) || []
  })

  try {
    // 1. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –Ω–æ–≤–æ–º—É —Ö–æ—Å—Ç—É —Å —Ä–µ—Ç—Ä–∞—è–º–∏
    console.log('üîó RECONNECT: Step 1 - Attempting connection with retries...')
    
    const maxRetries = 5
    let connected = false
    
    for (let attempt = 1; attempt <= maxRetries && !connected; attempt++) {
      try {
        console.log(`üîó RECONNECT: Connection attempt ${attempt}/${maxRetries} to host ${newHostId}`)
        await peerService.reconnectToNewHost(newHostId)
        connected = true
        console.log('‚úÖ RECONNECT: PeerService reconnection completed')
      } catch (error) {
        console.warn(`‚ùå RECONNECT: Attempt ${attempt} failed:`, error)
        if (attempt < maxRetries) {
          const retryDelay = Math.min(1000 * attempt, 3000) // 1s, 2s, 3s, 3s, 3s
          console.log(`‚è≥ RECONNECT: Retrying in ${retryDelay}ms...`)
          await new Promise(resolve => setTimeout(resolve, retryDelay))
        }
      }
    }
    
    if (!connected) {
      throw new Error(`Failed to connect to new host ${newHostId} after ${maxRetries} attempts`)
    }

    // 2. –û–±–Ω–æ–≤–ª—è–µ–º store/—Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    console.log('üîó RECONNECT: Step 2 - Updating store state...')
    if (callbacks) {
      console.log('üîó RECONNECT: Updating callbacks...')
      
      callbacks.setIsHost(false)
      console.log('üîó RECONNECT: Set isHost to false')
      
      callbacks.setHostId(newHostId)
      console.log('üîó RECONNECT: Set hostId to:', newHostId)
      
      callbacks.setupClientHandlers()
      console.log('üîó RECONNECT: Set up client handlers')
      
      // –û–±–Ω–æ–≤–ª—è–µ–º gameState - —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–≥–æ —Ö–æ—Å—Ç–∞, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –±–æ–ª—å—à–µ –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –∏–≥—Ä–µ
      if (currentState) {
        const updatedState = { ...currentState }
        updatedState.hostId = newHostId
        // –í–ê–ñ–ù–û: –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–≥–æ —Ö–æ—Å—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤
        const oldHostId = currentState.hostId
        updatedState.players = updatedState.players.filter(p => p.id !== oldHostId)
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ö–æ—Å—Ç–æ–≤—Å–∫–∏–π —Å—Ç–∞—Ç—É—Å —É –∏–≥—Ä–æ–∫–æ–≤ - —Å–Ω–∏–º–∞–µ–º isHost —Å–æ –≤—Å–µ—Ö
        updatedState.players.forEach((p) => {
          p.isHost = false
        })
        console.log('üîó RECONNECT: Updated local game state (waiting for host sync):', {
          newHostId: updatedState.hostId,
          oldHostId,
          removedOldHost: true,
          players: updatedState.players.map(p => ({ id: p.id, nickname: p.nickname, isHost: p.isHost }))
        })
        callbacks.updateGameState(updatedState)
        console.log('üîó RECONNECT: Local game state updated, waiting for authoritative state from new host')
      } else {
        console.warn('üîó RECONNECT: No current state provided for update')
      }
    } else {
      console.warn('üîó RECONNECT: No callbacks provided!')
    }

    // 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.
    console.log('üîó RECONNECT: Step 3 - Sending join request to new host...')
    // –û—á–µ–Ω—å –≤–∞–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –¢–ï–ö–£–©–ò–ô ID, —á—Ç–æ–±—ã –Ω–æ–≤—ã–π —Ö–æ—Å—Ç –º–æ–≥ –Ω–∞–π—Ç–∏ –Ω–∞—Å –≤ —Å–ø–∏—Å–∫–µ –∏–≥—Ä–æ–∫–æ–≤.
    // –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–ª–Ω—ã–π JoinRequestPayload (–º–∏–Ω–∏–º—É–º nickname), –ø–ª—é—Å savedPlayerId –∫–∞–∫ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø–æ–ª–µ
    const nickname = currentState?.players.find((p: Player) => p.id === myCurrentId)?.nickname || 'Player'
    const joinMessage = makeMessage('join_request', {
      nickname,
      savedPlayerId: myCurrentId,
    }, {
      roomId: currentState?.roomId || '',
      fromId: myCurrentId,
      ts: Date.now(),
    })
    
    console.log('üîó RECONNECT: Join message details:', {
      type: joinMessage.type,
      nickname,
      savedPlayerId: myCurrentId,
      roomId: currentState?.roomId
    })
    
    peerService.sendMessage(newHostId, joinMessage)
    console.log(`‚úÖ RECONNECT: Connection request sent to new host ${newHostId}`)
    
    // 4. –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ë–ê–ì–§–ò–ö–°: –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º mesh-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –æ—Å—Ç–∞–ª—å–Ω—ã–º–∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏
    console.log('üï∏Ô∏è RECONNECT: Step 4 - Rebuilding mesh connections with other clients...')
    if (currentState) {
      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∏–≥—Ä–æ–∫–æ–≤ –∫—Ä–æ–º–µ —Å–µ–±—è –∏ –Ω–æ–≤–æ–≥–æ —Ö–æ—Å—Ç–∞
      const otherClients = currentState.players.filter(p => 
        p.id !== myCurrentId && 
        p.id !== newHostId && 
        p.id !== currentState.hostId // –∏—Å–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ä–æ–≥–æ —Ö–æ—Å—Ç–∞
      )
      
      console.log('üï∏Ô∏è RECONNECT: Other clients to reconnect to:', otherClients.map(p => ({ id: p.id, nickname: p.nickname })))
      
      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º peer list —É –Ω–æ–≤–æ–≥–æ —Ö–æ—Å—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö ID
      peerService.sendMessage(newHostId, makeMessage(
        'request_peer_list',
        { 
          requesterId: myCurrentId, 
          requesterToken: '', 
          timestamp: Date.now() 
        },
        {
          roomId: currentState.roomId,
          fromId: myCurrentId,
          ts: Date.now()
        }
      ))
      
      console.log('üï∏Ô∏è RECONNECT: Peer list requested for mesh rebuilding')
    }
    
  } catch (error) {
    console.error('üí• RECONNECT: Error during reconnection:', error)
    console.error('üí• RECONNECT: Error stack:', (error as any)?.stack)
    throw error
  }
}

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ gameState –ø–æ—Å–ª–µ —Å–º–µ–Ω—ã —Ö–æ—Å—Ç–∞.
 * @param oldState - –ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã.
 * @param oldHostId - –°—Ç–∞—Ä—ã–π PeerJS ID –∏–≥—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Ö–æ—Å—Ç–æ–º.
 * @param newHostId - –ù–æ–≤—ã–π PeerJS ID —ç—Ç–æ–≥–æ –∂–µ –∏–≥—Ä–æ–∫–∞.
 * @returns {GameState} - –û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã.
 */
function updateStateForNewHost(
  oldState: GameState,
  oldPlayerId: string,
  newHostId: string,
): GameState {
  console.log('üîÑ updateStateForNewHost called with:', {
    oldPlayerId,
    newHostId,
    currentPlayers: oldState.players.map(p => ({ id: p.id, nickname: p.nickname, isHost: p.isHost }))
  })
  
  const newState = { ...oldState }

  // –û–±–Ω–æ–≤–ª—è–µ–º ID —Ö–æ—Å—Ç–∞ –≤ –∫–æ—Ä–Ω–µ–≤–æ–º –æ–±—ä–µ–∫—Ç–µ
  newState.hostId = newHostId

  // –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ë–ê–ì–§–ò–ö–°: –ù–∞—Ö–æ–¥–∏–º –∏–≥—Ä–æ–∫–∞ –ø–æ —Ç–æ–º—É –∂–µ –∞–ª–≥–æ—Ä–∏—Ç–º—É —á—Ç–æ –∏ –≤ handleHostMigration
  // –ò—â–µ–º –∏–≥—Ä–æ–∫–∞ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º client ID (peer ID) —Å—Ä–µ–¥–∏ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è
  
  // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ oldPlayerId (–º–æ–∂–µ—Ç —Å—Ä–∞–±–æ—Ç–∞—Ç—å –µ—Å–ª–∏ ID –Ω–µ –º–µ–Ω—è–ª—Å—è)
  let hostPlayer = newState.players.find((p) => p.id === oldPlayerId)
  
  if (!hostPlayer) {
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ ID, –∏—â–µ–º –∏–≥—Ä–æ–∫–∞ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º client ID - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –∞–ª–≥–æ—Ä–∏—Ç–º
    const sortedPlayers = newState.players.sort((a, b) => {
      const clientIdA = a.id || ''
      const clientIdB = b.id || ''
      return clientIdA.localeCompare(clientIdB)
    })
    
    hostPlayer = sortedPlayers[0] // –ò–≥—Ä–æ–∫ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º client ID
    console.log('üîÑ Looking for host by client ID sorting:', {
      allPlayersInState: newState.players.map(p => ({ id: p.id, nickname: p.nickname })),
      sortedPlayers: sortedPlayers.map(p => ({ id: p.id, nickname: p.nickname })),
      selectedByMinClientId: hostPlayer ? { id: hostPlayer.id, nickname: hostPlayer.nickname } : null
    })
  }
  
  if (hostPlayer) {
    console.log('üîÑ Found player to promote to host:', {
      foundBy: hostPlayer.id === oldPlayerId ? 'peer ID' : 'client ID sorting',
      oldId: hostPlayer.id,
      nickname: hostPlayer.nickname,
      newHostId
    })
    
    hostPlayer.id = newHostId // –û–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ PeerJS ID –Ω–∞ –Ω–æ–≤—ã–π host ID
    hostPlayer.isHost = true  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —Ö–æ—Å—Ç–∞
  } else {
    // –≠–¢–û–ì–û –ë–û–õ–¨–®–ï –ù–ï –î–û–õ–ñ–ù–û –ü–†–û–ò–°–•–û–î–ò–¢–¨ –ø—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–µ
    console.error('üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ö–æ—Å—Ç–æ–º!')
    console.error('üí• –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤:', newState.players.map(p => ({ id: p.id, nickname: p.nickname })))
    console.error('üí• oldPlayerId:', oldPlayerId)
    
    // –°–æ–∑–¥–∞–µ–º fallback —Ç–æ–ª—å–∫–æ –≤ –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ
    const newHostPlayer = {
      id: newHostId,
      nickname: 'FALLBACK Host Player', 
      isHost: true,
      color: '#FF6B6B',
      joinedAt: Date.now(),
      authToken: '',
      votingCards: ['–ö–∞—Ä—Ç–æ—á–∫–∞ 1', '–ö–∞—Ä—Ç–æ—á–∫–∞ 2'],
      bettingCards: ['0', '¬±', '+'],
    }
    newState.players.push(newHostPlayer)
    console.log('üÜò Created EMERGENCY fallback host player:', newHostPlayer)
  }

  // –°–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥ —Ö–æ—Å—Ç–∞ —Å–æ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
  newState.players.forEach((p) => {
    if (p.id !== newHostId) {
      p.isHost = false
    }
  })

  console.log('üîÑ Updated state result:', {
    hostId: newState.hostId,
    players: newState.players.map(p => ({ id: p.id, nickname: p.nickname, isHost: p.isHost }))
  })

  return newState
}
