import { ref, computed, watch } from 'vue'
import { defineStore } from 'pinia'
import type { 
  Player, 
  GameState, 
  PeerMessage, 
  MigrationProposalPayload, 
  MigrationVotePayload, 
  MigrationConfirmedPayload, 
  NewHostIdPayload, 
  HostDiscoveryRequestPayload, 
  HostDiscoveryResponsePayload, 
  PeerListRequestPayload, 
  PeerListUpdatePayload, 
  DirectConnectionRequestPayload, 
  StateSyncPayload, 
  NewHostElectionPayload,
  ExtendedSessionData,
  HostRecoveryAnnouncementPayload
} from '@/types/game'
import { peerService } from '@/services/peerService'
import { 
  MIGRATION_TIMEOUT, 
  VOTE_TIMEOUT, 
  HOST_DISCOVERY_TIMEOUT, 
  HOST_GRACE_PERIOD,
  MESH_RESTORATION_DELAY 
} from '@/types/game'

// –ö–ª—é—á–∏ –¥–ª—è localStorage
const SESSION_STORAGE_KEY = 'gameSessionData'
const SESSION_TIMEOUT = 30 * 60 * 1000 // 30 –º–∏–Ω—É—Ç

interface SessionData extends ExtendedSessionData {
  // –ù–∞—Å–ª–µ–¥—É–µ–º –≤—Å–µ –ø–æ–ª—è –æ—Ç ExtendedSessionData –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
}

export const useGameStore = defineStore('game', () => {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
  const gameState = ref<GameState>({
    roomId: '',
    gameStarted: false,
    players: [],
    litUpPlayerId: null,
    maxPlayers: 8,
    hostId: '',
    createdAt: 0
  })

  // –õ–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  const myPlayerId = ref<string>('')
  const myNickname = ref<string>('')
  const isHost = ref<boolean>(false)
  const hostId = ref<string>('')
  const roomId = ref<string>('')
  const connectionStatus = ref<'disconnected' | 'connecting' | 'connected'>('disconnected')
  const restorationState = ref<'idle' | 'discovering' | 'restoring'>('idle')

  // Computed
  const canStartGame = computed(() => 
    isHost.value && gameState.value.players.length >= 2 && !gameState.value.gameStarted
  )

  const myPlayer = computed(() =>
    gameState.value.players.find(p => p.id === myPlayerId.value)
  )

  const canJoinRoom = computed(() =>
    gameState.value.players.length < gameState.value.maxPlayers || !gameState.value.gameStarted
  )

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞
  const generateRandomColor = (): string => {
    const colors = [
      '#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FFEAA7',
      '#DDA0DD', '#98D8C8', '#F7DC6F', '#BB8FCE', '#85C1E9'
    ]
    return colors[Math.floor(Math.random() * colors.length)]
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∏–∫–Ω–µ–π–º–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  const generateDefaultNickname = (): string => {
    return `Player${Math.floor(Math.random() * 9999)}`
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–∏—Ç–∞–µ–º–æ–≥–æ ID –∫–æ–º–Ω–∞—Ç—ã
  const generateRoomId = (): string => {
    const adjectives = ['RED', 'BLUE', 'GREEN', 'GOLD', 'SILVER', 'PURPLE', 'ORANGE', 'PINK']
    const nouns = ['DRAGON', 'TIGER', 'EAGLE', 'WOLF', 'LION', 'BEAR', 'SHARK', 'PHOENIX']
    const numbers = Math.floor(Math.random() * 100)
    
    const adjective = adjectives[Math.floor(Math.random() * adjectives.length)]
    const noun = nouns[Math.floor(Math.random() * nouns.length)]
    
    return `${adjective}-${noun}-${numbers}`
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  const generateAuthToken = (playerId: string, roomId: string, timestamp: number): string => {
    const data = `${playerId}-${roomId}-${timestamp}-${Math.random()}`
    // –ü—Ä–æ—Å—Ç–∞—è —Ö–µ—à-—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
    let hash = 0
    for (let i = 0; i < data.length; i++) {
      const char = data.charCodeAt(i)
      hash = ((hash << 5) - hash) + char
      hash = hash & hash // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ 32-–±–∏—Ç–Ω–æ–µ —á–∏—Å–ª–æ
    }
    return Math.abs(hash).toString(36)
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞
  const validateAuthToken = (player: Player): boolean => {
    // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞ –∏ –µ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
    return !!(player.authToken && player.authToken.length > 0)
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã (—Ö–æ—Å—Ç)
  const createRoom = async (nickname: string) => {
    try {
      connectionStatus.value = 'connecting'
      
      // –ö–†–ò–¢–ò–ß–ù–û: –í—Å–µ–≥–¥–∞ –ø—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ö–æ—Å—Ç–∞ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º ID
      const existingSession = loadSession()
      let restoredPeerId: string
      let targetRoomId: string
      
      if (existingSession && existingSession.isHost) {
        console.log('üîÑ MANDATORY: Restoring host session for room:', existingSession.roomId)
        targetRoomId = existingSession.roomId
        
        // –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ø–µ—Ä–µ–¥–∞–µ–º roomId –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è peer ID –∏–∑ localStorage
        restoredPeerId = await peerService.createHost(targetRoomId)
        
        console.log('üìã Restoring complete game state from saved session')
        myPlayerId.value = restoredPeerId
        myNickname.value = nickname
        isHost.value = true
        roomId.value = existingSession.roomId
        hostId.value = restoredPeerId
        gameState.value = { ...existingSession.gameState }
        gameState.value.hostId = restoredPeerId
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–π ID –≤ —Å–ø–∏—Å–∫–µ –∏–≥—Ä–æ–∫–æ–≤
        const myPlayerIndex = gameState.value.players.findIndex(p => p.isHost)
        if (myPlayerIndex !== -1) {
          gameState.value.players[myPlayerIndex].id = restoredPeerId
          gameState.value.players[myPlayerIndex].nickname = nickname
        }
        
        connectionStatus.value = 'connected'
        peerService.setAsHost(restoredPeerId)
        setupHostMessageHandlers()
        
        console.log('üéâ Host fully restored with session data - ID:', restoredPeerId)
        return restoredPeerId
        
      } else {
        // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã
        console.log('üÜï Creating brand new room')
        targetRoomId = generateRoomId()
        
        // –ü–µ—Ä–µ–¥–∞–µ–º roomId –¥–∞–∂–µ –¥–ª—è –Ω–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å peer ID
        restoredPeerId = await peerService.createHost(targetRoomId)
      }
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –Ω–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã
      if (!existingSession || !existingSession.isHost) {
        console.log('üÜï Initializing new room state')
        const now = Date.now()
        
        myPlayerId.value = restoredPeerId
        myNickname.value = nickname
        isHost.value = true
        roomId.value = targetRoomId
        hostId.value = restoredPeerId
        
        gameState.value = {
          roomId: targetRoomId,
          gameStarted: false,
          players: [],
          litUpPlayerId: null,
          maxPlayers: 8,
          hostId: restoredPeerId,
          createdAt: now
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ö–æ—Å—Ç–∞ –≤ —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
        const hostPlayer: Player = {
          id: restoredPeerId,
          nickname,
          color: generateRandomColor(),
          isHost: true,
          joinedAt: now,
          authToken: generateAuthToken(restoredPeerId, targetRoomId, now)
        }
        
        gameState.value.players = [hostPlayer]
      }
      
      connectionStatus.value = 'connected'
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–æ–ª—å —Ö–æ—Å—Ç–∞ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º heartbeat
      peerService.setAsHost(restoredPeerId)
      setupHostMessageHandlers()
      
      console.log('üèÅ Host initialization completed with ID:', restoredPeerId)
      return restoredPeerId
      
    } catch (error) {
      connectionStatus.value = 'disconnected'
      throw error
    }
  }

  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ (–∫–ª–∏–µ–Ω—Ç)
  const joinRoom = async (nickname: string, targetHostId: string) => {
    try {
      connectionStatus.value = 'connecting'
      
      await peerService.connectToHost(targetHostId)
      
      myNickname.value = nickname
      hostId.value = targetHostId
      myPlayerId.value = peerService.getMyId() || ''
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–æ–ª—å –∫–ª–∏–µ–Ω—Ç–∞
      peerService.setAsClient()
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
      peerService.sendMessage(targetHostId, {
        type: 'join_request',
        payload: { nickname }
      })
      
      // –ö–†–ò–¢–ò–ß–ù–û: –°—Ä–∞–∑—É –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è mesh-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      peerService.sendMessage(targetHostId, {
        type: 'request_peer_list',
        payload: { 
          requesterId: myPlayerId.value,
          requesterToken: '',
          timestamp: Date.now()
        }
      })
      
      connectionStatus.value = 'connected'
      setupClientMessageHandlers()
    } catch (error) {
      connectionStatus.value = 'disconnected'
      throw error
    }
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ö–æ—Å—Ç–∞
  const setupHostMessageHandlers = () => {
    console.log('Setting up host message handlers')
    
    peerService.onMessage('join_request', (message, conn) => {
      console.log('Host received join_request:', {
        payload: message.payload,
        connPeer: conn?.peer,
        canJoinRoom: canJoinRoom.value,
        currentPlayers: gameState.value.players.length,
        maxPlayers: gameState.value.maxPlayers,
        gameStarted: gameState.value.gameStarted
      })
      
      if (!conn) {
        console.log('No connection provided to join_request')
        return
      }
      
      if (!canJoinRoom.value) {
        console.log('Cannot join room:', {
          currentPlayers: gameState.value.players.length,
          maxPlayers: gameState.value.maxPlayers,
          gameStarted: gameState.value.gameStarted
        })
        return
      }
      
      const { nickname } = message.payload
      
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –∏–≥—Ä–æ–∫ –ø–æ ID
      const existingPlayerById = gameState.value.players.find(p => p.id === conn.peer)
      if (existingPlayerById) {
        console.log('Player already exists by ID, updating info:', conn.peer)
        existingPlayerById.nickname = nickname
        broadcastGameState()
        return
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–≥—Ä–æ–∫ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º ID (–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ)
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º savedPlayerId –∏–∑ payload —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
      const { savedPlayerId } = message.payload
      if (savedPlayerId) {
        const existingPlayerBySavedId = gameState.value.players.find(p => p.id === savedPlayerId && !p.isHost)
        if (existingPlayerBySavedId) {
          console.log('Found existing player by saved ID, updating connection:', {
            savedId: savedPlayerId,
            newConnectionId: conn.peer,
            nickname: nickname
          })
          
          // –û–±–Ω–æ–≤–ª—è–µ–º ID —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
          existingPlayerBySavedId.id = conn.peer
          existingPlayerBySavedId.authToken = generateAuthToken(conn.peer, gameState.value.roomId, Date.now())
          
          broadcastGameState()
          console.log('Updated existing player:', existingPlayerBySavedId)
          return
        }
      }
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–∞–∫–æ–≥–æ –Ω–∏–∫–Ω–µ–π–º–∞ –Ω–µ—Ç
      const now = Date.now()
      const newPlayer: Player = {
        id: conn.peer,
        nickname,
        color: generateRandomColor(),
        isHost: false,
        joinedAt: now,
        authToken: generateAuthToken(conn.peer, gameState.value.roomId, now)
      }
      
      console.log('Adding new player:', newPlayer)
      gameState.value.players.push(newPlayer)
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º
      broadcastGameState()
      console.log('Updated players list:', gameState.value.players.map(p => ({ id: p.id, nickname: p.nickname })))
    })

    peerService.onMessage('light_up_request', (message) => {
      console.log('Host received light_up_request:', message.payload)
      const { playerId } = message.payload
      
      if (gameState.value.gameStarted) {
        console.log('Processing light up for player:', playerId)
        gameState.value.litUpPlayerId = playerId
        broadcastGameState()
        
        // –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
          gameState.value.litUpPlayerId = null
          broadcastGameState()
        }, 2000)
      } else {
        console.log('Game not started, ignoring light_up_request')
      }
    })
    
    peerService.onMessage('request_game_state', (message, conn) => {
      if (!conn) return
      
      console.log('Host sending game state to client:', conn.peer)
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –∑–∞–ø—Ä–æ—Å–∏–≤—à–µ–º—É –∫–ª–∏–µ–Ω—Ç—É
      peerService.sendMessage(conn.peer, {
        type: 'game_state_update',
        payload: gameState.value
      })
    })
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ host discovery
    setupHostDiscoveryHandlers()
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ mesh-–ø—Ä–æ—Ç–æ–∫–æ–ª–∞
    setupMeshProtocolHandlers()
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
  const setupClientMessageHandlers = () => {
    peerService.onMessage('game_state_update', (message) => {
      gameState.value = { ...message.payload }
    })
    
    peerService.onMessage('heartbeat', (message) => {
      const { hostId: heartbeatHostId } = message.payload
      peerService.handleHeartbeat(heartbeatHostId)
    })
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ callback –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Ö–æ—Å—Ç–∞
    peerService.onHostDisconnected(() => {
      handleHostDisconnection()
    })
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–∏–≥—Ä–∞—Ü–∏–∏
    setupMigrationHandlers()
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ host discovery
    setupHostDiscoveryHandlers()
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ mesh-–ø—Ä–æ—Ç–æ–∫–æ–ª–∞
    setupMeshProtocolHandlers()
  }

  // –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
  const broadcastGameState = () => {
    if (isHost.value) {
      peerService.broadcastMessage({
        type: 'game_state_update',
        payload: gameState.value
      })
    }
  }

  // –°—Ç–∞—Ä—Ç –∏–≥—Ä—ã (—Ç–æ–ª—å–∫–æ —Ö–æ—Å—Ç)
  const startGame = () => {
    if (!canStartGame.value) return
    
    gameState.value.gameStarted = true
    broadcastGameState()
  }

  // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –∏–≥—Ä–æ–∫–∞
  const lightUpPlayer = () => {
    console.log('lightUpPlayer called:', {
      gameStarted: gameState.value.gameStarted,
      myPlayerId: myPlayerId.value,
      isHost: isHost.value,
      hostId: hostId.value,
      connectionStatus: connectionStatus.value
    })
    
    if (!gameState.value.gameStarted || !myPlayerId.value) {
      console.log('lightUpPlayer aborted: game not started or no player ID')
      return
    }
    
    if (isHost.value) {
      console.log('Host processing light up locally')
      // –•–æ—Å—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –ª–æ–∫–∞–ª—å–Ω–æ
      gameState.value.litUpPlayerId = myPlayerId.value
      broadcastGameState()
      
      setTimeout(() => {
        gameState.value.litUpPlayerId = null
        broadcastGameState()
      }, 2000)
    } else {
      console.log('Client sending light_up_request to host:', hostId.value)
      // –ö–ª–∏–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å —Ö–æ—Å—Ç—É
      peerService.sendMessage(hostId.value, {
        type: 'light_up_request',
        payload: { playerId: myPlayerId.value }
      })
    }
  }

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏
  const migrationState = ref<{
    inProgress: boolean
    phase: 'proposal' | 'voting' | 'confirmed' | null
    proposedHostId: string | null
    votes: Map<string, 'approve' | 'reject'>
    timeout: number | null
  }>({
    inProgress: false,
    phase: null,
    proposedHostId: null,
    votes: new Map(),
    timeout: null
  })

  // –ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –æ—Ç–∫–ª—é—á–∏–≤—à–µ–º—É—Å—è —Ö–æ—Å—Ç—É
  const handleHostDisconnection = async () => {
    console.log('üö® Host disconnection detected, starting reconnection attempts...')
    console.log('üîç DISCONNECTION STATE:', {
      currentHostId: gameState.value.hostId,
      myPlayerId: myPlayerId.value,
      connectionStatus: connectionStatus.value,
      gameStarted: gameState.value.gameStarted,
      playersCount: gameState.value.players.length
    })
    
    // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
    if (connectionStatus.value === 'connecting') {
      console.log('Already trying to reconnect, ignoring...')
      return
    }
    
    const originalHostId = gameState.value.hostId
    connectionStatus.value = 'connecting'
    
    // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞: –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Ç–æ–º—É –∂–µ —Ö–æ—Å—Ç—É
    await attemptReconnectionToHost(originalHostId)
  }

  // –ü–æ–ø—ã—Ç–∫–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –æ—Ç–∫–ª—é—á–∏–≤—à–µ–º—É—Å—è —Ö–æ—Å—Ç—É
  const attemptReconnectionToHost = async (hostId: string) => {
    console.log('üîÑ Attempting to reconnect to host:', hostId)
    
    const maxAttempts = 5
    const attemptInterval = 3000 // 3 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
    
    for (let attempt = 1; attempt <= maxAttempts; attempt++) {
      console.log(`üîç Reconnection attempt ${attempt}/${maxAttempts} to host:`, hostId)
      
      try {
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Ç–æ–º—É –∂–µ —Ö–æ—Å—Ç—É
        await peerService.connectToHost(hostId)
        
        // –ï—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ - –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
        peerService.setAsClient()
        setupClientMessageHandlers()
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        peerService.sendMessage(hostId, {
          type: 'join_request',
          payload: { 
            nickname: myNickname.value,
            savedPlayerId: myPlayerId.value
          }
        })
        
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
        peerService.sendMessage(hostId, {
          type: 'request_game_state',
          payload: { requesterId: myPlayerId.value }
        })
        
        connectionStatus.value = 'connected'
        console.log('‚úÖ Successfully reconnected to host:', hostId)
        return
        
      } catch (error) {
        console.log(`‚ùå Reconnection attempt ${attempt} failed:`, error)
        
        if (attempt < maxAttempts) {
          console.log(`‚è≥ Waiting ${attemptInterval}ms before next attempt...`)
          await new Promise(resolve => setTimeout(resolve, attemptInterval))
        }
      }
    }
    
    // –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ—É–¥–∞—á–Ω—ã
    console.log('‚ùå All reconnection attempts failed. Host is likely permanently disconnected.')
    connectionStatus.value = 'disconnected'
    
    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    // –æ —Ç–æ–º, —á—Ç–æ —Ö–æ—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏ –Ω—É–∂–Ω–æ –ø–æ–∫–∏–Ω—É—Ç—å –∫–æ–º–Ω–∞—Ç—É
  }
  
  // –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å –º–∏–≥—Ä–∞—Ü–∏–µ–π –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è grace period
  const proceedWithMigrationAfterGracePeriod = async (originalHostId: string) => {
    try {
      console.log('üîÑ Grace period completed, starting migration process...')
      console.log('üîç MIGRATION START STATE:', {
        originalHostId,
        currentGameStatePlayers: gameState.value.players.map(p => ({ id: p.id, nickname: p.nickname, isHost: p.isHost })),
        myPlayerId: myPlayerId.value,
        connectionStatus: connectionStatus.value,
        migrationInProgress: migrationState.value.inProgress,
        peerRecoveryState: peerService.getHostRecoveryState()
      })
      
      // –£–¥–∞–ª—è–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ —Ö–æ—Å—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤
      const playersBeforeFilter = gameState.value.players.length
      gameState.value.players = gameState.value.players.filter(p => p.id !== originalHostId)
      const playersAfterFilter = gameState.value.players.length
      
      console.log('üîç PLAYER FILTERING:', {
        originalHostId,
        playersBeforeFilter,
        playersAfterFilter,
        remainingPlayers: gameState.value.players.map(p => ({ id: p.id, nickname: p.nickname, authToken: !!p.authToken }))
      })
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω—ã –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∏–≥—Ä–æ–∫–æ–≤
      const validPlayers = gameState.value.players.filter(validateAuthToken)
      console.log('üîç TOKEN VALIDATION:', {
        totalPlayers: gameState.value.players.length,
        validPlayers: validPlayers.length,
        invalidPlayers: gameState.value.players.filter(p => !validateAuthToken(p)).map(p => ({ id: p.id, nickname: p.nickname, hasToken: !!p.authToken }))
      })
      
      if (validPlayers.length === 0) {
        throw new Error('No valid players remaining after grace period')
      }
      
      console.log('Valid players remaining after grace period:', validPlayers.map(p => ({ id: p.id, nickname: p.nickname })))
      
      // –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –º–æ–∂–µ—Ç –∫—Ç–æ-—Ç–æ —É–∂–µ —Å—Ç–∞–ª —Ö–æ—Å—Ç–æ–º –≤–æ –≤—Ä–µ–º—è grace period
      console.log('Final check: Quick host discovery among remaining players...')
      console.log('üîç DISCOVERY ATTEMPT STATE:', {
        validPlayersCount: validPlayers.length,
        peerState: peerService.getCurrentRole(),
        myPeerId: peerService.getMyId(),
        activeConnections: peerService.getActiveConnections()
      })
      
      const discoveredHost = await quickHostDiscovery(validPlayers)
      
      console.log('üîç DISCOVERY RESULT:', {
        discoveredHost: discoveredHost ? {
          hostId: discoveredHost.currentHostId,
          isHost: discoveredHost.isHost,
          responderId: discoveredHost.responderId
        } : null
      })
      
      if (discoveredHost) {
        console.log('Found existing host during final check, reconnecting:', discoveredHost.currentHostId)
        await reconnectToDiscoveredHost(discoveredHost)
        return
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      const activeConnections = peerService.getActiveConnections()
      const openConnections = activeConnections.filter(c => c.isOpen)
      console.log('üîç CONNECTION ANALYSIS:', {
        totalConnections: activeConnections.length,
        openConnections: openConnections.length,
        connectionDetails: activeConnections.map(c => ({ peerId: c.peerId, isOpen: c.isOpen })),
        knownPeers: peerService.getAllKnownPeers()
      })
      
      if (openConnections.length === 0) {
        console.log('No active connections, using deterministic fallback...')
        
        // Fallback: –î–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–±–æ—Ä —Ö–æ—Å—Ç–∞ –±–µ–∑ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
        const deterministicHost = electHostDeterministic(validPlayers)
        console.log('üîç DETERMINISTIC ELECTION:', {
          selectedHostId: deterministicHost,
          myPlayerId: myPlayerId.value,
          amISelected: deterministicHost === myPlayerId.value,
          validPlayersForElection: validPlayers.map(p => ({ id: p.id, nickname: p.nickname }))
        })
        
        if (deterministicHost === myPlayerId.value) {
          console.log('I am deterministic host, becoming host...')
          await becomeNewHostWithRecovery(originalHostId)
          return
        } else {
          console.log('Waiting for deterministic host to initialize...')
          console.log('üîç WAITING FOR DETERMINISTIC HOST:', {
            waitingForHostId: deterministicHost,
            waitTimeSeconds: 3,
            willRetryDiscovery: true
          })
          
          // –î–∞–µ–º –≤—Ä–µ–º—è –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É —Ö–æ—Å—Ç—É –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è
          setTimeout(async () => {
            console.log('Attempting to reconnect to deterministic host...')
            console.log('üîç RETRY DISCOVERY STATE:', {
              targetHostId: deterministicHost,
              myCurrentState: {
                peerId: peerService.getMyId(),
                connectionStatus: connectionStatus.value,
                activeConnections: peerService.getActiveConnections()
              }
            })
            
            // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –Ω–æ–≤–æ–≥–æ —Ö–æ—Å—Ç–∞ –µ—â–µ —Ä–∞–∑
            const finalHost = await quickHostDiscovery(validPlayers)
            console.log('üîç FINAL DISCOVERY RESULT:', {
              finalHost: finalHost ? {
                hostId: finalHost.currentHostId,
                isHost: finalHost.isHost
              } : null
            })
            
            if (finalHost) {
              await reconnectToDiscoveredHost(finalHost)
            } else {
              console.log('üîç NO HOST FOUND, EMERGENCY TAKEOVER:', {
                myPlayerId: myPlayerId.value,
                originalHostId,
                reason: 'No deterministic host found after wait period'
              })
              // –ï—Å–ª–∏ –Ω–∏–∫–æ–≥–æ –Ω–µ –Ω–∞—à–ª–∏ - —Å–∞–º–∏ —Å—Ç–∞–Ω–æ–≤–∏–º—Å—è —Ö–æ—Å—Ç–æ–º
              await becomeNewHostWithRecovery(originalHostId)
            }
          }, 3000)
          return
        }
      }
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è - –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—É—é –º–∏–≥—Ä–∞—Ü–∏—é
      console.log('üîç STARTING SECURE MIGRATION:', {
        validPlayersCount: validPlayers.length,
        openConnectionsCount: openConnections.length,
        migrationReason: 'Active connections available'
      })
      await startSecureMigration(validPlayers)
      
    } catch (error) {
      console.error('‚ùå Failed to proceed with migration after grace period:', error)
      console.log('üîç MIGRATION ERROR STATE:', {
        error: error.message,
        connectionStatus: connectionStatus.value,
        gameState: {
          playersCount: gameState.value.players.length,
          hostId: gameState.value.hostId
        },
        peerState: {
          role: peerService.getCurrentRole(),
          connections: peerService.getActiveConnections(),
          recoveryState: peerService.getHostRecoveryState()
        }
      })
      connectionStatus.value = 'disconnected'
    }
  }

  // –ë—ã—Å—Ç—Ä—ã–π –æ–ø—Ä–æ—Å —Ö–æ—Å—Ç–∞ —Å—Ä–µ–¥–∏ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∏–≥—Ä–æ–∫–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É—è –æ—Å–Ω–æ–≤–Ω–æ–π peer)
  const quickHostDiscovery = async (players: Player[]): Promise<HostDiscoveryResponsePayload | null> => {
    console.log('Starting quick host discovery among remaining players...')
    
    if (players.length === 0) return null
    
    return new Promise(async (resolve) => {
      let discoveredHost: HostDiscoveryResponsePayload | null = null
      let responsesReceived = 0
      const maxResponses = players.length
      
      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π peer –≤–º–µ—Å—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ
      const mainPeer = peerService.getPeer()
      if (!mainPeer || !mainPeer.open) {
        console.log('Main peer not available for discovery')
        resolve(null)
        return
      }
      
      console.log('Quick discovery with short timeout for', players.length, 'players')
      
      const discoveryRequest: HostDiscoveryRequestPayload = {
        requesterId: mainPeer.id,
        requesterToken: myPlayer.value?.authToken || '',
        timestamp: Date.now()
      }
      
      console.log('üîç DISCOVERY REQUEST PAYLOAD:', discoveryRequest)
      
      const connectionsToCleanup: any[] = []
      const savedConnections: string[] = []
      
      // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–∞–∂–¥–æ–º—É –∏–≥—Ä–æ–∫—É
      for (const player of players) {
        try {
          const conn = mainPeer.connect(player.id)
          
          conn.on('open', () => {
            console.log('Quick discovery connected to:', player.id)
            
            // –ö–†–ò–¢–ò–ß–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ PeerService –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            peerService.addConnection(player.id, conn)
            savedConnections.push(player.id)
            
            conn.send({
              type: 'host_discovery_request',
              payload: discoveryRequest
            })
          })
          
          conn.on('data', (data: any) => {
            const message = data as PeerMessage
            if (message.type === 'host_discovery_response') {
              const response = message.payload as HostDiscoveryResponsePayload
              console.log('Quick discovery response:', response)
              
              responsesReceived++
              
              if (response.isHost && !discoveredHost) {
                discoveredHost = response
                console.log('Quick discovery found host:', response.currentHostId)
                finishDiscovery()
                resolve(discoveredHost)
                return
              }
              
              if (responsesReceived >= maxResponses) {
                finishDiscovery()
                resolve(discoveredHost)
              }
            }
          })
          
          conn.on('error', () => {
            responsesReceived++
            if (responsesReceived >= maxResponses) {
              finishDiscovery()
              resolve(discoveredHost)
            }
          })
          
          // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
          connectionsToCleanup.push(conn)
          
        } catch (error: any) {
          responsesReceived++
          if (responsesReceived >= maxResponses) {
            finishDiscovery()
            resolve(discoveredHost)
          }
        }
      }
      
      // –ö–æ—Ä–æ—Ç–∫–∏–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ discovery
      setTimeout(() => {
        console.log('Quick discovery timeout')
        finishDiscovery()
        resolve(discoveredHost)
      }, 2000) // 2 —Å–µ–∫—É–Ω–¥—ã
      
      function finishDiscovery() {
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–ï –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ PeerService
        connectionsToCleanup.forEach(conn => {
          // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ù–ï –±—ã–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã
          if (!peerService.hasConnection(conn.peer)) {
            try { 
              console.log('Closing unsaved discovery connection:', conn.peer)
              conn.close() 
            } catch (e) { /* ignore */ }
          } else {
            console.log('Keeping saved connection:', conn.peer)
          }
        })
        
        console.log('Discovery completed, saved connections:', savedConnections)
      }
    })
  }

  // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω–æ–º—É —Ö–æ—Å—Ç—É
  const reconnectToDiscoveredHost = async (discoveredHost: HostDiscoveryResponsePayload) => {
    console.log('Reconnecting to discovered host:', discoveredHost.currentHostId)
    
    try {
      connectionStatus.value = 'connecting'
      
      // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –Ω–∞–π–¥–µ–Ω–Ω–æ–º—É —Ö–æ—Å—Ç—É
      await peerService.reconnectToNewHost(discoveredHost.currentHostId)
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      isHost.value = false
      hostId.value = discoveredHost.currentHostId
      gameState.value.hostId = discoveredHost.currentHostId
      
      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º —Ö–æ—Å—Ç–æ–º
      gameState.value = { ...discoveredHost.gameState }
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–æ–ª—å –∫–ª–∏–µ–Ω—Ç–∞
      peerService.setAsClient()
      
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
      setupClientMessageHandlers()
      
      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
      peerService.sendMessage(discoveredHost.currentHostId, {
        type: 'request_game_state',
        payload: { requesterId: myPlayerId.value }
      })
      
      connectionStatus.value = 'connected'
      console.log('Successfully reconnected to discovered host')
      
    } catch (error) {
      console.error('Failed to reconnect to discovered host:', error)
      connectionStatus.value = 'disconnected'
      throw error
    }
  }

  // –ó–∞–ø—É—Å–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏
  const startSecureMigration = async (validPlayers: Player[]) => {
    console.log('Starting secure migration with players:', validPlayers.map(p => p.id))
    
    migrationState.value.inProgress = true
    migrationState.value.phase = 'proposal'
    
    try {
      // –§–∞–∑–∞ 1: –î–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–±–æ—Ä –Ω–æ–≤–æ–≥–æ —Ö–æ—Å—Ç–∞
      const proposedHost = electNewHostFromValidPlayers(validPlayers)
      migrationState.value.proposedHostId = proposedHost.id
      
      console.log('Proposed new host:', proposedHost.id)
      
      if (proposedHost.id === myPlayerId.value) {
        // –Ø –ø—Ä–µ–¥–ª–æ–∂–µ–Ω –∫–∞–∫ –Ω–æ–≤—ã–π —Ö–æ—Å—Ç
        await initiateHostMigration(proposedHost)
      } else {
        // –£—á–∞—Å—Ç–≤—É—é –≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏
        await participateInMigration(proposedHost)
      }
      
    } catch (error) {
      console.error('Secure migration failed:', error)
      resetMigrationState()
      throw error
    }
  }

  // –í—ã–±–æ—Ä –Ω–æ–≤–æ–≥–æ —Ö–æ—Å—Ç–∞ –∏–∑ –≤–∞–ª–∏–¥–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
  const electNewHostFromValidPlayers = (validPlayers: Player[]): Player => {
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ nickname –¥–ª—è –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ (–∫–∞–∫ –≤ electHostDeterministic)
    const sortedPlayers = validPlayers.sort((a, b) => a.nickname.localeCompare(b.nickname))
    
    if (sortedPlayers.length === 0) {
      throw new Error('No valid players for host election')
    }
    
    console.log('üîç HOST ELECTION ALGORITHM:', {
      validPlayers: validPlayers.map(p => ({ id: p.id, nickname: p.nickname })),
      sortedPlayers: sortedPlayers.map(p => ({ id: p.id, nickname: p.nickname })),
      selectedHost: sortedPlayers[0],
      myPlayerId: myPlayerId.value,
      amISelected: sortedPlayers[0].id === myPlayerId.value
    })
    
    return sortedPlayers[0]
  }

  // –ò–Ω–∏—Ü–∏–∞—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ —Ö–æ—Å—Ç–∞ (–Ω–æ–≤—ã–π —Ö–æ—Å—Ç)
  const initiateHostMigration = async (proposedHost: Player) => {
    console.log('Initiating host migration as new host...')
    
    migrationState.value.phase = 'voting'
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –≤—Å–µ–º –æ—Å—Ç–∞–≤—à–∏–º—Å—è –∏–≥—Ä–æ–∫–∞–º
    const proposal: MigrationProposalPayload = {
      proposedHostId: proposedHost.id,
      proposedHostToken: proposedHost.authToken,
      reason: 'host_disconnected',
      timestamp: Date.now()
    }
    
    // –ö–†–ò–¢–ò–ß–ù–û: –†–∞—Å—Å—ã–ª–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é –∫–∞–∂–¥–æ–º—É –∏–≥—Ä–æ–∫—É –≤–º–µ—Å—Ç–æ broadcast
    const validPlayers = gameState.value.players.filter(p => p.id !== myPlayerId.value)
    console.log('Sending migration proposal to players:', validPlayers.map(p => p.id))
    
    for (const player of validPlayers) {
      if (peerService.hasConnection(player.id)) {
        console.log('Sending migration proposal to:', player.id)
        peerService.sendMessage(player.id, {
          type: 'migration_proposal',
          payload: proposal
        })
      } else {
        console.log('No connection to player for migration proposal:', player.id)
      }
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    migrationState.value.timeout = window.setTimeout(() => {
      handleMigrationTimeout()
    }, VOTE_TIMEOUT)
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–æ–ª–æ—Å—É–µ–º –∑–∞ —Å–µ–±—è
    migrationState.value.votes.set(myPlayerId.value, 'approve')
    
    try {
      // –ñ–¥–µ–º –≥–æ–ª–æ—Å–æ–≤ –æ—Ç –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
      await waitForMigrationVotes()
    } catch (error) {
      console.log('üö® Migration voting failed, proceeding with emergency host assumption...')
      forceMigrationComplete()
    }
  }

  // –£—á–∞—Å—Ç–∏–µ –≤ –º–∏–≥—Ä–∞—Ü–∏–∏ (–∫–ª–∏–µ–Ω—Ç)
  const participateInMigration = async (proposedHost: Player) => {
    console.log('Participating in migration, proposed host:', proposedHost.id)
    
    migrationState.value.phase = 'voting'
    
    // –£–î–ê–õ–ï–ù–û: setupMigrationHandlers() - —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ setupClientMessageHandlers
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ migration_proposal –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
    
    console.log('Migration handlers already set up, waiting for migration_proposal message...')
    
    // –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å —Å—Ä–∞–∑—É - –∂–¥–µ–º –ø–æ–ª—É—á–µ–Ω–∏—è migration_proposal
    // –ì–æ–ª–æ—Å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ migration_proposal
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–∏
  const setupMigrationHandlers = () => {
    console.log('üîß Setting up migration handlers')
    
    peerService.onMessage('migration_proposal', (message, conn) => {
      const payload = message.payload as MigrationProposalPayload
      console.log('üö® RECEIVED MIGRATION PROPOSAL:', {
        payload,
        fromPeer: conn?.peer,
        myPlayerId: myPlayerId.value,
        isHost: isHost.value,
        migrationInProgress: migrationState.value.inProgress,
        connectionStatus: connectionStatus.value,
        gameState: {
          hostId: gameState.value.hostId,
          playersCount: gameState.value.players.length
        }
      })
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      if (isHost.value) {
        console.log('‚ùå Received migration proposal while being host, ignoring')
        return
      }
      
      if (migrationState.value.inProgress) {
        console.log('‚ùå Migration already in progress, ignoring proposal')
        return
      }
      
      // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
      console.log('üîç VALIDATING MIGRATION PROPOSAL:', {
        proposedHostId: payload.proposedHostId,
        currentPlayers: gameState.value.players.map(p => ({ id: p.id, nickname: p.nickname, authToken: !!p.authToken })),
        proposedHostToken: payload.proposedHostToken ? 'present' : 'missing'
      })
      
      if (validateMigrationProposal(payload)) {
        console.log('‚úÖ Migration proposal validated, sending vote...')
        migrationState.value.proposedHostId = payload.proposedHostId
        migrationState.value.phase = 'voting'
        migrationState.value.inProgress = true
        
        // –ö–†–ò–¢–ò–ß–ù–û: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å —Å—Ä–∞–∑—É –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        const vote: MigrationVotePayload = {
          voterId: myPlayerId.value,
          voterToken: myPlayer.value?.authToken || '',
          proposedHostId: payload.proposedHostId,
          vote: 'approve',
          timestamp: Date.now()
        }
        
        console.log('üó≥Ô∏è SENDING MIGRATION VOTE:', {
          vote,
          targetPeer: payload.proposedHostId,
          hasConnection: peerService.hasConnection(payload.proposedHostId),
          allConnections: peerService.getActiveConnections()
        })
        
        peerService.sendMessage(payload.proposedHostId, {
          type: 'migration_vote',
          payload: vote
        })
        
        console.log('‚úÖ Migration vote sent successfully')
      } else {
        console.log('‚ùå Migration proposal validation failed:', {
          proposedHostExists: !!gameState.value.players.find(p => p.id === payload.proposedHostId),
          tokenMatch: gameState.value.players.find(p => p.id === payload.proposedHostId)?.authToken === payload.proposedHostToken
        })
      }
    })
    
    peerService.onMessage('migration_vote', (message) => {
      const payload = message.payload as MigrationVotePayload
      console.log('Received migration vote:', payload)
      
      if (validateMigrationVote(payload)) {
        migrationState.value.votes.set(payload.voterId, payload.vote)
        checkMigrationConsensus()
      }
    })
    
    peerService.onMessage('migration_confirmed', (message) => {
      const payload = message.payload as MigrationConfirmedPayload
      console.log('Received migration confirmation:', payload)
      
      if (validateMigrationConfirmation(payload)) {
        executeMigration(payload.newHostId)
      }
    })
    
    peerService.onMessage('new_host_id', (message) => {
      const payload = message.payload as NewHostIdPayload
      console.log('Received new host ID:', payload)
      
      if (payload.oldHostId === migrationState.value.proposedHostId) {
        finalizeHostMigration(payload.newHostId)
      }
    })
  }

  // –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤
  const waitForMigrationVotes = async (): Promise<void> => {
    return new Promise((resolve, reject) => {
      const checkInterval = setInterval(() => {
        const requiredVotes = gameState.value.players.length
        const receivedVotes = migrationState.value.votes.size
        
        if (receivedVotes >= requiredVotes) {
          clearInterval(checkInterval)
          checkMigrationConsensus()
          resolve()
        }
      }, 100)
      
      // –¢–∞–π–º–∞—É—Ç –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
      setTimeout(() => {
        clearInterval(checkInterval)
        reject(new Error('Migration vote timeout'))
      }, VOTE_TIMEOUT + 1000)
    })
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞
  const checkMigrationConsensus = () => {
    const totalVotes = migrationState.value.votes.size
    const approveVotes = Array.from(migrationState.value.votes.values()).filter(v => v === 'approve').length
    
    console.log(`Migration votes: ${approveVotes}/${totalVotes} approve`)
    
    // –¢—Ä–µ–±—É–µ–º –µ–¥–∏–Ω–æ–≥–ª–∞—Å–Ω–æ–≥–æ –æ–¥–æ–±—Ä–µ–Ω–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    if (approveVotes === totalVotes && totalVotes === gameState.value.players.length) {
      confirmMigration()
    }
  }

  // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏
  const confirmMigration = async () => {
    console.log('Migration approved by all players')
    
    if (migrationState.value.timeout) {
      clearTimeout(migrationState.value.timeout)
    }
    
    migrationState.value.phase = 'confirmed'
    
    const confirmation: MigrationConfirmedPayload = {
      newHostId: migrationState.value.proposedHostId!,
      newHostToken: myPlayer.value?.authToken || '',
      confirmedBy: Array.from(migrationState.value.votes.keys()),
      timestamp: Date.now()
    }
    
    // –†–∞—Å—Å—ã–ª–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    peerService.broadcastMessage({
      type: 'migration_confirmed',
      payload: confirmation
    })
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
    await executeMigration(migrationState.value.proposedHostId!)
  }

  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏
  const executeMigration = async (newHostId: string) => {
    console.log('Executing migration to new host:', newHostId)
    
    if (newHostId === myPlayerId.value) {
      // –Ø —Å—Ç–∞–Ω–æ–≤–ª—é—Å—å –Ω–æ–≤—ã–º —Ö–æ—Å—Ç–æ–º
      await becomeNewHostSecurely()
    } else {
      // –û–∂–∏–¥–∞—é –Ω–æ–≤—ã–π ID –æ—Ç —Ö–æ—Å—Ç–∞ –∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞—é—Å—å
      console.log('Waiting for new host ID...')
    }
  }

  // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã–º —Ö–æ—Å—Ç–æ–º
  const becomeNewHostSecurely = async () => {
    console.log('Becoming new host securely...')
    
    const oldId = myPlayerId.value
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    isHost.value = true
    hostId.value = myPlayerId.value
    gameState.value.hostId = myPlayerId.value
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å –∏–≥—Ä–æ–∫–∞ –≤ —Å–ø–∏—Å–∫–µ
    const myPlayerIndex = gameState.value.players.findIndex(p => p.id === myPlayerId.value)
    if (myPlayerIndex !== -1) {
      gameState.value.players[myPlayerIndex].isHost = true
    }
    
    // –ö–†–ò–¢–ò–ß–ù–û: –ü–µ—Ä–µ–¥–∞–µ–º roomId –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ peer ID —Ö–æ—Å—Ç–∞
    const newPeerId = await peerService.createHost(roomId.value)
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –æ –Ω–æ–≤–æ–º ID
    const newHostMessage: NewHostIdPayload = {
      oldHostId: oldId,
      newHostId: newPeerId,
      newHostToken: myPlayer.value?.authToken || '',
      timestamp: Date.now()
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ —Å—Ç–∞—Ä—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –∏—Ö –∑–∞–∫—Ä—ã—Ç–∏–µ–º
    peerService.broadcastMessage({
      type: 'new_host_id',
      payload: newHostMessage
    })
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    myPlayerId.value = newPeerId
    gameState.value.hostId = newPeerId
    
    if (myPlayerIndex !== -1) {
      gameState.value.players[myPlayerIndex].id = newPeerId
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º heartbeat
    peerService.setAsHost(newPeerId)
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ö–æ—Å—Ç–∞
    setupHostMessageHandlers()
    
    console.log('Successfully became new host with ID:', newPeerId)
    
    resetMigrationState()
  }

  // –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ —Ö–æ—Å—Ç–∞
  const finalizeHostMigration = async (newHostId: string) => {
    console.log('Finalizing host migration to:', newHostId)
    
    try {
      connectionStatus.value = 'connecting'
      
      // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –Ω–æ–≤–æ–º—É —Ö–æ—Å—Ç—É
      await peerService.reconnectToNewHost(newHostId)
      
      hostId.value = newHostId
      gameState.value.hostId = newHostId
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–æ–ª—å –∫–ª–∏–µ–Ω—Ç–∞
      peerService.setAsClient()
      
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
      setupClientMessageHandlers()
      
      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
      peerService.sendMessage(newHostId, {
        type: 'request_game_state',
        payload: { requesterId: myPlayerId.value }
      })
      
      connectionStatus.value = 'connected'
      console.log('Successfully migrated to new host')
      
      resetMigrationState()
    } catch (error) {
      console.error('Failed to finalize migration:', error)
      connectionStatus.value = 'disconnected'
      resetMigrationState()
    }
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏
  const validateMigrationProposal = (payload: MigrationProposalPayload): boolean => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π —Ö–æ—Å—Ç –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ –∏–≥—Ä–æ–∫–æ–≤
    const proposedPlayer = gameState.value.players.find(p => p.id === payload.proposedHostId)
    return !!(proposedPlayer && proposedPlayer.authToken === payload.proposedHostToken)
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –≥–æ–ª–æ—Å–∞
  const validateMigrationVote = (payload: MigrationVotePayload): boolean => {
    const voter = gameState.value.players.find(p => p.id === payload.voterId)
    return !!(voter && voter.authToken === payload.voterToken)
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
  const validateMigrationConfirmation = (payload: MigrationConfirmedPayload): boolean => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–≤—à–∏–µ –∏–≥—Ä–æ–∫–∏ –≤–∞–ª–∏–¥–Ω—ã
    return payload.confirmedBy.every(playerId => 
      gameState.value.players.some(p => p.id === playerId && validateAuthToken(p))
    )
  }

  // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏
  const resetMigrationState = () => {
    if (migrationState.value.timeout) {
      clearTimeout(migrationState.value.timeout)
    }
    
    migrationState.value.inProgress = false
    migrationState.value.phase = null
    migrationState.value.proposedHostId = null
    migrationState.value.votes.clear()
    migrationState.value.timeout = null
    
    console.log('Migration state reset')
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏–∏
  const handleMigrationTimeout = () => {
    console.log('Migration timeout occurred')
    resetMigrationState()
    connectionStatus.value = 'disconnected'
  }
  
  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ (backup mechanism)
  const forceMigrationComplete = async () => {
    console.log('üö® Force migration complete - emergency takeover')
    
    try {
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏
      resetMigrationState()
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å—Ç–∞–Ω–æ–≤–∏–º—Å—è —Ö–æ—Å—Ç–æ–º
      await becomeNewHost()
      
      console.log('üö® Emergency migration completed successfully')
    } catch (error) {
      console.error('üö® Emergency migration failed:', error)
      connectionStatus.value = 'disconnected'
    }
  }
  
  // –î–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–±–æ—Ä —Ö–æ—Å—Ç–∞ –±–µ–∑ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è (fallback)
  const electHostDeterministic = (validPlayers: Player[]): string => {
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –Ω–∏–∫–Ω–µ–π–º—É –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
    const sortedPlayers = validPlayers.sort((a, b) => a.nickname.localeCompare(b.nickname))
    
    if (sortedPlayers.length === 0) {
      throw new Error('No valid players for deterministic host election')
    }
    
    // –ü–µ—Ä–≤—ã–π –ø–æ –Ω–∏–∫–Ω–µ–π–º—É —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Ö–æ—Å—Ç–æ–º
    const deterministicHostId = sortedPlayers[0].id
    console.log('Deterministic host elected:', deterministicHostId, 'nickname:', sortedPlayers[0].nickname)
    
    return deterministicHostId
  }

  // –î–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –≤—ã–±–æ—Ä–æ–≤ –Ω–æ–≤–æ–≥–æ —Ö–æ—Å—Ç–∞
  const electNewHost = (): string => {
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏–≥—Ä–æ–∫–æ–≤ –ø–æ ID –¥–ª—è –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏
    const remainingPlayers = gameState.value.players
      .filter(p => p.id !== gameState.value.hostId)
      .sort((a, b) => a.id.localeCompare(b.id))
    
    if (remainingPlayers.length === 0) {
      throw new Error('No remaining players for host election')
    }
    
    // –ü–µ—Ä–≤—ã–π –≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Ö–æ—Å—Ç–æ–º
    const newHostId = remainingPlayers[0].id
    console.log('New host elected:', newHostId)
    
    return newHostId
  }
  
  // –°—Ç–∞–Ω–æ–≤–ª—é—Å—å –Ω–æ–≤—ã–º —Ö–æ—Å—Ç–æ–º
  const becomeNewHost = async () => {
    console.log('Becoming new host...')
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    isHost.value = true
    hostId.value = myPlayerId.value
    gameState.value.hostId = myPlayerId.value
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å –∏–≥—Ä–æ–∫–∞ –≤ —Å–ø–∏—Å–∫–µ
    const myPlayerIndex = gameState.value.players.findIndex(p => p.id === myPlayerId.value)
    if (myPlayerIndex !== -1) {
      gameState.value.players[myPlayerIndex].isHost = true
    }
    
    // –ö–†–ò–¢–ò–ß–ù–û: –ü–µ—Ä–µ–¥–∞–µ–º roomId –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ peer ID —Ö–æ—Å—Ç–∞
    const newPeerId = await peerService.createHost(roomId.value)
    myPlayerId.value = newPeerId
    gameState.value.hostId = newPeerId
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤–æ–π ID –≤ —Å–ø–∏—Å–∫–µ –∏–≥—Ä–æ–∫–æ–≤
    if (myPlayerIndex !== -1) {
      gameState.value.players[myPlayerIndex].id = newPeerId
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º heartbeat
    peerService.setAsHost(newPeerId)
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ö–æ—Å—Ç–∞
    setupHostMessageHandlers()
    
    console.log('Successfully became new host with ID:', newPeerId)
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –æ —Å–º–µ–Ω–µ —Ö–æ—Å—Ç–∞
    broadcastHostMigration(newPeerId)
  }
  
  // –°—Ç–∞–Ω–æ–≤–ª—é—Å—å –Ω–æ–≤—ã–º —Ö–æ—Å—Ç–æ–º —Å —É—á–µ—Ç–æ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ grace period
  const becomeNewHostWithRecovery = async (originalHostId: string) => {
    console.log('üèÅ Becoming new host with recovery context, original host was:', originalHostId)
    
    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      isHost.value = true
      hostId.value = myPlayerId.value
      gameState.value.hostId = myPlayerId.value
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å –∏–≥—Ä–æ–∫–∞ –≤ —Å–ø–∏—Å–∫–µ
      const myPlayerIndex = gameState.value.players.findIndex(p => p.id === myPlayerId.value)
      if (myPlayerIndex !== -1) {
        gameState.value.players[myPlayerIndex].isHost = true
      }
      
      // –ö–†–ò–¢–ò–ß–ù–û: –ü–µ—Ä–µ–¥–∞–µ–º roomId –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ peer ID —Ö–æ—Å—Ç–∞
      const newPeerId = await peerService.createHost(roomId.value)
      myPlayerId.value = newPeerId
      gameState.value.hostId = newPeerId
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤–æ–π ID –≤ —Å–ø–∏—Å–∫–µ –∏–≥—Ä–æ–∫–æ–≤
      if (myPlayerIndex !== -1) {
        gameState.value.players[myPlayerIndex].id = newPeerId
      }
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º heartbeat
      peerService.setAsHost(newPeerId)
      
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ö–æ—Å—Ç–∞
      setupHostMessageHandlers()
      
      console.log('üéâ Successfully became new host with recovery, new ID:', newPeerId)
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ö–æ—Å—Ç–∞
      const recoveryAnnouncement: HostRecoveryAnnouncementPayload = {
        originalHostId,
        recoveredHostId: newPeerId,
        roomId: gameState.value.roomId,
        gameState: gameState.value,
        recoveryTimestamp: Date.now(),
        meshTopology: peerService.getAllKnownPeers()
      }
      
      // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      setTimeout(() => {
        peerService.broadcastToAllPeers({
          type: 'host_recovery_announcement',
          payload: recoveryAnnouncement
        })
        
        console.log('üì¢ Sent host recovery announcement to all peers')
      }, MESH_RESTORATION_DELAY)
      
      // –¢–∞–∫–∂–µ —Ä–∞—Å—Å—ã–ª–∞–µ–º –æ–±—ã—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–º–µ–Ω–µ —Ö–æ—Å—Ç–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      broadcastHostMigration(newPeerId)
      
      connectionStatus.value = 'connected'
      
    } catch (error) {
      console.error('‚ùå Failed to become host with recovery:', error)
      connectionStatus.value = 'disconnected'
      throw error
    }
  }
  
  // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –Ω–æ–≤–æ–º—É —Ö–æ—Å—Ç—É
  const reconnectToNewHost = async (newHostId: string) => {
    console.log('Reconnecting to new host:', newHostId)
    
    connectionStatus.value = 'connecting'
    
    try {
      // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –Ω–æ–≤–æ–º—É —Ö–æ—Å—Ç—É
      await peerService.reconnectToNewHost(newHostId)
      
      hostId.value = newHostId
      gameState.value.hostId = newHostId
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–æ–ª—å –∫–ª–∏–µ–Ω—Ç–∞
      peerService.setAsClient()
      
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
      setupClientMessageHandlers()
      
      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
      peerService.sendMessage(newHostId, {
        type: 'request_game_state',
        payload: { requesterId: myPlayerId.value }
      })
      
      connectionStatus.value = 'connected'
      console.log('Successfully reconnected to new host')
    } catch (error) {
      console.error('Failed to reconnect to new host:', error)
      connectionStatus.value = 'disconnected'
      throw error
    }
  }
  
  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–º–µ–Ω–µ —Ö–æ—Å—Ç–∞
  const broadcastHostMigration = (newHostId: string) => {
    const migrationMessage: PeerMessage = {
      type: 'host_migration_started',
      payload: {
        newHostId,
        reason: 'host_disconnected'
      }
    }
    
    peerService.broadcastMessage(migrationMessage)
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏ –≤ localStorage
  const saveSession = () => {
    if (!myPlayerId.value || connectionStatus.value === 'disconnected') {
      return
    }
    
    const sessionData: SessionData = {
      gameState: gameState.value,
      myPlayerId: myPlayerId.value,
      myNickname: myNickname.value,
      isHost: isHost.value,
      hostId: hostId.value,
      roomId: roomId.value,
      timestamp: Date.now(),
      meshTopology: peerService.getAllKnownPeers(),
      lastHeartbeat: Date.now(),
      networkVersion: gameState.value.createdAt // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã –∫–∞–∫ –≤–µ—Ä—Å–∏—é —Å–µ—Ç–∏
    }
    
    localStorage.setItem(SESSION_STORAGE_KEY, JSON.stringify(sessionData))
    console.log('Extended session saved:', sessionData)
  }
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Å—Å–∏–∏ –∏–∑ localStorage
  const loadSession = (): SessionData | null => {
    try {
      const savedData = localStorage.getItem(SESSION_STORAGE_KEY)
      if (!savedData) return null
      
      const sessionData: SessionData = JSON.parse(savedData)
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ —Å–µ—Å—Å–∏—è
      const now = Date.now()
      if (now - sessionData.timestamp > SESSION_TIMEOUT) {
        console.log('Session expired, removing from storage')
        localStorage.removeItem(SESSION_STORAGE_KEY)
        return null
      }
      
      console.log('Session loaded:', sessionData)
      return sessionData
    } catch (error) {
      console.error('Failed to load session:', error)
      localStorage.removeItem(SESSION_STORAGE_KEY)
      return null
    }
  }
  
  // –£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
  const clearSession = () => {
    localStorage.removeItem(SESSION_STORAGE_KEY)
    console.log('Session cleared')
  }
  
  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏
  const restoreSession = async (): Promise<boolean> => {
    const sessionData = loadSession()
    if (!sessionData) return false
    
    try {
      console.log('Attempting to restore session...')
      restorationState.value = 'discovering'
      connectionStatus.value = 'connecting'
      
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      gameState.value = { ...sessionData.gameState }
      myPlayerId.value = sessionData.myPlayerId
      myNickname.value = sessionData.myNickname
      roomId.value = sessionData.roomId
      
      // –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê: –≤—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ–º —Å discovery
      console.log('Starting universal host discovery...')
      const currentHost = await universalHostDiscovery(sessionData)
      
      restorationState.value = 'restoring'
      
      if (currentHost) {
        console.log('Found active host, connecting as client:', currentHost.currentHostId)
        // –ù–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π —Ö–æ—Å—Ç - –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫–∞–∫ –∫–ª–∏–µ–Ω—Ç
        isHost.value = false
        hostId.value = currentHost.currentHostId
        await restoreAsClient(currentHost.currentHostId)
      } else {
        console.log('No active host found, becoming host...')
        // –ù–∏–∫–æ–≥–æ –Ω–µ—Ç - —Å—Ç–∞–Ω–æ–≤–∏–º—Å—è —Ö–æ—Å—Ç–æ–º (–ø–µ—Ä–≤—ã–π –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–≤—à–∏–π—Å—è)
        isHost.value = true
        await restoreAsHost()
      }
      
      restorationState.value = 'idle'
      connectionStatus.value = 'connected'
      console.log('Session successfully restored')
      return true
    } catch (error) {
      console.error('Failed to restore session:', error)
      restorationState.value = 'idle'
      connectionStatus.value = 'disconnected'
      clearSession()
      return false
    }
  }
  
  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–ø—Ä–æ—Å –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Ö–æ—Å—Ç–∞ (–±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è)
  const universalHostDiscovery = async (sessionData: SessionData): Promise<HostDiscoveryResponsePayload | null> => {
    console.log('Starting universal host discovery...')
    
    // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –∏–∑–≤–µ—Å—Ç–Ω–æ–º—É —Ö–æ—Å—Ç—É
    if (sessionData.hostId && sessionData.hostId !== sessionData.myPlayerId) {
      console.log('Strategy 1: Trying to connect to last known host:', sessionData.hostId)
      const lastKnownHost = await tryConnectToKnownHost(sessionData.hostId)
      if (lastKnownHost) {
        console.log('Last known host is still active:', sessionData.hostId)
        return lastKnownHost
      }
    }
    
    // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: –û–ø—Ä–æ—Å –≤—Å–µ—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
    const savedPlayers = sessionData.gameState.players.filter(p => !p.isHost && p.id !== sessionData.myPlayerId)
    if (savedPlayers.length > 0) {
      console.log('Strategy 2: Polling saved players:', savedPlayers.map(p => p.id))
      const discoveredFromPlayers = await quickHostDiscovery(savedPlayers)
      if (discoveredFromPlayers) {
        return discoveredFromPlayers
      }
    }
    
    console.log('Universal host discovery failed - no active host found')
    return null
  }

  // –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Ç–∏ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–æ–º–Ω–∞—Ç—ã
  const discoverActiveNetwork = async (sessionData: SessionData): Promise<HostDiscoveryResponsePayload | null> => {
    console.log('Discovering active network for room:', sessionData.roomId)
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –∞–ª–≥–æ—Ä–∏—Ç–º —á—Ç–æ –∏ –≤ universalHostDiscovery
    return await universalHostDiscovery(sessionData)
  }

  // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–∑–≤–µ—Å—Ç–Ω–æ–º—É —Ö–æ—Å—Ç—É
  const tryConnectToKnownHost = async (hostId: string): Promise<HostDiscoveryResponsePayload | null> => {
    return new Promise(async (resolve) => {
      try {
        console.log('Trying to connect to known host:', hostId)
        const tempPeer = new (await import('peerjs')).default()
        
        tempPeer.on('open', (tempId) => {
          const conn = tempPeer.connect(hostId)
          
          const timeout = setTimeout(() => {
            conn.close()
            tempPeer.destroy()
            resolve(null)
          }, 2000) // –ö–æ—Ä–æ—Ç–∫–∏–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
          
          conn.on('open', () => {
            console.log('Successfully connected to known host')
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º discovery –∑–∞–ø—Ä–æ—Å
            conn.send({
              type: 'host_discovery_request',
              payload: {
                requesterId: tempId,
                requesterToken: myPlayer.value?.authToken || '',
                timestamp: Date.now()
              }
            })
          })
          
          conn.on('data', (data: any) => {
            const message = data as PeerMessage
            if (message.type === 'host_discovery_response') {
              const response = message.payload as HostDiscoveryResponsePayload
              console.log('Received response from known host:', response)
              
              clearTimeout(timeout)
              conn.close()
              tempPeer.destroy()
              
              if (response.isHost) {
                resolve(response)
              } else {
                resolve(null)
              }
            }
          })
          
          conn.on('error', () => {
            clearTimeout(timeout)
            tempPeer.destroy()
            resolve(null)
          })
        })
        
        tempPeer.on('error', () => {
          resolve(null)
        })
        
      } catch (error) {
        console.log('Failed to connect to known host:', error)
        resolve(null)
      }
    })
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ host discovery –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º
  const setupHostDiscoveryHandlers = () => {
    peerService.onMessage('host_discovery_request', (message, conn) => {
      if (!conn) return
      
      const request = message.payload as HostDiscoveryRequestPayload
      console.log('Received host discovery request:', request)
      
      const response: HostDiscoveryResponsePayload = {
        responderId: myPlayerId.value,
        responderToken: myPlayer.value?.authToken || '',
        isHost: isHost.value,
        currentHostId: gameState.value.hostId,
        gameState: gameState.value,
        timestamp: Date.now()
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
      conn.send({
        type: 'host_discovery_response',
        payload: response
      })
      
      console.log('Sent host discovery response:', response)
    })
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ mesh-–ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –¥–ª—è P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –º–µ–∂–¥—É –≤—Å–µ–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏
  const setupMeshProtocolHandlers = () => {
    console.log('Setting up mesh protocol handlers')
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å–ø–∏—Å–∫–∞ peer'–æ–≤
    peerService.onMessage('request_peer_list', (message, conn) => {
      if (!conn) return
      
      const request = message.payload as PeerListRequestPayload
      console.log('Received peer list request:', request)
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –∑–∞–ø—Ä–æ—Å–∏–≤—à–µ–º—É
      const peerListUpdate: PeerListUpdatePayload = {
        peers: gameState.value.players,
        fromPlayerId: myPlayerId.value,
        timestamp: Date.now()
      }
      
      conn.send({
        type: 'peer_list_update',
        payload: peerListUpdate
      })
      
      console.log('Sent peer list to:', request.requesterId, 'players:', gameState.value.players.length)
    })
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ peer'–æ–≤
    peerService.onMessage('peer_list_update', async (message) => {
      const update = message.payload as PeerListUpdatePayload
      console.log('üîó Received peer list update:', update)
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ—Ö peer'–æ–≤ –≤ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ
      const peerIds = update.peers.map(p => p.id)
      console.log('üìã All peer IDs from update:', peerIds)
      console.log('üîç My player ID:', myPlayerId.value)
      console.log('üì§ From player ID:', update.fromPlayerId)
      
      peerService.addKnownPeers(peerIds)
      
      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫–æ –í–°–ï–ú –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–∞–º (–∏—Å—Ç–∏–Ω–Ω–∞—è mesh-—Ç–æ–ø–æ–ª–æ–≥–∏—è)
      const peersToConnect = peerIds.filter(id => 
        id !== myPlayerId.value  // –ò—Å–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–µ–±—è, –ù–ï –∏—Å–∫–ª—é—á–∞–µ–º —Ö–æ—Å—Ç–∞!
      )
      
      console.log('üîå Peers to connect to:', peersToConnect)
      console.log('üìä Current active connections before mesh:', peerService.getActiveConnections())
      
      if (peersToConnect.length > 0) {
        console.log('üöÄ Attempting mesh connections to:', peersToConnect)
        await peerService.connectToAllPeers(peersToConnect)
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        console.log('‚úÖ Active connections after mesh attempt:', peerService.getActiveConnections())
      } else {
        console.log('‚ùå No peers to connect to for mesh network')
      }
    })
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä—è–º–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    peerService.onMessage('direct_connection_request', (message, conn) => {
      if (!conn) return
      
      const request = message.payload as DirectConnectionRequestPayload
      console.log('Received direct connection request:', request)
      
      // –î–æ–±–∞–≤–ª—è–µ–º peer'–∞ –≤ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ
      peerService.addKnownPeer(request.requesterId)
      
      // –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ conn, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
      console.log('Direct connection established with:', request.requesterId)
    })
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    peerService.onMessage('state_sync', (message) => {
      const sync = message.payload as StateSyncPayload
      console.log('Received state sync:', sync)
      
      // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –±–æ–ª–µ–µ —Å–≤–µ–∂–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã - –æ–±–Ω–æ–≤–ª—è–µ–º
      if (sync.timestamp > gameState.value.createdAt) {
        console.log('Updating to newer game state from:', sync.fromPlayerId)
        gameState.value = { ...sync.gameState }
      }
    })
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–æ–≤ –Ω–æ–≤–æ–≥–æ —Ö–æ—Å—Ç–∞
    peerService.onMessage('new_host_election', (message) => {
      const election = message.payload as NewHostElectionPayload
      console.log('Received host election:', election)
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
      const candidate = gameState.value.players.find(p => p.id === election.candidateId)
      if (candidate && candidate.authToken === election.candidateToken) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ö–æ—Å—Ç–∞ –µ—Å–ª–∏ –∫–æ–Ω—Å–µ–Ω—Å—É—Å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç
        const totalPlayers = gameState.value.players.length
        const supportingPlayers = election.electorsConsensus.length
        
        if (supportingPlayers >= Math.ceil(totalPlayers / 2)) {
          console.log('Host election successful, new host:', election.candidateId)
          
          gameState.value.hostId = election.candidateId
          hostId.value = election.candidateId
          
          // –ï—Å–ª–∏ —è –Ω–µ –Ω–æ–≤—ã–π —Ö–æ—Å—Ç - —Å—Ç–∞–Ω–æ–≤–ª—é—Å—å –∫–ª–∏–µ–Ω—Ç–æ–º
          if (election.candidateId !== myPlayerId.value) {
            isHost.value = false
          }
        }
      }
    })
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ö–æ—Å—Ç–∞
    peerService.onMessage('host_recovery_announcement', (message) => {
      const announcement = message.payload as HostRecoveryAnnouncementPayload
      console.log('üéä Received host recovery announcement:', announcement)
      
      // –û—Ç–º–µ–Ω—è–µ–º –ª—é–±—ã–µ –∏–¥—É—â–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –º–∏–≥—Ä–∞—Ü–∏–∏
      if (migrationState.value.inProgress) {
        console.log('üõë Cancelling migration due to host recovery')
        resetMigrationState()
      }
      
      // –û—Ç–º–µ–Ω—è–µ–º grace period –µ—Å–ª–∏ –æ–Ω –∞–∫—Ç–∏–≤–µ–Ω
      if (peerService.isInHostRecoveryGracePeriod()) {
        console.log('üõë Cancelling grace period due to host recovery')
        peerService.cancelHostRecoveryGracePeriod()
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Ö–æ—Å—Ç–∞
      gameState.value = { ...announcement.gameState }
      hostId.value = announcement.recoveredHostId
      
      // –ï—Å–ª–∏ —è –Ω–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ö–æ—Å—Ç - —Å—Ç–∞–Ω–æ–≤–ª—é—Å—å –∫–ª–∏–µ–Ω—Ç–æ–º
      if (announcement.recoveredHostId !== myPlayerId.value) {
        isHost.value = false
        
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–º—É —Ö–æ—Å—Ç—É
        setTimeout(async () => {
          try {
            console.log('üîÑ Reconnecting to recovered host:', announcement.recoveredHostId)
            await reconnectToNewHost(announcement.recoveredHostId)
            console.log('‚úÖ Successfully reconnected to recovered host')
          } catch (error) {
            console.error('‚ùå Failed to reconnect to recovered host:', error)
          }
        }, MESH_RESTORATION_DELAY)
      }
      
      connectionStatus.value = 'connected'
      console.log('üéâ Host recovery announcement processed successfully')
    })
  }

  // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ö–æ—Å—Ç–∞
  const restoreAsHost = async () => {
    console.log('Restoring as host...')
    
    // –ö–†–ò–¢–ò–ß–ù–û: –ü–µ—Ä–µ–¥–∞–µ–º roomId –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ peer ID
    const newPeerId = await peerService.createHost(roomId.value)
    
    // –û–±–Ω–æ–≤–ª—è–µ–º ID —Ö–æ—Å—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    const oldHostId = myPlayerId.value
    myPlayerId.value = newPeerId
    hostId.value = newPeerId
    gameState.value.hostId = newPeerId
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤–æ–π ID –≤ —Å–ø–∏—Å–∫–µ –∏–≥—Ä–æ–∫–æ–≤
    const myPlayerIndex = gameState.value.players.findIndex(p => p.id === oldHostId)
    if (myPlayerIndex !== -1) {
      gameState.value.players[myPlayerIndex].id = newPeerId
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–æ–ª—å —Ö–æ—Å—Ç–∞ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º heartbeat
    peerService.setAsHost(newPeerId)
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    setupHostMessageHandlers()
    
    console.log('Host restored with ID (may be same as before):', newPeerId)
  }
  
  // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
  const restoreAsClient = async (targetHostId: string) => {
    console.log('Restoring as client, connecting to:', targetHostId)
    
    try {
      // –û—á–∏—â–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–¥—Å–≤–µ—Ç–∫–µ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏
      gameState.value.litUpPlayerId = null
      console.log('Cleared stale litUpPlayerId on session restore')
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π ID –ü–ï–†–ï–î –µ–≥–æ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å—é
      const originalPlayerId = myPlayerId.value
      console.log('Saved original player ID for reconnection:', originalPlayerId)
      
      // –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Ö–æ—Å—Ç—É
      await peerService.connectToHost(targetHostId)
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤–æ–π ID –Ω–∞ –Ω–æ–≤—ã–π PeerJS ID
      myPlayerId.value = peerService.getMyId() || ''
      console.log('Updated to new peer ID:', myPlayerId.value)
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–æ–ª—å –∫–ª–∏–µ–Ω—Ç–∞
      peerService.setAsClient()
      
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
      setupClientMessageHandlers()
      
      // –ö–†–ò–¢–ò–ß–ù–û: –î–æ–±–∞–≤–ª—è–µ–º mesh-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏
      setupMeshProtocolHandlers()
      
      // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      await new Promise(resolve => setTimeout(resolve, 500))
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å—Ç–∞—Ä—ã–º ID –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
      peerService.sendMessage(targetHostId, {
        type: 'join_request',
        payload: { 
          nickname: myNickname.value,
          savedPlayerId: originalPlayerId // –ò—Å–ø–æ–ª—å–∑—É–µ–º –°–¢–ê–†–´–ô ID –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
        }
      })
      
      // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      await new Promise(resolve => setTimeout(resolve, 300))
      
      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
      peerService.sendMessage(targetHostId, {
        type: 'request_game_state',
        payload: { requesterId: myPlayerId.value }
      })
      
      // –ñ–¥–µ–º –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
      await waitForGameStateUpdate()
      
      console.log('Client restored and reconnected with updated state')
    } catch (error) {
      console.error('Failed to restore as client:', error)
      // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å—Ç–∞—Ä–æ–º—É —Ö–æ—Å—Ç—É, –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –Ω–æ–≤–æ–≥–æ
      await handleHostDisconnection()
    }
  }

  // –û–∂–∏–¥–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
  const waitForGameStateUpdate = (): Promise<void> => {
    return new Promise((resolve) => {
      let attempts = 0
      const maxAttempts = 10
      
      const checkForUpdate = () => {
        attempts++
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–æ–≤
        const hasValidPlayers = gameState.value.players.length > 0 && 
                               gameState.value.players.some(p => p.nickname && p.nickname !== '')
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å litUpPlayerId - –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω, —Ç–æ –∏–≥—Ä–æ–∫ –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
        const litUpPlayerValid = !gameState.value.litUpPlayerId || 
                                gameState.value.players.some(p => p.id === gameState.value.litUpPlayerId)
        
        if ((hasValidPlayers && litUpPlayerValid) || attempts >= maxAttempts) {
          // –û—á–∏—â–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π litUpPlayerId –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω
          if (gameState.value.litUpPlayerId && !litUpPlayerValid) {
            console.log('Clearing invalid litUpPlayerId:', gameState.value.litUpPlayerId)
            gameState.value.litUpPlayerId = null
          }
          
          console.log('Game state synchronized, players:', gameState.value.players.length, 
                     'litUpPlayerId:', gameState.value.litUpPlayerId)
          resolve()
        } else {
          // –ü—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –∫–æ—Ä–æ—Ç–∫–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
          setTimeout(checkForUpdate, 200)
        }
      }
      
      // –ù–∞—á–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
      setTimeout(checkForUpdate, 300)
    })
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏
  const hasActiveSession = (): boolean => {
    const sessionData = loadSession()
    return sessionData !== null
  }

  // –ü–æ–∫–∏–Ω—É—Ç—å –∫–æ–º–Ω–∞—Ç—É
  const leaveRoom = () => {
    // –ö–†–ò–¢–ò–ß–ù–û: –û—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π peer ID —Ö–æ—Å—Ç–∞ –ø—Ä–∏ –ø–æ–∫–∏–¥–∞–Ω–∏–∏ –∫–æ–º–Ω–∞—Ç—ã
    if (roomId.value && isHost.value) {
      console.log('üóëÔ∏è Clearing saved host peer ID for room:', roomId.value)
      peerService.clearSavedHostId(roomId.value)
    }
    
    peerService.disconnect()
    clearSession()
    
    // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    gameState.value = {
      roomId: '',
      gameStarted: false,
      players: [],
      litUpPlayerId: null,
      maxPlayers: 8,
      hostId: '',
      createdAt: 0
    }
    
    myPlayerId.value = ''
    myNickname.value = ''
    isHost.value = false
    hostId.value = ''
    roomId.value = ''
    connectionStatus.value = 'disconnected'
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∏–∫–Ω–µ–π–º–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  if (!myNickname.value) {
    myNickname.value = generateDefaultNickname()
  }

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
  watch(
    [gameState, myPlayerId, myNickname, isHost, hostId, roomId, connectionStatus],
    () => {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã
      if (connectionStatus.value === 'connected' && myPlayerId.value) {
        saveSession()
      }
    },
    { deep: true }
  )

  return {
    // State
    gameState,
    myPlayerId,
    myNickname,
    isHost,
    hostId,
    roomId,
    connectionStatus,
    
    // Computed
    canStartGame,
    myPlayer,
    canJoinRoom,
    
    // Actions
    createRoom,
    joinRoom,
    startGame,
    lightUpPlayer,
    leaveRoom,
    broadcastGameState,
    
    // Session Management
    saveSession,
    restoreSession,
    hasActiveSession,
    clearSession
  }
})
