import { ref, computed, watch } from 'vue'
import { defineStore } from 'pinia'
import { Mutex } from 'async-mutex'
import { storageSafe } from '@/utils/storageSafe'
import { isDebugEnabled } from '@/utils/debug'
import router from '@/router'
import { GAME_CONFIG, PLAYER_COLORS, NICKNAME_PREFIX, ROOM_ID_WORDS, DEFAULT_CARDS } from '@/config/gameConfig'
// –ò–º–ø–æ—Ä—Ç —É–¥–∞–ª–µ–Ω - –±–æ–ª—å—à–µ –Ω–µ—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ —Ö–æ—Å—Ç–∞
import type {
  Player,
  GameState,
  PeerMessage,
  HostDiscoveryRequestPayload,
  HostDiscoveryResponsePayload,
  ExtendedSessionData,
  HostRecoveryAnnouncementPayload,
} from '@/types/game'
import { makeMessage } from '@/types/game'
import type { MessageMeta } from '@/types/game'
import { peerService } from '@/services/peerSelector'



/**
 * –ü–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
 * - Pinia persist: –∞—Ç–æ–º–∞—Ä–Ω—ã–µ –ø–æ–ª—è (—Å–º. persist.paths –Ω–∏–∂–µ)
 * - storageSafe (namespace 'game'): TTL-—Å–Ω–∞–ø—à–æ—Ç hostGameStateSnapshot, —Å—Ç–∞–±–∏–ª—å–Ω—ã–π roomId
 */
const HOST_SNAPSHOT_TTL = 15 * 60 * 1000 // 15 –º–∏–Ω—É—Ç

// ---------- Request guards & standardized errors ----------
type RequestKey = 'createRoom' | 'joinRoom' | 'restoreSession'
type RequestStatus = 'idle' | 'pending' | 'success' | 'error'
type RequestMap = Record<
  RequestKey,
  {
    status: RequestStatus
    requestId: number
    error: StandardError | null
  }
>

interface StandardError {
  code?: string
  message: string
  details?: unknown
  at: number
}

// –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –¥–æ–±—Ä–æ–≤–æ–ª—å–Ω–æ–º –≤—ã—Ö–æ–¥–µ
let isVoluntaryLeaving = false

// last-write-wins —Å—á–µ—Ç—á–∏–∫
const requestSeq = ref(0)
const requests = ref<RequestMap>({
  createRoom: { status: 'idle', requestId: 0, error: null },
  joinRoom: { status: 'idle', requestId: 0, error: null },
  restoreSession: { status: 'idle', requestId: 0, error: null },
})

function normalizeError(e: unknown, code?: string): StandardError {
  if (e && typeof e === 'object' && 'message' in e) {
    return {
      code,
      message: String((e as any).message ?? 'Unknown error'),
      details: e,
      at: Date.now(),
    }
  }
  return {
    code,
    message: typeof e === 'string' ? e : 'Unknown error',
    details: e,
    at: Date.now(),
  }
}

function startRequest(key: RequestKey): number {
  const id = ++requestSeq.value
  const entry = requests.value[key]
  entry.status = 'pending'
  entry.requestId = id
  entry.error = null
  return id
}

function endRequestSuccess(key: RequestKey, id: number) {
  const entry = requests.value[key]
  if (entry.requestId !== id) return // —É—Å—Ç–∞—Ä–µ–≤—à–∏–π
  entry.status = 'success'
}

function endRequestError(key: RequestKey, id: number, err: StandardError) {
  const entry = requests.value[key]
  if (entry.requestId !== id) return // —É—Å—Ç–∞—Ä–µ–≤—à–∏–π
  entry.status = 'error'
  entry.error = err
}

// –£–¥–æ–±–Ω—ã–µ computed –¥–ª—è UI
const isLoadingCreateRoom = computed(() => requests.value.createRoom.status === 'pending')
const isLoadingJoinRoom = computed(() => requests.value.joinRoom.status === 'pending')
const isLoadingRestore = computed(() => requests.value.restoreSession.status === 'pending')
const lastErrorCreateRoom = computed(() => requests.value.createRoom.error)
const lastErrorJoinRoom = computed(() => requests.value.joinRoom.error)
const lastErrorRestore = computed(() => requests.value.restoreSession.error)

interface SessionData extends ExtendedSessionData {
  // –ù–∞—Å–ª–µ–¥—É–µ–º –≤—Å–µ –ø–æ–ª—è –æ—Ç ExtendedSessionData –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
}

export const useGameStore = defineStore('game', () => {
  // Debug flag: –≤–∫–ª—é—á–∞–µ—Ç—Å—è, –µ—Å–ª–∏ –≤ localStorage –µ—Å—Ç—å "__app_debug"
  const isDebug = computed<boolean>(() => isDebugEnabled())
  // ---------- StorageSafe wrappers ----------
  // –û—á–∏—Å—Ç–∫–∞ namespace 'game'
  const removeGameItemsByPrefix = () => {
    try {
      storageSafe.clearNamespace('game')
    } catch {}
  }
  // –ù–∏–∫–Ω–µ–π–º —Ö—Ä–∞–Ω–∏—Ç—Å—è –ë–ï–ó –ø—Ä–µ—Ñ–∏–∫—Å–∞ –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é ‚Äî –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ö–µ–ª–ø–µ—Ä—ã –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è.
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∏–∫ –Ω–∞–ø—Ä—è–º—É—é –≤ non-prefixed –∫–ª—é—á (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏).
  const NICK_STORAGE_KEY = 'nickname'
  const setNickname = (nick: string) => {
    try {
      localStorage.setItem(NICK_STORAGE_KEY, nick)
    } catch {}
  }
  const getNickname = (): string | null => {
    try {
      return localStorage.getItem(NICK_STORAGE_KEY)
    } catch {
      return null
    }
  }
  const clearNickname = () => {
    try {
      localStorage.removeItem(NICK_STORAGE_KEY)
    } catch {}
  }

  // Game mechanics for "–ü—Ä–æ–≤–æ–∫–∞—Ç–æ—Ä"
  // –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≥–æ–ª–æ—Å–æ–≤: { [voterId]: [targetId, targetId] }
  // –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å—Ç–∞–≤–æ–∫: { [playerId]: '0' | '¬±' | '+' }
  // –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—á–∫–æ–≤: { [playerId]: number }

  // –†–µ–∂–∏–º –∏–≥—Ä—ã: 'basic' ‚Äî –æ–±—ã—á–Ω—ã–π, 'advanced' ‚Äî 2.0 (—Å –ø–∏—Å—å–º–µ–Ω–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏)
  // gameMode —Ö—Ä–∞–Ω–∏—Ç —Ç–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç—Å—è –≤ gameState –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤.
  const gameMode = ref<'basic' | 'advanced'>('basic')
  const gamePhase = ref<
    | 'lobby'
    | 'drawing_question'
    | 'voting'
    | 'secret_voting'
    | 'betting'
    | 'results'
    | 'answering'
    | 'guessing'
    | 'selecting_winners'
    | 'advanced_results'
    | 'game_over'
  >('lobby')

  // –ß–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—É–Ω–¥–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞, –Ω–µ—á–µ—Ç–Ω—ã–µ ‚Äî basic, —á–µ—Ç–Ω—ã–µ ‚Äî advanced
  const TOTAL_ROUNDS = GAME_CONFIG.TOTAL_ROUNDS
  const currentRound = ref<number>(1)
  const currentMode = computed<'basic' | 'advanced'>(() =>
    currentRound.value % 2 === 1 ? 'basic' : 'advanced',
  )
  // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Ä–∞—É–Ω–¥–æ–≤: –±–µ–∑ +1, –∏–Ω–∞—á–µ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Ä–∞—É–Ω–¥–µ –æ—Å—Ç–∞–µ—Ç—Å—è "1" –∏ –ª–æ–≥–∏–∫–∞ –∫–æ–Ω—Ü–∞ –∏–≥—Ä—ã –Ω–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç
  const roundsLeft = computed<number>(() => Math.max(0, TOTAL_ROUNDS - currentRound.value))

  // –°–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥: –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–æ 16 –∏ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∂–∏–º
  const advanceRound = () => {
    const oldRound = currentRound.value
    const oldMode = gameMode.value
    
    // –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç –Ω–æ–º–µ—Ä–∞ —Ä–∞—É–Ω–¥–∞ –≤—Å–µ–≥–¥–∞, –∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∫–æ–Ω—Ü–∞ –∏–≥—Ä—ã –¥–µ–ª–∞–µ–º –Ω–∏–∂–µ –≤ –ø–µ—Ä–µ—Ö–æ–¥–µ —Ñ–∞–∑
    currentRound.value += 1

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∂–∏–º —Å–æ–≥–ª–∞—Å–Ω–æ —á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏—é –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –≤ state
    gameMode.value = currentMode.value
    gameState.value.gameMode = currentMode.value
    
    console.log(`üîÑ ROUND ADVANCE: ${oldRound} (${oldMode}) ‚Üí ${currentRound.value} (${gameMode.value})`)
  }

  // –î–≤–µ –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–µ –∫–æ–ª–æ–¥—ã –∏–Ω–¥–µ–∫—Å–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ –∏–≥—Ä—É (–ø–µ—Ä–µ—Ç–∞—Å–æ–≤—ã–≤–∞—é—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ)
  const basicDeck = ref<number[]>([])
  const advancedDeck = ref<number[]>([])

  // –ò–Ω–¥–µ–∫—Å—ã –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –≤ initializeGame –∏–∑ '@/data/questions.ts'

  const initializeGame = async (mode: 'basic' | 'advanced' = 'basic') => {
    gamePhase.value = 'lobby'
    gameMode.value = mode
    gameState.value.gameMode = mode
    gameState.value.phase = 'lobby'

    try {
      const mod = await import('@/data/questions')
      const questionsBasic = Array.isArray(mod?.default?.questionsBasic)
        ? mod.default.questionsBasic
        : []
      const questionsAdvanced = Array.isArray(mod?.default?.questionsAdvanced)
        ? mod.default.questionsAdvanced
        : []

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –∏–Ω–¥–µ–∫—Å–æ–≤ –∏ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º
      const fyShuffle = (arr: number[]) => {
        for (let i = arr.length - 1; i > 0; i--) {
          const j = Math.floor(Math.random() * (i + 1))
          ;[arr[i], arr[j]] = [arr[j], arr[i]]
        }
        return arr
      }

      basicDeck.value = fyShuffle([...Array(questionsBasic.length).keys()])
      advancedDeck.value = fyShuffle([...Array(questionsAdvanced.length).keys()])

      // –í state —Ö—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ –∏–Ω–¥–µ–∫—Å—ã –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–ª–æ–¥—ã
      gameState.value.questionIndices =
        currentMode.value === 'basic' ? basicDeck.value.slice() : advancedDeck.value.slice()
    } catch {
      basicDeck.value = []
      advancedDeck.value = []
      gameState.value.questionIndices = []
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç –∏ –æ—á–∫–æ–≤
    gameState.value.scores = {}
    gameState.value.players.forEach((player) => {
      player.votingCards = [...DEFAULT_CARDS.voting]
      player.bettingCards = [...DEFAULT_CARDS.betting]
      gameState.value.scores[player.id] = 0
    })

    // –°—Ç–∞—Ä—Ç–æ–≤—ã–π —Ö–æ–¥
    gameState.value.currentTurn = 0
    gameState.value.currentTurnPlayerId = gameState.value.players[0]?.id || null

    // –°–±—Ä–æ—Å –ø–æ–ª–µ–π —Ä–∞—É–Ω–¥–∞
    gameState.value.currentQuestion = null
    gameState.value.votes = {}
    gameState.value.voteCounts = {}
    gameState.value.bets = {}
    gameState.value.roundScores = {}

    // –î–ª—è —Ä–µ–∂–∏–º–∞ 2.0
    if (mode === 'advanced') {
      gameState.value.answers = {}
      gameState.value.guesses = {}
      gameState.value.answeringPlayerId = null
      gameState.value.advancedAnswer = null
    }

    // –°—Ç–∞—Ä—Ç—É–µ–º —Å—Ç—Ä–æ–≥–æ —Å –ø–µ—Ä–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –ø–æ —á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏—é
    currentRound.value = 1
    gameMode.value = currentMode.value
    gameState.value.gameMode = currentMode.value

    // –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Ñ–∞–∑—É –≤—ã—Ç—è–≥–∏–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º snapshot –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–ª–æ–¥—ã
    gamePhase.value = 'drawing_question'
    gameState.value.phase = 'drawing_question'
    {
      const activeDeckRef = currentMode.value === 'basic' ? basicDeck : advancedDeck
      gameState.value.questionIndices = activeDeckRef.value.slice()
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤ –∏ —Å—Ç–∞–≤–æ–∫ –ø–æ—Å–ª–µ —Ä–∞—É–Ω–¥–∞
  // –ü–æ–¥—Å—á—ë—Ç –æ—á–∫–æ–≤ –±–∞–∑–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
  const processRound = () => {
    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
    const votesObj = gameState.value.votes ?? {}
    const betsObj = gameState.value.bets ?? {}

    // –ü–æ–¥—Å—á—ë—Ç –≥–æ–ª–æ—Å–æ–≤ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    const voteCounts: Record<string, number> = {}
    Object.values(votesObj).forEach((voteArr: string[]) => {
      voteArr.forEach((targetId) => {
        if (!voteCounts[targetId]) voteCounts[targetId] = 0
        voteCounts[targetId]++
      })
    })
    gameState.value.voteCounts = voteCounts

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–∫—Å–∏–º—É–º –≥–æ–ª–æ—Å–æ–≤
    const maxVotes = Math.max(0, ...Object.values(voteCounts))
    const leaders = Object.entries(voteCounts)
      .filter(([_, count]) => count === maxVotes && maxVotes > 0)
      .map(([playerId]) => playerId)

    // –ù–∞—á–∏—Å–ª—è–µ–º –æ—á–∫–∏ –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º
    const roundScores: Record<string, number> = {}
    gameState.value.players.forEach((player) => {
      const pid = player.id
      const bet = betsObj[pid]
      const votes = voteCounts[pid] || 0
      let add = 0

      if (leaders.includes(pid) && bet === '+') {
        add = votes
      } else if (votes === 0 && bet === '0') {
        add = 1
      } else if (bet === '¬±' && votes > 0 && !leaders.includes(pid)) {
        add = 1
      }
      gameState.value.scores[pid] = (gameState.value.scores[pid] || 0) + add
      roundScores[pid] = add
    })
    gameState.value.roundScores = roundScores

    // –í–ê–ñ–ù–û: –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–∞ –∏ —Å—Ç–∞–≤–∫–∏ –∑–¥–µ—Å—å.
    // –û–Ω–∏ –Ω—É–∂–Ω—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ñ–∞–∑–µ 'results'.
    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –≤ finishRound –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ä–∞—É–Ω–¥—É.
  }

  // mode: 'basic' | 'advanced'
  const startGame = (mode: 'basic' | 'advanced' = 'basic') => {
    if (!isHost.value) return

    // –°—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –∏–∑ –ª–æ–±–±–∏
    const isLobby = (gameState.value.phase ?? 'lobby') === 'lobby'
    if (!isLobby) return

    // –ú–∏–Ω–∏–º—É–º –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞, —á—Ç–æ–±—ã –Ω–µ –∑–∞–ª–∏–ø–∞—Ç—å –≤ –æ–∂–∏–¥–∞–Ω–∏–∏
    if (gameState.value.players.length < GAME_CONFIG.MIN_PLAYERS) return

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–≥—Ä—É –∏ —è–≤–Ω–æ –¥—É–±–ª–∏—Ä—É–µ–º –≤—Å—ë –≤ gameState –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
    // –ü–∞—Ä–∞–º–µ—Ç—Ä mode –±–æ–ª—å—à–µ –ù–ï —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç —Ä–µ–∂–∏–º ‚Äî —Ä–µ–∂–∏–º —Å—Ç—Ä–æ–≥–æ –∑–∞–¥–∞–µ—Ç—Å—è —á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ–º –ø–æ currentRound.
    // –í–∞–∂–Ω–æ: initializeGame –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è ‚Äî –Ω–æ –Ω–∞–º –Ω–µ –Ω—É–∂–µ–Ω await, –Ω–∞–º –Ω—É–∂–Ω–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–∑ –Ω–∏–∂–µ.
    void initializeGame(mode)

    // –ü–æ–º–µ—á–∞–µ–º –∏–≥—Ä—É –∫–∞–∫ –Ω–∞—á–∞—Ç—É—é
    gameState.value.gameStarted = true

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Ä–µ–∂–∏–º —Å—Ç—Ä–æ–≥–æ –∏–∑ currentMode (–∏—Å—Ç–æ—á–Ω–∏–∫ –ø—Ä–∞–≤–¥—ã ‚Äî –Ω–æ–º–µ—Ä —Ä–∞—É–Ω–¥–∞)
    gameMode.value = currentMode.value
    gameState.value.gameMode = currentMode.value

    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ —Ñ–∞–∑—É –≤—ã—Ç—è–≥–∏–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ —Å—Ä–∞–∑—É, —á—Ç–æ–±—ã –∫–ª–∏–µ–Ω—Ç—ã –Ω–µ –æ—Å—Ç–∞–≤–∞–ª–∏—Å—å –≤ 'lobby'
    gamePhase.value = 'drawing_question'
    gameState.value.phase = 'drawing_question'

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π —Ö–æ–¥ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π (–µ—Å–ª–∏ initializeGame –µ—â—ë –Ω–µ —É—Å–ø–µ–ª–∞)
    if (!gameState.value.currentTurnPlayerId) {
      gameState.value.currentTurn = 0
      gameState.value.currentTurnPlayerId = gameState.value.players[0]?.id || null
    }

    // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ —à–ª–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
    broadcastGameState()
  }

  // –í–ê–ñ–ù–û: drawCard –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Ö–æ—Å—Ç–∞ (–ª–æ–∫–∞–ª—å–Ω–æ —É —Ö–æ—Å—Ç–∞), –Ω–æ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å—Å—è –º–æ–∂–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–º —á–µ—Ä–µ–∑ draw_question_request.
  // –ù–µ –ø–æ–ª–∞–≥–∞–µ–º—Å—è –Ω–∞ myPlayerId –Ω–∞ —Ö–æ—Å—Ç–µ, –∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º requesterId, –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ–¥–∞—ë–º –∏–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è.
  // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è/—Å—Ç–∞–≤–æ–∫/–∞–≥–≥—Ä–µ–≥–∞—Ç–æ–≤ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –Ω–æ–≤–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
  const resetVotingState = () => {
    // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è, —á—Ç–æ–±—ã —Å—Ç–∞—Ä—ã–µ –≤—ã–±–æ—Ä—ã –Ω–µ —É—á–∏—Ç—ã–≤–∞–ª–∏—Å—å
    gameState.value.votes = {}
    gameState.value.voteCounts = {}
    gameState.value.bets = {}
    // –í advanced —Ä–µ–∂–∏–º–µ —Ç–∞–∫–∂–µ —á–∏—Å—Ç–∏–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –≤—ã–±–æ—Ä—ã/–ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞
    if (gameMode.value === 'advanced') {
      gameState.value.guesses = {}
      ;(gameState.value as any).roundWinners = []
      gameState.value.answeringPlayerId = null
      gameState.value.advancedAnswer = null
    }
  }

  const drawCard = async (requesterId?: string | null) => {
    logAction('drawCard_request', { requesterId })
    if (gamePhase.value !== 'drawing_question') return null

    const currentTurnPid = gameState.value.currentTurnPlayerId
    if (!currentTurnPid) return null

    if (requesterId && requesterId !== currentTurnPid) return null

    const activeDeckRef = currentMode.value === 'basic' ? basicDeck : advancedDeck

    // –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –∫–æ–ª–æ–¥–∞ –ø—É—Å—Ç–∞ ‚Äî –ø–µ—Ä–µ—Ç–∞—Å–æ–≤—ã–≤–∞–µ–º –∑–∞–Ω–æ–≤–æ
    if (activeDeckRef.value.length === 0) {
      try {
        const mod = await import('@/data/questions')
        const source =
          currentMode.value === 'basic'
            ? Array.isArray(mod?.default?.questionsBasic)
              ? mod.default.questionsBasic
              : []
            : Array.isArray(mod?.default?.questionsAdvanced)
              ? mod.default.questionsAdvanced
              : []

        activeDeckRef.value = [...Array(source.length).keys()]
        // –ü–µ—Ä–µ–º–µ—à–∞—Ç—å
        for (let i = activeDeckRef.value.length - 1; i > 0; i--) {
          const j = Math.floor(Math.random() * (i + 1))
          ;[activeDeckRef.value[i], activeDeckRef.value[j]] = [
            activeDeckRef.value[j],
            activeDeckRef.value[i],
          ]
        }
      } catch {
        activeDeckRef.value = []
      }
    }

    if (activeDeckRef.value.length === 0) return null

    // –í—ã—Ç—è–≥–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∫–æ–ª–æ–¥—ã
    const cardIndex = activeDeckRef.value.shift()
    const card = typeof cardIndex === 'number' ? cardIndex : null

    // –û–±–Ω–æ–≤–ª—è–µ–º snapshot –¥–ª—è UI
    gameState.value.questionIndices = activeDeckRef.value.slice()
    gameState.value.currentQuestion = card

    gameState.value.phase = 'drawing_question'
    gamePhase.value = 'drawing_question'
    broadcastGameState()

    resetVotingState()

    resetVotingState()
    gameMode.value = currentMode.value
    gameState.value.gameMode = currentMode.value
    const nextPhase = gameMode.value === 'basic' ? 'voting' : 'secret_voting'
    gamePhase.value = nextPhase
    gameState.value.phase = nextPhase
    
    console.log(`üéØ PHASE SET: mode=${gameMode.value} ‚Üí phase=${nextPhase} (round=${currentRound.value})`)
    
    broadcastGameState()

    return card
  }

  // --- –ú—å—é—Ç–µ–∫—Å—ã –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–µ–∫—Ü–∏–π ---
  const voteMutex = new Mutex()
  const betMutex = new Mutex()

  // –ò–≥—Ä–æ–∫ –¥–µ–ª–∞–µ—Ç –≥–æ–ª–æ—Å: votesArr ‚Äî –º–∞—Å—Å–∏–≤ –∏–∑ –¥–≤—É—Ö id –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
  const submitVote = async (voterId: string, votesArr: string[]) => {
    console.log('[MUTEX] submitVote: –æ–∂–∏–¥–∞–µ–º –º—å—é—Ç–µ–∫—Å', voterId)
    await voteMutex.runExclusive(async () => {
      console.log('[MUTEX] submitVote: –≤–æ—à–ª–∏ –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é —Å–µ–∫—Ü–∏—é', voterId)
      logAction('submit_vote', { voterId, votes: votesArr })
      if (gamePhase.value !== 'voting' && gamePhase.value !== 'secret_voting') {
        console.log('[MUTEX] submitVote: –Ω–µ–≤–∞–ª–∏–¥–Ω–∞—è —Ñ–∞–∑–∞, –≤—ã—Ö–æ–¥', gamePhase.value)
        return
      }
      if (!gameState.value.votes) gameState.value.votes = {}
      gameState.value.votes[voterId] = votesArr
      gameState.value.stateVersion = (gameState.value.stateVersion || 1) + 1
      broadcastGameState()
      console.log('[MUTEX] submitVote: –ø–æ—Å–ª–µ broadcastGameState')

      // –ê–≤—Ç–æ–ø–µ—Ä–µ—Ö–æ–¥ —Ñ–∞–∑—ã: –∫–æ–≥–¥–∞ –í–°–ï –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä–æ–∫–∏ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏, –¥–≤–∏–≥–∞–µ–º voting -> betting (basic) –∏–ª–∏ secret_voting -> answering (advanced)
      if (((gameMode.value === 'advanced' && gamePhase.value === 'secret_voting') || 
           (gameMode.value === 'basic' && gamePhase.value === 'voting')) && isHost.value) {
        debugSnapshot('before_secret_to_answering_check')
        // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ (–∏—Å–∫–ª—é—á–∞–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö)
        const activePlayers = (gameState.value.players || []).filter((p) => {
          const st = gameState.value.presence?.[p.id]
          return st !== 'absent'
        })
        const requiredVotes = activePlayers.length
        const receivedVotes = Object.keys(gameState.value.votes || {}).filter((pid) =>
          activePlayers.some((p) => p.id === pid),
        ).length

        console.log(
          '[MUTEX] submitVote: –≥–æ–ª–æ—Å–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ',
          receivedVotes,
          '–æ–∂–∏–¥–∞–µ—Ç—Å—è',
          requiredVotes,
        )

        if (receivedVotes >= requiredVotes && requiredVotes > 0) {
          // –ü–æ–¥—Å—á—ë—Ç –≥–æ–ª–æ—Å–æ–≤ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ª–∏–¥–µ—Ä–∞
          const votesObj = gameState.value.votes ?? {}
          const voteCounts: Record<string, number> = {}
          Object.values(votesObj).forEach((voteArr: string[]) => {
            voteArr.forEach((targetId) => {
              voteCounts[targetId] = (voteCounts[targetId] || 0) + 1
            })
          })
          gameState.value.voteCounts = voteCounts

          const maxVotes = Math.max(0, ...Object.values(voteCounts))
          const leaders = Object.entries(voteCounts)
            .filter(([_, count]) => count === maxVotes && maxVotes > 0)
            .map(([playerId]) => playerId)

          if (gameMode.value === 'advanced') {
            // –í advanced —Ä–µ–∂–∏–º–µ: secret_voting -> answering
            gameState.value.answeringPlayerId = leaders[0] || null
            gamePhase.value = 'answering'
            gameState.value.phase = 'answering'
            console.log('[MUTEX] submitVote: –∞–≤—Ç–æ–ø–µ—Ä–µ—Ö–æ–¥ —Ñ–∞–∑—ã secret_voting -> answering')
          } else {
            // –í basic —Ä–µ–∂–∏–º–µ: voting -> betting
            gamePhase.value = 'betting'
            gameState.value.phase = 'betting'
            console.log('[MUTEX] submitVote: –∞–≤—Ç–æ–ø–µ—Ä–µ—Ö–æ–¥ —Ñ–∞–∑—ã voting -> betting')
          }
          broadcastGameState()
        }
      }
      console.log('[MUTEX] submitVote: –≤—ã—Ö–æ–¥–∏–º –∏–∑ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π —Å–µ–∫—Ü–∏–∏', voterId)
    })
  }

  // –ò–≥—Ä–æ–∫ –¥–µ–ª–∞–µ—Ç —Å—Ç–∞–≤–∫—É: bet ‚Äî '0' | '¬±' | '+'
  const submitBet = async (playerId: string, bet: '0' | '¬±' | '+') => {
    console.log('[MUTEX] submitBet: –æ–∂–∏–¥–∞–µ–º –º—å—é—Ç–µ–∫—Å', playerId)
    await betMutex.runExclusive(async () => {
      console.log('[MUTEX] submitBet: –≤–æ—à–ª–∏ –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é —Å–µ–∫—Ü–∏—é', playerId)
      logAction('submit_bet', { playerId, bet })
      if (gamePhase.value !== 'betting') {
        console.log('[MUTEX] submitBet: –Ω–µ–≤–∞–ª–∏–¥–Ω–∞—è —Ñ–∞–∑–∞, –≤—ã—Ö–æ–¥', gamePhase.value)
        return
      }
      if (!gameState.value.bets) gameState.value.bets = {}

      // –ù–µ –¥–∞–µ–º –º–µ–Ω—è—Ç—å —Å—Ç–∞–≤–∫—É –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π —Ñ–∏–∫—Å–∞—Ü–∏–∏ (alreadyBet –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ), –Ω–æ –∑–∞—â–∏—â–∞–µ–º –∏ –Ω–∞ —Ö–æ—Å—Ç–µ
      if (gameState.value.bets[playerId]) {
        console.log('[MUTEX] submitBet: —Å—Ç–∞–≤–∫–∞ —É–∂–µ –µ—Å—Ç—å, –≤—ã—Ö–æ–¥')
        return
      }

      // –§–∏–∫—Å–∏—Ä—É–µ–º —Å—Ç–∞–≤–∫—É –∏ —Å—Ä–∞–∑—É —à–ª–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, —á—Ç–æ–±—ã UI –≤ —Ñ–∞–∑–µ results –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–ª –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
      gameState.value.bets[playerId] = bet
      gameState.value.stateVersion = (gameState.value.stateVersion || 1) + 1
      broadcastGameState()
      console.log('[MUTEX] submitBet: –ø–æ—Å–ª–µ broadcastGameState')

      // –ï—Å–ª–∏ –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä–æ–∫–∏ —Å–¥–µ–ª–∞–ª–∏ —Å—Ç–∞–≤–∫—É ‚Äî —Å—Ä–∞–∑—É —Å—á–∏—Ç–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      const playersCount = gameState.value.players.length
      const betsCount = Object.keys(gameState.value.bets).length

      console.log('[MUTEX] submitBet: —Å—Ç–∞–≤–æ–∫ –ø–æ–ª—É—á–µ–Ω–æ', betsCount, '–æ–∂–∏–¥–∞–µ—Ç—Å—è', playersCount)

      if (betsCount >= playersCount) {
        logAction('bets_completed_process_round', { betsCount, playersCount })
        debugSnapshot('before_results_after_bets')
        processRound()
        gamePhase.value = 'results'
        gameState.value.phase = 'results'
        console.log('[MUTEX] submitBet: –ø–µ—Ä–µ—Ö–æ–¥ —Ñ–∞–∑—ã -> results')
        broadcastGameState()
      }
      console.log('[MUTEX] submitBet: –≤—ã—Ö–æ–¥–∏–º –∏–∑ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π —Å–µ–∫—Ü–∏–∏', playerId)
    })
  }

  // –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ñ–∞–∑—É/—Ä–∞—É–Ω–¥ –ª–æ–∫–∞–ª—å–Ω–æ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Ö–æ—Å—Ç–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–∑ —Å–µ—Ç–µ–≤–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞)
  // allowForce ‚Äî –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ (–ø–æ –∫–Ω–æ–ø–∫–µ ¬´–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å¬ª —É —Ö–æ—Å—Ç–∞), –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –æ–∂–∏–¥–∞–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç–∞–≤–æ–∫.
  const finishRoundHostOnly = (allowForce: boolean = false) => {
    // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø—Ä–µ–∂–¥–µ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∏–∑ betting –≤ results –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Å—Ç–∞–≤–æ–∫.
    // –ï—Å–ª–∏ allowForce === true, —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ (–ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é –∑–∞–∫–∞–∑—á–∏–∫–∞).
    if (gameMode.value === 'basic' && gamePhase.value === 'betting' && !allowForce) {
      const playersCount = gameState.value.players.length
      const betsCount = Object.keys(gameState.value.bets || {}).length
      if (betsCount < playersCount) {
        console.log('Finish round ignored: not all bets received', { betsCount, playersCount })
        return
      }
    }

    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–∑–∞–º–∏ –∏ –æ—á–∫–∞–º–∏
    if (gameMode.value === 'basic') {
      // –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ —á—Ç–æ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ ‚Äî –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å—Ç–∞–≤–∫–∞–º
      if (gamePhase.value === 'voting') {
        // –ï—Å–ª–∏ allowForce === true, —Ö–æ—Å—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç —Å—Ä–∞–∑—É –∫ —Å—Ç–∞–≤–∫–∞–º
        gamePhase.value = 'betting'
        gameState.value.phase = 'betting'
        broadcastGameState()
        logAction('basic_voting_to_betting' + (allowForce ? '_forced' : ''))
        debugSnapshot('after_switch_betting')
        return
      }

      // –ï—Å–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã —Å—Ç–∞–≤–∫–∏ ‚Äî —Å—á–∏—Ç–∞–µ–º –æ—á–∫–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      if (gamePhase.value === 'betting') {
        // –ï—Å–ª–∏ allowForce === true, —Å—á–∏—Ç–∞–µ–º –æ—á–∫–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ –≤—Å–µ —Å—Ç–∞–≤–∫–∏ —Å–¥–µ–ª–∞–Ω—ã
        processRound()
        gamePhase.value = 'results'
        gameState.value.phase = 'results'
        broadcastGameState()
        return
      }

      // –ï—Å–ª–∏ –ø–æ–∫–∞–∑–∞–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã ‚Äî –≥–æ—Ç–æ–≤–∏–º —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥
      if (gamePhase.value === 'results') {
        // –ü–µ—Ä–µ—Ö–æ–¥ —Ö–æ–¥–∞
        const nextTurn =
          ((gameState.value.currentTurn || 0) + 1) % (gameState.value.players.length || 1)
        gameState.value.currentTurn = nextTurn
        gameState.value.currentTurnPlayerId = gameState.value.players[nextTurn]?.id || null

        // –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç –Ω–æ–º–µ—Ä–∞ —Ä–∞—É–Ω–¥–∞ –∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –ø–æ —á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏—é basic/advanced
        advanceRound()

        // –°–±—Ä–æ—Å —Ä–∞—É–Ω–¥–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        gameState.value.currentQuestion = null
        gameState.value.votes = {}
        gameState.value.voteCounts = {}
        gameState.value.bets = {}
        gameState.value.roundScores = {}

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–Ω–µ—Ü –∏–≥—Ä—ã: –∫–æ–≥–¥–∞ –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç –ø–æ—Å–ª–µ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞ ‚Äî –∑–∞–≤–µ—Ä—à–∞–µ–º
        if (currentRound.value > TOTAL_ROUNDS) {
          gamePhase.value = 'game_over'
          gameState.value.phase = 'game_over'
        } else {
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º snapshot –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–ª–æ–¥—ã –¥–ª—è UI
    const activeDeckRef = currentMode.value === 'basic' ? basicDeck : advancedDeck
    gameState.value.questionIndices = activeDeckRef.value.slice()
    gamePhase.value = 'drawing_question'
    gameState.value.phase = 'drawing_question'
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç—ã –Ω–∞ —Ä—É–∫–∞—Ö (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        gameState.value.players.forEach((player) => {
          player.votingCards = [...DEFAULT_CARDS.voting]
          player.bettingCards = [...DEFAULT_CARDS.betting]
        })

        broadcastGameState()
        return
      }
    } else {
      // advanced —Ä–µ–∂–∏–º
      // –ü–µ—Ä–µ—Ö–æ–¥ –∏–∑ secret_voting –≤ answering –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å—Ç—Ä–æ–≥–æ –≤ submitVote –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è,
      // —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥–≤–æ–π–Ω—ã—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤/–≥–æ–Ω–æ–∫. –ó–¥–µ—Å—å –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º –¥–ª—è secret_voting.
      if (gamePhase.value === 'secret_voting') {
        return
      }

      if (gamePhase.value === 'answering') {
        logAction('advanced_answering_to_guessing')
        debugSnapshot('after_switch_guessing')
        // –ü–æ–ª—É—á–∏–ª–∏ –æ—Ç–≤–µ—Ç ‚Äî –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —É–≥–∞–¥—ã–≤–∞–Ω–∏—é
        gamePhase.value = 'guessing'
        gameState.value.phase = 'guessing'
        broadcastGameState()
        return
      }

      if (gamePhase.value === 'guessing') {
        logAction('advanced_guessing_to_selecting_winners')
        debugSnapshot('after_switch_selecting_winners')
        // –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –¥–æ–≥–∞–¥–æ–∫ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ñ–∞–∑–µ –≤—ã–±–æ—Ä–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –∞–≤—Ç–æ—Ä–æ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        // –í—ã–±–∏—Ä–∞–µ—Ç –∏–≥—Ä–æ–∫, –ø–∏—Å–∞–≤—à–∏–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç (answeringPlayerId).
        gamePhase.value = 'selecting_winners'
        gameState.value.phase = 'selecting_winners'
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π —ç—Ç–æ–≥–æ —Ä–∞—É–Ω–¥–∞
        if (!gameState.value.roundWinners) gameState.value.roundWinners = []
        broadcastGameState()
        return
      }

      if (gamePhase.value === 'advanced_results') {
        // –ü–µ—Ä–µ—Ö–æ–¥ —Ö–æ–¥–∞ –∏ —Å–±—Ä–æ—Å
        const nextTurn =
          ((gameState.value.currentTurn || 0) + 1) % (gameState.value.players.length || 1)
        gameState.value.currentTurn = nextTurn
        gameState.value.currentTurnPlayerId = gameState.value.players[nextTurn]?.id || null

        // –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç –Ω–æ–º–µ—Ä–∞ —Ä–∞—É–Ω–¥–∞ –∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –ø–æ —á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏—é basic/advanced
        advanceRound()

        gameState.value.currentQuestion = null
        gameState.value.votes = {}
        gameState.value.voteCounts = {}
        gameState.value.guesses = {}
        ;(gameState.value as any).roundWinners = []
        gameState.value.answers = {}
        gameState.value.answeringPlayerId = null
        gameState.value.advancedAnswer = null
        gameState.value.roundScores = {}

        // –ó–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É –ø–æ—Å–ª–µ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ —Ä–∞—É–Ω–¥–æ–≤
        if (currentRound.value > TOTAL_ROUNDS) {
          gamePhase.value = 'game_over'
          gameState.value.phase = 'game_over'
        } else {
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º snapshot –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–ª–æ–¥—ã –¥–ª—è UI
    const activeDeckRef = currentMode.value === 'basic' ? basicDeck : advancedDeck
    gameState.value.questionIndices = activeDeckRef.value.slice()
    gamePhase.value = 'drawing_question'
    gameState.value.phase = 'drawing_question'
        }
        broadcastGameState()
        return
      }
    }
  }
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
  const gameState = ref<
    GameState & {
      currentQuestion?: number | null
      votes?: Record<string, string[]>
      bets?: Record<string, string>
      stateVersion?: number
    }
  >({
    roomId: '',
    gameStarted: false,
    players: [],
    litUpPlayerId: null,
    maxPlayers: GAME_CONFIG.MAX_PLAYERS,
    hostId: '',
    createdAt: 0,
    votingCards: {},
    bettingCards: {},
    currentTurn: 0,
    scores: {},
    currentQuestion: null,
    votes: {},
    bets: {},
    stateVersion: 1,
  })

  // –õ–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  const myPlayerId = ref<string>('')

  // ===== Versioned sync client state (backward-compatible) =====
  const currentVersion = ref<number>(0)
  const initReceived = ref<boolean>(false)
  const lastServerTime = ref<number>(0)
  const pendingDiffs = ref<Map<number, any>>(new Map())

  // Fallback –æ–∂–∏–¥–∞–Ω–∏—è –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ —Å–Ω–∞–ø—à–æ—Ç–∞ –∏ –ª–µ–≥–∞—Å–∏-–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  const SNAPSHOT_TIMEOUT_MS = 2500
  let _snapshotTimeoutHandle: number | null = null
  const _acceptLegacyAsInit = ref<boolean>(false)

  // --- Helpers for versioned sync ---
  function deepMerge(target: any, patch: any) {
    if (patch === null) {
      return null
    }
    if (Array.isArray(patch)) {
      // –º–∞—Å—Å–∏–≤—ã –∑–∞–º–µ–Ω—è–µ–º —Ü–µ–ª–∏–∫–æ–º
      return patch.slice()
    }
    if (typeof patch !== 'object' || patch === null) {
      return patch
    }
    if (typeof target !== 'object' || target === null) {
      target = {}
    }
    const result: any = Array.isArray(target) ? target.slice() : { ...target }
    for (const key of Object.keys(patch)) {
      const val = (patch as any)[key]
      if (val === null) {
        // null => delete key
        if (Array.isArray(result)) {
          // –Ω–µ–ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–æ –¥–ª—è –º–∞—Å—Å–∏–≤–æ–≤ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        } else {
          delete result[key]
        }
      } else if (typeof val === 'object' && !Array.isArray(val)) {
        result[key] = deepMerge(result[key], val)
      } else {
        result[key] = Array.isArray(val) ? val.slice() : val
      }
    }
    return result
  }

  function applyDiff(patch: any) {
    if (patch === null || patch === undefined) return
    const next = deepMerge(gameState.value, patch)
    if (next !== null) {
      gameState.value = next as any
    }
  }

  function drainPending() {
    let nextVer = (currentVersion.value || 0) + 1
    while (pendingDiffs.value.has(nextVer)) {
      const payload = pendingDiffs.value.get(nextVer)
      pendingDiffs.value.delete(nextVer)
      try {
        applyDiff(payload?.patch)
        currentVersion.value = nextVer
        lastServerTime.value = Math.max(lastServerTime.value, payload?.meta?.serverTime || 0)
        nextVer++
      } catch (e) {
        console.warn('Failed to apply buffered diff', e)
        break
      }
    }
  }

  function sendAck(version: number) {
    try {
      peerService.broadcastMessage(
        makeMessage(
          'state_ack' as any,
          {
            roomId: roomId.value || gameState.value.roomId,
            version,
            receivedAt: Date.now(),
          } as any,
          {
            roomId: roomId.value || gameState.value.roomId,
            fromId: myPlayerId.value,
            ts: Date.now(),
          },
        ),
      )
    } catch {}
  }

  function requestResync(fromVersion?: number) {
    try {
      peerService.broadcastMessage(
        makeMessage(
          'resync_request' as any,
          {
            roomId: roomId.value || gameState.value.roomId,
            fromVersion,
            reason: initReceived.value ? 'gap' : 'init_missing',
          } as any,
          {
            roomId: roomId.value || gameState.value.roomId,
            fromId: myPlayerId.value,
            ts: Date.now(),
          },
        ),
      )
    } catch {}
  }

  const myNickname = ref<string>('')
  const isHost = ref<boolean>(false)
  const hostId = ref<string>('')
  const roomId = ref<string>('')
  const connectionStatus = ref<'disconnected' | 'connecting' | 'connected'>('disconnected')
  const restorationState = ref<'idle' | 'discovering' | 'restoring'>('idle')
  // –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ ¬´–º–µ—Ä—Ç–≤—ã—Ö¬ª –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤-—Ö–æ—Å—Ç–æ–≤ –Ω–∞ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Ü–∏–∫–ª–∏—Ç—å—Å—è –Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ–º id
  const deadHostBlacklist = new Map<string, number>() // hostId -> untilTs
  const DEAD_HOST_TTL_MS = 10_000
  // –ú–µ—Ç–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —É—Å–ø–µ—à–Ω–æ–π —Å–µ—Å—Å–∏–∏/–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  const sessionTimestamp = ref<number | null>(null)

  // Computed
  // –ö–Ω–æ–ø–∫–∞ "–ù–∞—á–∞—Ç—å" –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω–∞ –¥–ª—è —Ö–æ—Å—Ç–∞ –ø—Ä–∏ >=3 –∏–≥—Ä–æ–∫–∞—Ö –∏ –µ—Å–ª–∏ –∏–≥—Ä–∞ –µ—â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞
  // –¢–∞–∫–∂–µ —É—á–∏—Ç—ã–≤–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: –µ—Å–ª–∏ –º—ã —Ö–æ—Å—Ç –∏ phase === 'lobby', —Ä–∞–∑—Ä–µ—à–∞–µ–º —Å—Ç–∞—Ä—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç gameStarted —Ñ–ª–∞–≥–∞,
  // —Ç–∞–∫ –∫–∞–∫ –æ–Ω –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ –Ω–∞—á–∞–ª—å–Ω—ã–π –º–æ–º–µ–Ω—Ç.
  const canStartGame = computed(() => {
    // –ü—Ä–∞–≤–∏–ª–æ: —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –∏–∑ –ª–æ–±–±–∏ –∏ —Ç–æ–ª—å–∫–æ —Ö–æ—Å—Ç—É. –ú–∏–Ω–∏–º—É–º 3 –∏–≥—Ä–æ–∫–∞, —á—Ç–æ–±—ã –Ω–µ –∑–∞–≤–∏—Å–∞—Ç—å –≤ –æ–∂–∏–¥–∞–Ω–∏–∏.
    const isLobby = (gameState.value.phase ?? 'lobby') === 'lobby'
    const enoughPlayers = gameState.value.players.length >= GAME_CONFIG.MIN_PLAYERS
    return isHost.value && isLobby && enoughPlayers
  })

  const myPlayer = computed(() => gameState.value.players.find((p) => p.id === myPlayerId.value))

  const canJoinRoom = computed(
    () =>
      gameState.value.players.length < gameState.value.maxPlayers || !gameState.value.gameStarted,
  )

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –ø–æ –∏–Ω–¥–µ–∫—Åy –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (–¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ, —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏)
  const getColorByIndex = (index: number): string => {
    return PLAYER_COLORS[index % PLAYER_COLORS.length]
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∏–∫–Ω–µ–π–º–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  const generateDefaultNickname = (): string => {
    return `${NICKNAME_PREFIX}${Math.floor(Math.random() * 9999)}`
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–∏—Ç–∞–µ–º–æ–≥–æ ID –∫–æ–º–Ω–∞—Ç—ã
  const generateRoomId = (): string => {
    const numbers = Math.floor(Math.random() * 100)

    const adjective = ROOM_ID_WORDS.adjectives[Math.floor(Math.random() * ROOM_ID_WORDS.adjectives.length)]
    const noun = ROOM_ID_WORDS.nouns[Math.floor(Math.random() * ROOM_ID_WORDS.nouns.length)]

    return `${adjective}-${noun}-${numbers}`
  }

  // –£—Å—Ç–æ–π—á–∏–≤–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ roomId –º–µ–∂–¥—É –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞–º–∏ —Ö–æ—Å—Ç–∞ (storageSafe, namespace 'game')
  const savePersistentRoomId = (rid: string) => {
    try {
      storageSafe.nsSet('game', 'roomIdStable', rid)
    } catch {}
  }
  const loadPersistentRoomId = (): string | null => {
    try {
      return storageSafe.nsGet<string>('game', 'roomIdStable')
    } catch {
      return null
    }
  }
  const clearPersistentRoomId = () => {
    try {
      storageSafe.nsRemove('game', 'roomIdStable')
    } catch {}
  }

  // –£—Å—Ç–æ–π—á–∏–≤—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–≥—Ä–æ–∫–∞ –¥–ª—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π (–Ω–µ —Ä–∞–≤–µ–Ω —Ç–µ–∫—É—â–µ–º—É peer id, —ç—Ç–æ ¬´—è–∫–æ—Ä—å¬ª –ø—Ä–æ—à–ª–æ–π —Å–µ—Å—Å–∏–∏)
  const saveStablePlayerId = (pid: string) => {
    try {
      storageSafe.nsSet('game', 'playerIdStable', pid)
    } catch {}
  }
  const loadStablePlayerId = (): string | null => {
    try {
      return storageSafe.nsGet<string>('game', 'playerIdStable')
    } catch {
      return null
    }
  }
  const clearStablePlayerId = () => {
    try {
      storageSafe.nsRemove('game', 'playerIdStable')
    } catch {}
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  const generateAuthToken = (playerId: string, roomId: string, timestamp: number): string => {
    const data = `${playerId}-${roomId}-${timestamp}-${Math.random()}`
    // –ü—Ä–æ—Å—Ç–∞—è —Ö–µ—à-—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
    let hash = 0
    for (let i = 0; i < data.length; i++) {
      const char = data.charCodeAt(i)
      hash = (hash << 5) - hash + char
      hash = hash & hash // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ 32-–±–∏—Ç–Ω–æ–µ —á–∏—Å–ª–æ
    }
    return Math.abs(hash).toString(36)
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞
  const validateAuthToken = (player: Player): boolean => {
    // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞ –∏ –µ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
    return !!(player.authToken && player.authToken.length > 0)
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã (—Ö–æ—Å—Ç)
  const createRoom = async (nickname: string) => {
    // --- –û—á–∏—â–∞–µ–º localStorage –∫—Ä–æ–º–µ nickname ---
    const savedNick = getNickname();
    localStorage.clear();
    if (savedNick) localStorage.setItem('nickname', savedNick);

    const ridGuard = startRequest('createRoom')
    try {
      connectionStatus.value = 'connecting'

      // –ü–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –∫–æ–º–Ω–∞—Ç—ã: –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –∏–≥—Ä–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏
      removeGameItemsByPrefix()
      // –ù–∏–∫ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞
      setNickname(nickname)

      // –ö–†–ò–¢–ò–ß–ù–û: –í—Å–µ–≥–¥–∞ –ø—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ö–æ—Å—Ç–∞ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º ID
      const existingSession = loadSession()
      let restoredPeerId: string
      let targetRoomId: string

      if (existingSession && existingSession.isHost) {
        console.log('üîÑ MANDATORY: Restoring host session for room:', existingSession.roomId)
        // –ü—ã—Ç–∞–µ–º—Å—è –≤–∑—è—Ç—å roomId –∏–∑ —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ (–∏—Å—Ç–æ—á–Ω–∏–∫ –ø—Ä–∞–≤–¥—ã)
        targetRoomId = loadPersistentRoomId() || existingSession.roomId

        // –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ø–µ—Ä–µ–¥–∞–µ–º roomId –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è peer ID –∏–∑ localStorage
        restoredPeerId = await peerService.createHost(targetRoomId)

        console.log('üìã Restoring complete game state from saved session')
        myPlayerId.value = restoredPeerId
        myNickname.value = nickname
        isHost.value = true
        roomId.value = targetRoomId
        hostId.value = restoredPeerId
        peerService.setCurrentHostId(restoredPeerId)
        gameState.value = { ...existingSession.gameState }
        gameState.value.hostId = restoredPeerId

        // –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–π ID –≤ —Å–ø–∏—Å–∫–µ –∏–≥—Ä–æ–∫–æ–≤
        const myPlayerIndex = gameState.value.players.findIndex((p: Player) => p.isHost)
        if (myPlayerIndex !== -1) {
          gameState.value.players[myPlayerIndex].id = restoredPeerId
          gameState.value.players[myPlayerIndex].nickname = nickname
        }

        connectionStatus.value = 'connected'
        peerService.setRoomContext(targetRoomId || gameState.value.roomId || (null as any))
        peerService.setAsHost(restoredPeerId, targetRoomId || gameState.value.roomId)
        setupHostMessageHandlers()

        console.log('üéâ Host fully restored with session data - ID:', restoredPeerId)
        return restoredPeerId
      } else {
        // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã
        console.log('üÜï Creating brand new room')
        // –ï—Å–ª–∏ —Ä–∞–Ω–µ–µ —É–∂–µ —Å–æ–∑–¥–∞–≤–∞–ª—Å—è roomId –≤ —ç—Ç–æ–π –≤–∫–ª–∞–¥–∫–µ ‚Äî –ø–æ–≤—Ç–æ—Ä–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º
        targetRoomId = loadPersistentRoomId() || generateRoomId()
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –±—É–¥—É—â–∏—Ö —Ä–µ—Å—Ç–∞—Ä—Ç–æ–≤ –≤–∫–ª–∞–¥–∫–∏ —Ö–æ—Å—Ç–∞
        savePersistentRoomId(targetRoomId)

        // –ü–µ—Ä–µ–¥–∞–µ–º roomId –¥–∞–∂–µ –¥–ª—è –Ω–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å peer ID
        restoredPeerId = await peerService.createHost(targetRoomId)
      }

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –Ω–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã
      if (!existingSession || !existingSession.isHost) {
        console.log('üÜï Initializing new room state')
        const now = Date.now()

        myPlayerId.value = restoredPeerId
        myNickname.value = nickname
        isHost.value = true
        roomId.value = targetRoomId
        hostId.value = restoredPeerId
        peerService.setCurrentHostId(restoredPeerId)

        gameState.value = {
          roomId: targetRoomId,
          gameStarted: false,
          players: [],
          litUpPlayerId: null,
          maxPlayers: GAME_CONFIG.MAX_PLAYERS,
          hostId: restoredPeerId,
          createdAt: now,
          votingCards: {},
          bettingCards: {},
          currentTurn: 0,
          scores: {},
          currentQuestion: null,
          votes: {},
          bets: {},
          answers: {},
          guesses: {},
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Ö–æ—Å—Ç–∞ –≤ —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
        const hostPlayer: Player = {
          id: restoredPeerId,
          nickname,
          color: getColorByIndex(0),
          isHost: true,
          joinedAt: now,
          authToken: generateAuthToken(restoredPeerId, targetRoomId, now),
          votingCards: [...DEFAULT_CARDS.voting],
          bettingCards: [...DEFAULT_CARDS.betting],
        }

        gameState.value.players = [hostPlayer]
      }

      connectionStatus.value = 'connected'
      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —É—Å—Ç–æ–π—á–∏–≤—ã–π roomId
      if (roomId.value) savePersistentRoomId(roomId.value)

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–æ–ª—å —Ö–æ—Å—Ç–∞ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º heartbeat
      peerService.setRoomContext(targetRoomId || gameState.value.roomId || (null as any))
      peerService.setAsHost(restoredPeerId, targetRoomId || gameState.value.roomId)
      setupHostMessageHandlers()
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º roomId –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–æ–∫
      savePersistentRoomId(targetRoomId)

      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞—Ç–æ–º–∞—Ä–Ω—ã—Ö –ø–æ–ª–µ–π –≤—ã–ø–æ–ª–Ω—è–µ—Ç Pinia persist; —É—Å—Ç–æ–π—á–∏–≤—ã–π roomId —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω
      try {
      } catch {}

      console.log('üèÅ Host initialization completed with ID:', restoredPeerId)
      sessionTimestamp.value = Date.now()
      endRequestSuccess('createRoom', ridGuard)
      return restoredPeerId
    } catch (error) {
      connectionStatus.value = 'disconnected'
      endRequestError('createRoom', ridGuard, normalizeError(error, 'create_room_failed'))
      throw error
    }
  }

  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ (–∫–ª–∏–µ–Ω—Ç)
  const joinRoom = async (nickname: string, targetHostId: string) => {
    // --- –û—á–∏—â–∞–µ–º localStorage –∫—Ä–æ–º–µ nickname ---
    const savedNick = getNickname();
    localStorage.clear();
    if (savedNick) localStorage.setItem('nickname', savedNick);

    const ridGuard = startRequest('joinRoom')
    try {
      connectionStatus.value = 'connecting'

      // –ü–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º –≤ –∫–æ–º–Ω–∞—Ç—É: –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –∏–≥—Ä–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏
      removeGameItemsByPrefix()
      // –ù–∏–∫ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞
      setNickname(nickname)

      // 1) –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Ö–æ—Å—Ç—É
      await peerService.connectToHost(targetHostId)

      // 2) –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
      myNickname.value = nickname
      hostId.value = targetHostId
      myPlayerId.value = peerService.getMyId() || ''
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Å—Ç–æ–π—á–∏–≤—ã–π playerId –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
      if (myPlayerId.value) saveStablePlayerId(myPlayerId.value)
      
      // –ö–†–ò–¢–ò–ß–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º currentHostId –≤ peerService –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Ö–æ—Å—Ç–∞
      peerService.setCurrentHostId(targetHostId)

      // 3) –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–æ–ª—å –∫–ª–∏–µ–Ω—Ç–∞ –∏ –°–†–ê–ó–£ –≤–µ—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏,
      //    —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –ø–µ—Ä–≤–æ–µ game_state_update –æ—Ç —Ö–æ—Å—Ç–∞
      peerService.setAsClient()
      setupClientMessageHandlers()

      // 4) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º join_request (—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º —É—Å—Ç–æ–π—á–∏–≤—ã–º ID –¥–ª—è —Ä–µ–º–∞–ø–∞)
      const stableId = loadStablePlayerId() || myPlayerId.value
      peerService.sendMessage(
        targetHostId,
        makeMessage(
          'join_request',
          {
            nickname,
            savedPlayerId: stableId,
          },
          {
            roomId: roomId.value || gameState.value.roomId || '',
            fromId: myPlayerId.value,
            ts: Date.now(),
          } as MessageMeta,
        ),
      )

      // 5) –ò–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è, —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
      peerService.sendMessage(
        targetHostId,
        makeMessage(
          'request_game_state',
          { requesterId: myPlayerId.value },
          {
            roomId: roomId.value || gameState.value.roomId || '',
            fromId: myPlayerId.value,
            ts: Date.now(),
          },
        ),
      )

      // Note: peer list request removed - no longer needed in hub-and-spoke architecture

      // 7) –î–æ–∂–∏–¥–∞–µ–º—Å—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è (–∏—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —É—Ç–∏–ª–∏—Ç—É)
      try {
        await waitForGameStateUpdate()
      } catch {}

      // 8) –¢–µ–ø–µ—Ä—å —Å—á–∏—Ç–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º
      connectionStatus.value = 'connected'

      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞—Ç–æ–º–∞—Ä–Ω—ã—Ö –ø–æ–ª–µ–π –≤—ã–ø–æ–ª–Ω—è–µ—Ç Pinia persist
      try {
      } catch {}
    } catch (error) {
      connectionStatus.value = 'disconnected'
      endRequestError('joinRoom', ridGuard, normalizeError(error, 'join_room_failed'))
      throw error
    }
    // success branch
    sessionTimestamp.value = Date.now()
    endRequestSuccess('joinRoom', ridGuard)
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ö–æ—Å—Ç–∞
  const setupHostMessageHandlers = () => {
    console.log('Setting up host message handlers')

    // –ö–†–ò–¢–ò–ß–ù–û: –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π –Ω–æ–≤—ã—Ö
    peerService.clearMessageHandlers()
    console.log('Cleared old message handlers before setting up host handlers')

    // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª: –∫–ª–∏–µ–Ω—Ç—ã –ø—Ä–∏—Å—ã–ª–∞—é—Ç –ø—É–ª—å—Å —Ö–æ—Å—Ç–∞
    peerService.onMessage('heartbeat', (message: PeerMessage) => {
      // –•–æ—Å—Ç –ø–æ–ª—É—á–∞–µ—Ç heartbeat —Ç–æ–ª—å–∫–æ –æ—Ç —Å–∞–º–æ–≥–æ —Å–µ–±—è –≤ –∑–¥–æ—Ä–æ–≤–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏.
      // –ï—Å–ª–∏ –º—ã —Ö–æ—Å—Ç –∏ –ø–æ–ª—É—á–∞–µ–º —á—É–∂–æ–π heartbeat ‚Äî –≤–µ—Ä–æ—è—Ç–Ω–æ, –ø–æ—è–≤–∏–ª—Å—è –¥—Ä—É–≥–æ–π –ø—Ä–µ—Ç–µ–Ω–¥–µ–Ω—Ç, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º.
      const payload = (message as any).payload || {}
      const from = (message as any).meta?.fromId
      if (from && from !== myPlayerId.value) {
        console.log('Ignoring foreign heartbeat on host side from:', from)
        return
      }
      // –ú–æ–∂–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–µ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏, –Ω–æ –¥–ª—è —Ö–æ—Å—Ç–∞ —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ.
    })

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —è–≤–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞ –∏–≥—Ä–æ–∫–∞: user_left_room
    peerService.onMessage('user_left_room', (message: PeerMessage, conn: any) => {
      if (!isHost.value) return
      const typed = message as Extract<PeerMessage, { type: 'user_left_room' }>
      const { userId, roomId: rid, timestamp, currentScore, reason } = typed.payload

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–º–Ω–∞—Ç—ã
      if (rid && gameState.value.roomId && rid !== gameState.value.roomId) {
        console.log('‚ùå Ignoring user_left_room for different room', {
          rid,
          current: gameState.value.roomId,
        })
        return
      }

      // –ò–≥—Ä–æ–∫ –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
      const leavingPlayer = gameState.value.players.find((p: Player) => p.id === userId)
      if (!leavingPlayer) {
        console.log('‚ùå Ignoring user_left_room - player not found:', userId)
        return
      }

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
      if (!gameState.value.presence) gameState.value.presence = {}
      if (!gameState.value.presenceMeta) gameState.value.presenceMeta = {}

      // –ò–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –ø–æ –≤—Ä–µ–º–µ–Ω–∏
      const prevMeta = gameState.value.presenceMeta[userId]
      const prevLeftAt = prevMeta?.leftAt || 0
      const ts = timestamp || Date.now()
      if (gameState.value.presence[userId] === 'absent' && prevLeftAt >= ts) {
        console.log('‚ÑπÔ∏è Duplicate/older user_left_room ignored for', userId)
        return
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω (–Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—á–∫–∏)
      if (typeof currentScore === 'number') {
        gameState.value.scores[userId] = currentScore
      } else if (gameState.value.scores[userId] === undefined) {
        gameState.value.scores[userId] = 0
      }

      // –ü–æ–º–µ—á–∞–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
      gameState.value.presence[userId] = 'absent'
      gameState.value.presenceMeta[userId] = {
        lastSeen: Math.max(prevMeta?.lastSeen || 0, ts),
        leftAt: ts,
        reason: reason || 'explicit_leave',
      }

      // –£–¥–∞–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ –∫–æ–º–Ω–∞—Ç—ã (–æ—Ç—Ä–∞–∂–∞–µ—Ç—Å—è –≤ "–ò–≥—Ä–æ–∫–∏ –≤ –∫–æ–º–Ω–∞—Ç–µ")
      // –ò–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ —á–∏—Å—Ç–∏–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è
      try {
        // –£–¥–∞–ª—è–µ–º –∏–∑ players
        gameState.value.players = gameState.value.players.filter((p: Player) => p.id !== userId)

        // –û—á–∏—â–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ/—Å—Ç–∞–≤–∫–∏/–¥–æ–≥–∞–¥–∫–∏
        if (gameState.value.votes) {
          const nv: Record<string, string[]> = {}
          Object.entries(gameState.value.votes).forEach(([k, v]) => {
            if (k !== userId) {
              nv[k] = (v || []).filter((t) => t !== userId)
            }
          })
          gameState.value.votes = nv
        }
        if (gameState.value.voteCounts) {
          const nc: Record<string, number> = {}
          Object.entries(gameState.value.voteCounts).forEach(([k, v]) => {
            if (k !== userId) nc[k] = v
          })
          gameState.value.voteCounts = nc
        }
        if (gameState.value.bets) {
          const nb: Record<string, '0' | '¬±' | '+'> = {}
          Object.entries(gameState.value.bets).forEach(([k, v]) => {
            if (k !== userId) nb[k] = v as any
          })
          gameState.value.bets = nb
        }
        if (gameState.value.guesses) {
          const ng: Record<string, string> = {}
          Object.entries(gameState.value.guesses).forEach(([k, v]) => {
            if (k !== userId) {
              const mappedVal = v === userId ? '' : v
              if (mappedVal) ng[k] = mappedVal
            }
          })
          gameState.value.guesses = ng
        }
        if (gameState.value.roundScores) {
          const nr: Record<string, number> = {}
          Object.entries(gameState.value.roundScores).forEach(([k, v]) => {
            if (k !== userId) nr[k] = v
          })
          gameState.value.roundScores = nr
        }
        // –û—á–∏—Å—Ç–∫–∞ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
        if (gameState.value.litUpPlayerId === userId) {
          gameState.value.litUpPlayerId = null
        }
        if (gameState.value.currentTurnPlayerId === userId) {
          // –°–¥–≤–∏–≥–∞–µ–º —Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ –∫—Ä—É–≥—É, –µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ –æ—Å—Ç–∞–ª—Å—è
          const players = gameState.value.players
          if (players.length > 0) {
            const nextIndex = gameState.value.currentTurn
              ? gameState.value.currentTurn % players.length
              : 0
            gameState.value.currentTurn = nextIndex
            gameState.value.currentTurnPlayerId = players[nextIndex]?.id || null
          } else {
            gameState.value.currentTurn = 0
            gameState.value.currentTurnPlayerId = null
          }
        }
      } catch (e) {
        console.warn('Failed to cleanup state for leaving player', e)
      }

      // –†–∞—Å—Å—ã–ª–∞–µ–º broadcast –æ–± —É—Ö–æ–¥–µ (–¥–ª—è ARIA/—Ç–æ—Å—Ç–æ–≤ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞—Ö)
      peerService.broadcastMessage(
        makeMessage(
          'user_left_broadcast',
          {
            userId,
            roomId: gameState.value.roomId,
            timestamp: Date.now(),
            reason: reason || 'explicit_leave',
          },
          { roomId: gameState.value.roomId, fromId: gameState.value.hostId, ts: Date.now() },
        ),
      )

      // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –¥–ª—è –≤—Å–µ—Ö
      broadcastGameState()
    })

    peerService.onMessage('join_request', (message: PeerMessage, conn: any) => {
      console.log('Host received join_request:', {
        payload: message.payload,
        connPeer: conn?.peer,
        canJoinRoom: canJoinRoom.value,
        currentPlayers: gameState.value.players.length,
        maxPlayers: gameState.value.maxPlayers,
        gameStarted: gameState.value.gameStarted,
      })

      if (!conn) {
        console.log('No connection provided to join_request')
        return
      }

      if (!canJoinRoom.value) {
        console.log('Cannot join room:', {
          currentPlayers: gameState.value.players.length,
          maxPlayers: gameState.value.maxPlayers,
          gameStarted: gameState.value.gameStarted,
        })
        return
      }

      const { nickname } = (message as Extract<PeerMessage, { type: 'join_request' }>).payload

      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –∏–≥—Ä–æ–∫ –ø–æ ID
      const existingPlayerById = gameState.value.players.find((p) => p.id === conn.peer)
      if (existingPlayerById) {
        console.log('Player already exists by ID, updating info:', conn.peer)
        existingPlayerById.nickname = nickname
        broadcastGameState()
        return
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–≥—Ä–æ–∫ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º ID (–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ)
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º savedPlayerId –∏–∑ payload —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
      const { savedPlayerId } = (message as Extract<PeerMessage, { type: 'join_request' }>).payload
      console.log('üîç HOST: Checking for existing player by savedPlayerId:', {
        savedPlayerId,
        hasPayloadSavedId: !!savedPlayerId,
        currentPlayers: gameState.value.players.map((p: Player) => ({
          id: p.id,
          nickname: p.nickname,
          isHost: p.isHost,
        })),
        currentLitUpPlayerId: gameState.value.litUpPlayerId,
      })

      if (savedPlayerId) {
        console.log('üîç HOST: Checking for existing player by savedPlayerId:', {
          savedPlayerId,
          hasPayloadSavedId: !!savedPlayerId,
          currentPlayers: gameState.value.players.map((p: Player) => ({
            id: p.id,
            nickname: p.nickname,
            isHost: p.isHost,
          })),
          currentLitUpPlayerId: gameState.value.litUpPlayerId,
        })

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π —Ö–æ—Å—Ç –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è (—á—Ç–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å)
        if (savedPlayerId === gameState.value.hostId) {
          console.log('üõë Saved ID belongs to current host. This should not happen during normal operation:', {
            savedPlayerId,
            currentHostId: gameState.value.hostId,
            requester: conn.peer,
          })
          // –û—Ç–≤–µ—á–∞–µ–º –æ—Ç–∫–∞–∑–æ–º –≤ –ª–µ–≥–∫–æ–π —Ñ–æ—Ä–º–µ: –æ—Ç–ø—Ä–∞–≤–∏–º –∫—Ä–∞—Ç–∫–∏–π state
          try {
            const minimalState = {
              hostId: gameState.value.hostId,
              roomId: gameState.value.roomId,
              players: gameState.value.players,
            }
            peerService.sendMessage(
              conn.peer,
              makeMessage('game_state_update', minimalState as any, {
                roomId: gameState.value.roomId,
                fromId: gameState.value.hostId,
                ts: Date.now(),
              }),
            )
          } catch {}
          return
        }

        const existingPlayerBySavedId = gameState.value.players.find(
          (p) => p.id === savedPlayerId && !p.isHost,
        )
        console.log('üîç HOST: Search result for existing player:', {
          existingPlayerFound: !!existingPlayerBySavedId,
          existingPlayer: existingPlayerBySavedId
            ? {
                id: existingPlayerBySavedId.id,
                nickname: existingPlayerBySavedId.nickname,
              }
            : null,
        })

        if (existingPlayerBySavedId) {
          console.log('‚úÖ HOST: Found existing player by saved ID, updating connection:', {
            savedId: savedPlayerId,
            newConnectionId: conn.peer,
            nickname: nickname,
          })

          // –ü–æ–ª–Ω—ã–π —Ä–µ–º–∞–ø ID savedPlayerId -> conn.peer –≤–æ –≤—Å–µ—Ö –ø–æ–ª—è—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è
          const oldId = savedPlayerId
          const newId = conn.peer

          // 1) litUpPlayerId
          if (gameState.value.litUpPlayerId === oldId) {
            console.log('üîÑ HOST: Updating litUpPlayerId from old ID to new ID:', { oldId, newId })
            gameState.value.litUpPlayerId = newId
          }

          // 2) currentTurnPlayerId
          if (gameState.value.currentTurnPlayerId === oldId) {
            console.log('üîÑ HOST: Updating currentTurnPlayerId from old ID to new ID:', {
              oldId,
              newId,
            })
            gameState.value.currentTurnPlayerId = newId
          }

          // 3) votes (–∫–ª—é—á–∏)
          if (gameState.value.votes) {
            const newVotes: Record<string, string[]> = {}
            Object.entries(gameState.value.votes).forEach(([k, v]) => {
              const mappedKey = k === oldId ? newId : k
              // —Ç–∞–∫–∂–µ –∑–∞–º–µ–Ω–∏–º –≤–Ω—É—Ç—Ä–∏ –º–∞—Å—Å–∏–≤–æ–≤ —Ü–µ–ª–µ–≤—ã–µ ID, –µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ –≥–æ–ª–æ—Å–æ–≤–∞–ª –∑–∞ oldId
              const mappedArray = (v || []).map((t) => (t === oldId ? newId : t))
              newVotes[mappedKey] = mappedArray
            })
            gameState.value.votes = newVotes
          }

          // 4) voteCounts (–∫–ª—é—á–∏)
          if (gameState.value.voteCounts) {
            const newCounts: Record<string, number> = {}
            Object.entries(gameState.value.voteCounts).forEach(([k, v]) => {
              const mappedKey = k === oldId ? newId : k
              newCounts[mappedKey] = v
            })
            gameState.value.voteCounts = newCounts
          }

          // 5) bets (–∫–ª—é—á–∏)
          if (gameState.value.bets) {
            const newBets: Record<string, '0' | '¬±' | '+'> = {}
            Object.entries(gameState.value.bets).forEach(([k, v]) => {
              const mappedKey = k === oldId ? newId : k
              newBets[mappedKey] = v
            })
            gameState.value.bets = newBets
          }

          // 6) guesses (–∫–ª—é—á–∏ –∏ –∑–Ω–∞—á–µ–Ω–∏—è-—Ü–µ–ª–∏)
          if (gameState.value.guesses) {
            const newGuesses: Record<string, string> = {}
            Object.entries(gameState.value.guesses).forEach(([k, v]) => {
              const mappedKey = k === oldId ? newId : k
              const mappedVal = v === oldId ? newId : v
              newGuesses[mappedKey] = mappedVal
            })
            gameState.value.guesses = newGuesses
          }

          // 7) scores / roundScores (–∫–ª—é—á–∏)
          if (gameState.value.scores) {
            const newScores: Record<string, number> = {}
            Object.entries(gameState.value.scores).forEach(([k, v]) => {
              const mappedKey = k === oldId ? newId : k
              newScores[mappedKey] = v
            })
            gameState.value.scores = newScores
          }
          if (gameState.value.roundScores) {
            const newRoundScores: Record<string, number> = {}
            Object.entries(gameState.value.roundScores).forEach(([k, v]) => {
              const mappedKey = k === oldId ? newId : k
              newRoundScores[mappedKey] = v
            })
            gameState.value.roundScores = newRoundScores
          }

          // 8) roundWinners (–º–∞—Å—Å–∏–≤ ID)
          if (
            Array.isArray(gameState.value.roundWinners) &&
            gameState.value.roundWinners.length > 0
          ) {
            gameState.value.roundWinners = gameState.value.roundWinners.map((pid) =>
              pid === oldId ? newId : pid,
            )
          }

          // 9) answeringPlayerId
          if (gameState.value.answeringPlayerId === oldId) {
            gameState.value.answeringPlayerId = newId
          }

          // –û–±–Ω–æ–≤–ª—è–µ–º ID –∏ —Ç–æ–∫–µ–Ω –∏–≥—Ä–æ–∫–∞ –≤ players
          existingPlayerBySavedId.id = newId
          existingPlayerBySavedId.nickname = nickname
          existingPlayerBySavedId.authToken = generateAuthToken(
            newId,
            gameState.value.roomId,
            Date.now(),
          )

          console.log('üéØ HOST: Broadcasting updated game state with full ID remap:', {
            updatedPlayer: {
              id: existingPlayerBySavedId.id,
              nickname: existingPlayerBySavedId.nickname,
            },
            newLitUpPlayerId: gameState.value.litUpPlayerId,
            newCurrentTurnPlayerId: gameState.value.currentTurnPlayerId,
            totalPlayers: gameState.value.players.length,
          })

          // Presence: –ø–æ–º–µ—á–∞–µ–º –∏–≥—Ä–æ–∫–∞ –∫–∞–∫ present –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º —Ä–µ–º–∞–ø–µ
          const nowTs = Date.now()
          if (!gameState.value.presence) gameState.value.presence = {}
          if (!gameState.value.presenceMeta) gameState.value.presenceMeta = {}
          gameState.value.presence[newId] = 'present'
          gameState.value.presenceMeta[newId] = {
            lastSeen: Math.max(nowTs, gameState.value.presenceMeta[newId]?.lastSeen || 0),
          }
          // –ß–∏—Å—Ç–∏–º –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç–∞—Ä—ã–µ –º–µ—Ç–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è
          delete (gameState.value.presenceMeta[newId] as any).leftAt
          delete (gameState.value.presenceMeta[newId] as any).reason

          // Broadcast –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ (–¥–ª—è ARIA/—Ç–æ—Å—Ç–æ–≤)
          peerService.broadcastMessage(
            makeMessage(
              'user_joined_broadcast',
              { userId: newId, roomId: gameState.value.roomId, timestamp: nowTs },
              { roomId: gameState.value.roomId, fromId: gameState.value.hostId, ts: nowTs },
            ),
          )

          broadcastGameState()

          // –ö–†–ò–¢–ò–ß–ù–û: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É –æ —Å–º–µ–Ω–µ –µ–≥–æ ID
          peerService.sendMessage(
            newId,
            makeMessage(
              'player_id_updated',
              {
                oldId,
                newId,
                message: 'Your player ID has been updated due to reconnection',
              },
              { roomId: gameState.value.roomId, fromId: gameState.value.hostId, ts: Date.now() },
            ),
          )

          console.log(
            '‚úÖ HOST: Updated existing player and sent ID update notification:',
            existingPlayerBySavedId,
          )
          return
        } else {
          console.log(
            '‚ùå HOST: No existing player found with savedPlayerId, will create new player',
          )
        }
      } else {
        console.log('‚ùå HOST: No savedPlayerId provided in join_request')
      }

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–∞–∫–æ–≥–æ –Ω–∏–∫–Ω–µ–π–º–∞ –Ω–µ—Ç
      const now = Date.now()
      const newPlayerIndex = gameState.value.players.length // –∏–Ω–¥–µ–∫—Å –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –≤ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–∞–≤–µ
      const newPlayer: Player = {
        id: conn.peer,
        nickname,
        color: getColorByIndex(newPlayerIndex),
        isHost: false,
        joinedAt: now,
        authToken: generateAuthToken(conn.peer, gameState.value.roomId, now),
        votingCards: [...DEFAULT_CARDS.voting],
        bettingCards: [...DEFAULT_CARDS.betting],
      }

      console.log('Adding new player:', newPlayer)
      gameState.value.players.push(newPlayer)

      // Presence: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–∫ present –¥–ª—è –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
      if (!gameState.value.presence) gameState.value.presence = {}
      if (!gameState.value.presenceMeta) gameState.value.presenceMeta = {}
      gameState.value.presence[newPlayer.id] = 'present'
      gameState.value.presenceMeta[newPlayer.id] = { lastSeen: now }

      // –ü–µ—Ä–µ–¥ –ª—é–±—ã–º–∏ —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º phase/gameMode –≤ state
      gameState.value.phase = gamePhase.value
      gameMode.value = currentMode.value
      gameState.value.gameMode = currentMode.value

      // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —Ö–æ—Å—Ç –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–ª–∞–≥ isHost
      const currentHost = gameState.value.players.find(p => p.id === gameState.value.hostId)
      if (currentHost) {
        currentHost.isHost = true
        console.log('üîÑ HOST: Confirmed host flag for:', currentHost.nickname, currentHost.id)
      }
      
      // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —É –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö isHost = false
      gameState.value.players.forEach(p => {
        if (p.id !== gameState.value.hostId) {
          p.isHost = false
        }
      })

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º
      broadcastGameState()

      // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–∂–¥–æ–º—É —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –∫–ª–∏–µ–Ω—Ç—É
      // —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å, —á—Ç–æ –≤—Å–µ –≤–∏–¥—è—Ç –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ (Player A2)
      const existingClients = gameState.value.players.filter(p => p.id !== newPlayer.id && p.id !== gameState.value.hostId)
      console.log('üîÑ HOST: Forcing individual state updates to existing clients:', existingClients.map(p => p.id))
      
      // –°–Ω–∞—á–∞–ª–∞ —É–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —É —Ö–æ—Å—Ç–∞ –µ—Å—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å–æ –≤—Å–µ–º–∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏
      const connectedPeers = peerService.getConnectedPeers()
      console.log('üîó HOST: Current connections:', connectedPeers)
      
      // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
      const sendWithRetry = async (clientId: string, retries = 3) => {
        for (let attempt = 1; attempt <= retries; attempt++) {
          try {
            const hasConnection = peerService.getConnectedPeers().includes(clientId)
            console.log(`üîç HOST: Attempt ${attempt}/${retries} - Connection to ${clientId}: ${hasConnection}`)
            
            if (hasConnection) {
              peerService.sendMessage(
                clientId,
                makeMessage('game_state_update', { ...gameState.value }, {
                  roomId: gameState.value.roomId,
                  fromId: gameState.value.hostId,
                  ts: Date.now(),
                })
              )
              console.log(`‚úÖ HOST: Sent individual state update to client ${clientId} (attempt ${attempt})`)
              return // Success
            } else if (attempt < retries) {
              console.log(`‚è≥ HOST: No connection to ${clientId}, waiting for mesh sync...`)
              await new Promise(resolve => setTimeout(resolve, 500)) // Wait 500ms before retry
            }
          } catch (e) {
            console.warn(`‚ùå HOST: Failed to send individual state update to client ${clientId} (attempt ${attempt}):`, e)
            if (attempt < retries) {
              await new Promise(resolve => setTimeout(resolve, 500)) // Wait before retry
            }
          }
        }
        console.warn(`‚ö†Ô∏è HOST: Exhausted retries for client ${clientId}, relying on mesh protocol`)
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
      existingClients.forEach(client => {
        sendWithRetry(client.id).catch(e => {
          console.warn(`Failed to send retry updates to ${client.id}:`, e)
        })
      })
      
      // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û: –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å mesh-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π  
      // –µ—Å–ª–∏ –ø—Ä—è–º—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Ö–æ—Å—Ç->–∫–ª–∏–µ–Ω—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç
      setTimeout(() => {
        console.log('üï∏Ô∏è HOST: Attempting mesh-based state propagation as fallback')
        try {
          // –ü—Ä–æ—Å–∏–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–≤—à–µ–≥–æ—Å—è –∏–≥—Ä–æ–∫–∞ –ø–æ–º–æ—á—å —Å —Ä–∞—Å—Å—ã–ª–∫–æ–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ mesh
          const meshPropagationMessage = makeMessage('state_sync', {
            gameState: { ...gameState.value },
            timestamp: Date.now(),
            fromPlayerId: gameState.value.hostId,
            version: 1
          }, {
            roomId: gameState.value.roomId,
            fromId: gameState.value.hostId,
            ts: Date.now(),
          })
          
          peerService.sendMessage(conn.peer, meshPropagationMessage)
          console.log('üï∏Ô∏è HOST: Sent state_sync to new player for mesh propagation')
        } catch (e) {
          console.warn('üï∏Ô∏è HOST: Failed to send mesh propagation message:', e)
        }
      }, 1000) // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ mesh-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π

      // Unicast: —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–≤—à–µ–º—É—Å—è –∏–≥—Ä–æ–∫—É –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–Ω–∞–ø—à–æ—Ç (–≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–µ—Ä–≤–∏—á–Ω—ã–π —Å–Ω–∏–º–æ–∫)
      try {
        const snapshot = { ...gameState.value }
        peerService.sendMessage(
          conn.peer,
          makeMessage('game_state_update', snapshot, {
            roomId: gameState.value.roomId,
            fromId: gameState.value.hostId,
            ts: Date.now(),
          }),
        )
      } catch (e) {
        console.warn('Failed to unicast initial snapshot to new player', {
          peer: conn.peer,
          error: e,
        })
      }

      // Broadcast –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ (–¥–ª—è ARIA/—Ç–æ—Å—Ç–æ–≤ —É –≤—Å–µ—Ö)
      peerService.broadcastMessage(
        makeMessage(
          'user_joined_broadcast',
          { userId: newPlayer.id, roomId: gameState.value.roomId, timestamp: now },
          { roomId: gameState.value.roomId, fromId: gameState.value.hostId, ts: now },
        ),
      )

      console.log(
        'Updated players list:',
        gameState.value.players.map((p: Player) => ({ id: p.id, nickname: p.nickname })),
      )

      // –ù–æ–≤–∞—è –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞: —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ join –æ—Ç–ø—Ä–∞–≤–∏–º join_ok –∏ snapshot (unicast), —Å–æ—Ö—Ä–∞–Ω—è—è –æ–±—Ä–∞—Ç–Ω—É—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
      try {
        peerService.sendMessage(
          conn.peer,
          makeMessage(
            'join_ok',
            {
              roomId: gameState.value.roomId,
              hostId: gameState.value.hostId,
              serverTime: Date.now(),
              latestVersion: currentVersion?.value ?? 0,
            } as any,
            { roomId: gameState.value.roomId, fromId: gameState.value.hostId, ts: Date.now() },
          ),
        )

        // –ê–≤—Ç–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π –≤–µ—Ä—Å–∏–æ–Ω–Ω—ã–π —Å–Ω–∞–ø—à–æ—Ç —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ join_ok (unicast)
        try {
          const nowTs = Date.now()
          peerService.sendMessage(
            conn.peer,
            makeMessage(
              'state_snapshot' as any,
              {
                meta: {
                  roomId: gameState.value.roomId,
                  version: currentVersion.value || 0,
                  serverTime: nowTs,
                },
                state: { ...gameState.value },
              } as any,
              { roomId: gameState.value.roomId, fromId: gameState.value.hostId, ts: nowTs },
            ),
          )
        } catch (e) {
          console.warn('Failed to send authoritative state_snapshot to new player', e)
        }
      } catch (e) {
        console.warn('Failed to send join_ok', e)
      }
    })

    peerService.onMessage('light_up_request', (message: PeerMessage) => {
      const typed = message as Extract<PeerMessage, { type: 'light_up_request' }>
      console.log('üî• HOST: Received light_up_request:', typed.payload)
      const { playerId } = typed.payload

      console.log('üîç HOST: Processing light_up_request:', {
        requestedPlayerId: playerId,
        gameStarted: gameState.value.gameStarted,
        currentPlayers: gameState.value.players.map((p: any) => ({
          id: p.id,
          nickname: p.nickname,
        })),
        playerExists: gameState.value.players.some((p: any) => p.id === playerId),
        currentLitUpPlayerId: gameState.value.litUpPlayerId,
      })

      if (gameState.value.gameStarted) {
        const playerExists = gameState.value.players.some((p: any) => p.id === playerId)

        if (playerExists) {
          console.log('‚úÖ HOST: Processing light up for valid player:', playerId)
          gameState.value.litUpPlayerId = playerId

          console.log('üì¢ HOST: Broadcasting light up state:', {
            litUpPlayerId: gameState.value.litUpPlayerId,
            totalPlayers: gameState.value.players.length,
            playersInState: gameState.value.players.map((p: any) => ({
              id: p.id,
              nickname: p.nickname,
            })),
          })

          broadcastGameState()

          // –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
          setTimeout(() => {
            console.log('‚è∞ HOST: Clearing light up after timeout')
            gameState.value.litUpPlayerId = null
            broadcastGameState()
          }, 2000)
        } else {
          console.log('‚ùå HOST: Ignoring light_up_request - player not found:', {
            requestedId: playerId,
            availablePlayers: gameState.value.players.map((p: any) => p.id),
          })
        }
      } else {
        console.log('‚ùå HOST: Game not started, ignoring light_up_request')
      }
    })

    // –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ACK'–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è ‚Äî —É–±–∏—Ä–∞–µ—Ç —à—É–º –≤ –ª–æ–≥–∞—Ö –∏ –º–æ–∂–µ—Ç –ø—Ä–∏–≥–æ–¥–∏—Ç—å—Å—è –¥–ª—è —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤
    peerService.onMessage('state_ack' as any, (message: PeerMessage) => {
      try {
        const payload = (message as any).payload || {}
        console.log('üì• RECEIVED state_ack from client:', payload)
      } catch {}
    })

    peerService.onMessage('request_game_state', (message: PeerMessage, conn: any) => {
      if (!conn) return

      const req = (message as Extract<PeerMessage, { type: 'request_game_state' }>).payload as any
      console.log('Host sending game state to client:', conn.peer, 'request:', req, {
        players: gameState.value.players.map((p: Player) => ({
          id: p.id,
          nickname: p.nickname,
          isHost: p.isHost,
        })),
        roomId: gameState.value.roomId,
        hostId: gameState.value.hostId,
        phase: (gameState.value.phase ?? gamePhase.value) || 'lobby',
      })

      // –ü–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ phase/gameMode —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ —Ä–µ—Ñ–∞–º–∏
      gameState.value.phase = gamePhase.value
      gameState.value.gameMode = gameMode.value

      const snapshot = { ...gameState.value }

      // 1) Legacy: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º game_state_update (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
      peerService.sendMessage(
        conn.peer,
        makeMessage('game_state_update', snapshot, {
          roomId: snapshot.roomId,
          fromId: snapshot.hostId,
          ts: Date.now(),
        }),
      )

      // 2) –ê–≤—Ç–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π state_snapshot —Å –≤–µ—Ä—Å–∏–µ–π
      try {
        const nowTs = Date.now()
        peerService.sendMessage(
          conn.peer,
          makeMessage(
            'state_snapshot' as any,
            {
              meta: {
                roomId: snapshot.roomId,
                version: currentVersion.value || 0,
                serverTime: nowTs,
              },
              state: snapshot,
            } as any,
            { roomId: snapshot.roomId, fromId: snapshot.hostId, ts: nowTs },
          ),
        )
        console.log(
          'üîº Host sent state_snapshot in response to request_game_state to:',
          conn.peer,
          {
            version: currentVersion.value || 0,
            players: snapshot.players.length,
            phase: snapshot.phase,
            roomId: snapshot.roomId,
          },
        )
      } catch (e) {
        console.warn('Failed to send authoritative state_snapshot (request_game_state)', e)
      }
    })

    // -------- –ò–≥—Ä–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –∫ —Ö–æ—Å—Ç—É --------

    // –í—ã—Ç—è–≥–∏–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ ‚Äî —Ä–∞–∑—Ä–µ—à–µ–Ω–æ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–µ–º—É –∏–≥—Ä–æ–∫—É –≤ —Ñ–∞–∑–µ drawing_question
    peerService.onMessage('draw_question_request', async (message: PeerMessage, conn: any) => {
      const requesterId =
        conn?.peer ||
        (message as Extract<PeerMessage, { type: 'draw_question_request' }>).payload?.playerId
      console.log(
        'HOST: draw_question_request from',
        requesterId,
        'phase:',
        gamePhase.value,
        'currentTurnPlayerId:',
        gameState.value.currentTurnPlayerId,
      )
      if (!isHost.value) return
      if (gamePhase.value !== 'drawing_question') return
      if (!requesterId) return

      // –ü–µ—Ä–µ–¥–∞—ë–º requesterId –≤–Ω—É—Ç—Ä—å drawCard –¥–ª—è —Ç–æ—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
      const card = await drawCard(requesterId)
      if (!card) {
        console.log('Ignored draw_question_request: not allowed or no cards left')
        return
      }
      // drawCard —É–∂–µ –¥–µ–ª–∞–µ—Ç broadcast
    })

    // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ñ–∞–∑–µ/—Ä–∞—É–Ω–¥—É ‚Äî –¥–æ—Å—Ç—É–ø–Ω–æ –õ–Æ–ë–û–ú–£ –∏–≥—Ä–æ–∫—É –ø–æ—Å–ª–µ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞
    peerService.onMessage('next_round_request', (message: PeerMessage, conn: any) => {
      if (!isHost.value) return
      // –†–∞–∑—Ä–µ—à–∞–µ–º –∫–Ω–æ–ø–∫—É —Ç–æ–ª—å–∫–æ –≤ —Ñ–∞–∑–∞—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      if (gamePhase.value !== 'results' && gamePhase.value !== 'advanced_results') return

      // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ–ø—É—Å–∫–∞ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
      const m = message as Extract<PeerMessage, { type: 'next_round_request' }>
      const force = Boolean((m as any).payload?.force)

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞: –≤—Å–µ –¥–æ–ª–∂–Ω—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–≤–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è (–≥–æ–ª–æ—Å/—Å—Ç–∞–≤–∫–∞/–¥–æ–≥–∞–¥–∫–∞)
      const totalPlayers = gameState.value.players.length

      if (!force) {
        if ((gameState.value.gameMode ?? gameMode.value) === 'basic') {
          const allVoted = Object.keys(gameState.value.votes || {}).length >= totalPlayers
          const allBet = Object.keys(gameState.value.bets || {}).length >= totalPlayers
          const resultsReady = gamePhase.value === 'results' // —É–∂–µ –ø–æ—Å—á–∏—Ç–∞–Ω—ã –æ—á–∫–∏
          if (!(allVoted && allBet && resultsReady)) return
        } else {
          // advanced
          const votedCount = Object.keys(gameState.value.votes || {}).length
          const guessesCount = Object.keys(gameState.value.guesses || {}).filter(
            (pid) => pid !== gameState.value.answeringPlayerId,
          ).length
          const requiredGuesses = Math.max(0, totalPlayers - 1)
          const resultsReady = gamePhase.value === 'advanced_results'
          if (!(votedCount >= totalPlayers && guessesCount >= requiredGuesses && resultsReady))
            return
        }
      }

      // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥ —Ö–æ–¥–∞/—Å–±—Ä–æ—Å —Ä–∞—É–Ω–¥–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      finishRoundHostOnly(force)
    })

    // –û—á–µ—Ä–µ–¥—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤
    const voteQueue: Array<() => Promise<void>> = []
    let voteProcessing = false

    async function processVoteQueue() {
      if (voteProcessing) return
      voteProcessing = true
      while (voteQueue.length > 0) {
        const fn = voteQueue.shift()
        if (fn) {
          await fn()
        }
      }
      voteProcessing = false
    }

    // –°–µ–∫—Ä–µ—Ç–Ω—ã–µ/–æ–±—ã—á–Ω—ã–µ –≥–æ–ª–æ—Å–∞
    peerService.onMessage('submit_vote', (message: PeerMessage, conn: any) => {
      if (!isHost.value) return
      voteQueue.push(async () => {
        // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –æ–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞: targetIds (–Ω–æ–≤—ã–π) –∏ votes (—Å—Ç–∞—Ä—ã–π)
        const m = message as Extract<PeerMessage, { type: 'submit_vote' }>
        const voterId = (m.payload as any)?.voterId
        const rawVotes = (m.payload as any)?.targetIds ?? (m.payload as any)?.votes
        const stateVersion = (m.payload as any)?.stateVersion
        if (!voterId || !Array.isArray(rawVotes)) return
        if (gamePhase.value !== 'voting' && gamePhase.value !== 'secret_voting') return

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if (
          typeof stateVersion === 'number' &&
          typeof gameState.value.stateVersion === 'number' &&
          stateVersion !== gameState.value.stateVersion
        ) {
          // –í–µ—Ä—Å–∏—è –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –∫–ª–∏–µ–Ω—Ç—É
          if (conn) {
            peerService.sendMessage(
              conn.peer,
              makeMessage(
                'connection_error',
                {
                  code: 'version_mismatch',
                  message: '–í–µ—Ä—Å–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç',
                },
                {
                  roomId: gameState.value.roomId,
                  fromId: gameState.value.hostId,
                  ts: Date.now(),
                },
              ),
            )
          }
          return
        }

        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –º–∞—Å—Å–∏–≤ –≥–æ–ª–æ—Å–æ–≤ (–º–∞–∫—Å 2, —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏ –Ω–µ –≥–æ–ª–æ—Å—É–µ–º –∑–∞ —Å–µ–±—è)
        const uniqueVotes = Array.from(new Set(rawVotes)).slice(0, 2)
        const validVotes = uniqueVotes.filter((id) => id && id !== voterId)

        if (!gameState.value.votes) gameState.value.votes = {}
        gameState.value.votes[voterId] = validVotes

        // --- –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É ---
        if (conn) {
          peerService.sendMessage(
            conn.peer,
            makeMessage(
              'vote_ack',
              { voterId, targetIds: validVotes },
              {
                roomId: gameState.value.roomId,
                fromId: gameState.value.hostId,
                ts: Date.now(),
              },
            ),
          )
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º bets –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Ñ–∞–∑—ã, —á—Ç–æ–±—ã UI –º–æ–≥ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –¥–µ—Ñ–æ–ª—Ç (¬´-¬ª) –∏ –æ–±–Ω–æ–≤–ª—è—Ç—å –ø–æ –º–µ—Ä–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è —Å—Ç–∞–≤–æ–∫
        if (!gameState.value.bets) gameState.value.bets = {}

        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≥–æ–ª–æ—Å–∞ –¥–ª—è UI –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        const voteCounts: Record<string, number> = {}
        Object.values(gameState.value.votes).forEach((voteArr: string[]) => {
          voteArr.forEach((targetId) => {
            voteCounts[targetId] = (voteCounts[targetId] || 0) + 1
          })
        })
        gameState.value.voteCounts = voteCounts

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤, —á—Ç–æ–±—ã –æ–Ω–∏ —É–≤–∏–¥–µ–ª–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
        broadcastGameState()

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≤—Å–µ –ª–∏ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ (—Å—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∏–≥—Ä–æ–∫–æ–≤)
        const playersCount = gameState.value.players.length
        const votesCount = Object.keys(gameState.value.votes).length

        if (votesCount >= playersCount) {
          if (gameMode.value === 'basic') {
            // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å—Ç–∞–≤–∫–∞–º
            gamePhase.value = 'betting'
            gameState.value.phase = 'betting'

            // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –≤ bets –µ—Å—Ç—å –∫–ª—é—á–∏ –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ (–∑–Ω–∞—á–µ–Ω–∏–µ undefined –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º, UI –∏—Å–ø–æ–ª—å–∑—É–µ—Ç bets[p.id] || '-')
            gameState.value.players.forEach((p) => {
              if (gameState.value.bets![p.id] === undefined) {
                // –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º, –ø—Ä–æ—Å—Ç–æ —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –æ–±—ä–µ–∫—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
              }
            })

            broadcastGameState()
          } else {
            // advanced: –ø–µ—Ä–µ—Ö–æ–¥ –∏–∑ secret_voting –≤ answering –≤—ã–ø–æ–ª–Ω—è–µ–º –û–î–ò–ù –†–ê–ó –ø–æ —Ñ–∞–∫—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
            // –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–≤–æ–π–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞/–≥–æ–Ω–æ–∫
            if (gamePhase.value !== 'secret_voting') {
              return
            }
            if (gameState.value.answeringPlayerId) {
              return
            }

            const maxVotes = Math.max(0, ...Object.values(voteCounts))
            const leaders = Object.entries(voteCounts)
              .filter(([_, c]) => c === maxVotes && maxVotes > 0)
              .map(([pid]) => pid)
            gameState.value.answeringPlayerId = leaders[0] || null

            gamePhase.value = 'answering'
            gameState.value.phase = 'answering'
            broadcastGameState()
          }
        }
      })
      processVoteQueue()
    })

    // –°—Ç–∞–≤–∫–∏ –≤ basic
    peerService.onMessage('submit_bet', (message: PeerMessage, conn: any) => {
      if (!isHost.value) return
      if (gameMode.value !== 'basic') return
      if (gamePhase.value !== 'betting') return

      const payload = (message as Extract<PeerMessage, { type: 'submit_bet' }>).payload
      const playerId = (payload as any).playerId as string | undefined
      const bet = (payload as any).bet as ('0' | '¬±' | '+') | undefined

      if (!playerId || !bet) return

      // –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è: –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ–º –º–µ–Ω—è—Ç—å —Å—Ç–∞–≤–∫—É –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–∏–Ω—è—Ç–∏—è
      if (!gameState.value.bets) gameState.value.bets = {}
      if (gameState.value.bets[playerId]) {
        // –ò–≥—Ä–æ–∫ —É–∂–µ —Å–¥–µ–ª–∞–ª —Å—Ç–∞–≤–∫—É ‚Äî –ø–æ–≤—Ç–æ—Ä–Ω—ã–π submit –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        console.log('üö´ BETTING: Duplicate bet ignored for player:', playerId)
        return
      }

      gameState.value.bets[playerId] = bet
      console.log('üí∞ BETTING: Bet received from player:', playerId, 'bet:', bet)

      const playersCount = gameState.value.players.length
      const betsCount = Object.keys(gameState.value.bets).length
      console.log('üí∞ BETTING: Bets progress:', betsCount, '/', playersCount)

      if (betsCount >= playersCount) {
        // –í—Å–µ –ø–æ—Å—Ç–∞–≤–∏–ª–∏ ‚Äî —Å—á–∏—Ç–∞–µ–º —Ä–∞—É–Ω–¥ –∏ –≤ results
        console.log('üí∞ BETTING: All players bet, transitioning to results')
        processRound()
        gamePhase.value = 'results'
        gameState.value.phase = 'results'
        console.log('üí∞ BETTING: Transitioned to results phase')
      }

      // –í–∞–∂–Ω–æ: —Å—Ä–∞–∑—É —Ä–∞—Å—Å—ã–ª–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã —É –∫–ª–∏–µ–Ω—Ç–∞ –æ—Ç–æ–±—Ä–∞–∑–∏–ª–∞—Å—å –≤—ã–±—Ä–∞–Ω–Ω–∞—è —Å—Ç–∞–≤–∫–∞
      broadcastGameState()
      console.log('üí∞ BETTING: State broadcasted')
    })

    // –û—Ç–≤–µ—Ç –æ—Ç–≤–µ—á–∞—é—â–µ–≥–æ (advanced)
    peerService.onMessage('submit_answer', (message: PeerMessage, conn: any) => {
      if (!isHost.value) return
      if (gameMode.value !== 'advanced') return
      if (gamePhase.value !== 'answering') return
      const payload = (message as Extract<PeerMessage, { type: 'submit_answer' }>).payload
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –¥–æ—Å—Ç—É–ø –∫ –ø–æ–ª—è–º —Å—Ç—Ä–æ–≥–æ –ø–æ —Ç–∏–ø—É SubmitAnswerPayload
      const playerId = (payload as any).playerId as string | undefined
      const answer = (payload as any).answer as string | undefined
      if (!playerId || typeof answer !== 'string') return

      // –¢–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—á–∞—é—â–∏–π –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç
      if (playerId !== gameState.value.answeringPlayerId) return

      gameState.value.advancedAnswer = answer
      gamePhase.value = 'guessing'
      gameState.value.phase = 'guessing'
      broadcastGameState()
    })

    // –î–æ–≥–∞–¥–∫–∏ (advanced)
    peerService.onMessage('submit_guess', (message: PeerMessage, conn: any) => {
      if (!isHost.value) return
      if (gameMode.value !== 'advanced') return
      if (gamePhase.value !== 'guessing') return
      const payload = (message as Extract<PeerMessage, { type: 'submit_guess' }>).payload
      const playerId = (payload as any).playerId as string | undefined
      const guess = (payload as any).guess as string | undefined
      if (!playerId || typeof guess !== 'string') return

      if (!gameState.value.guesses) gameState.value.guesses = {}
      gameState.value.guesses[playerId] = guess

      const playersCount = gameState.value.players.length
      const requiredGuesses = Math.max(0, playersCount - 1) // –≤—Å–µ –∫—Ä–æ–º–µ –æ—Ç–≤–µ—á–∞—é—â–µ–≥–æ
      const guessesCount = Object.keys(gameState.value.guesses).filter(
        (pid) => pid !== gameState.value.answeringPlayerId,
      ).length

      // –ö–æ–≥–¥–∞ –ø–æ–ª—É—á–∏–ª–∏ –≤—Å–µ –¥–æ–≥–∞–¥–∫–∏, –ü–ï–†–ï–•–û–î–ò–ú –í selecting_winners, –±–µ–∑ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –æ—á–∫–æ–≤
      if (guessesCount >= requiredGuesses) {
        gamePhase.value = 'selecting_winners'
        gameState.value.phase = 'selecting_winners'
        if (!gameState.value.roundWinners) gameState.value.roundWinners = []
      }

      broadcastGameState()
    })

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –≤ advanced –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ (—Å—Ç—Ä–æ–≥–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∞)
    peerService.onMessage('submit_winners', (message: PeerMessage) => {
      if (!isHost.value) return
      if ((gameState.value.gameMode ?? gameMode.value) !== 'advanced') return
      if ((gameState.value.phase ?? gamePhase.value) !== 'selecting_winners') return

      const payload = (message as Extract<PeerMessage, { type: 'submit_winners' }>).payload as any
      const chooserId = payload?.chooserId as string | undefined
      const rawWinners = (payload?.winners as string[] | undefined) || []

      // –°—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –≤—ã–±–∏—Ä–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∞
      if (!chooserId || chooserId !== gameState.value.answeringPlayerId) return

      // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è winners: —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ, —Ç–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–∏ —Å guesses, –∏—Å–∫–ª—é—á–∞—è chooserId
      const validSet = new Set(
        rawWinners.filter(
          (id) =>
            id &&
            id !== chooserId &&
            !!(gameState.value.guesses && gameState.value.guesses[id] !== undefined) &&
            gameState.value.players.some((p) => p.id === id),
        ),
      )
      const winners = Array.from(validSet)

      // –ü—Ä–∏–º–µ–Ω—è–µ–º –ª–æ–≥–∏–∫—É –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ —Ñ–∞–∑—ã
      submitWinners(winners)
    })

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ host discovery
    setupHostDiscoveryHandlers()

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ mesh-–ø—Ä–æ—Ç–æ–∫–æ–ª–∞
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
  const setupClientMessageHandlers = () => {
    console.log('Setting up client message handlers')

    // –ö–†–ò–¢–ò–ß–ù–û: –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π –Ω–æ–≤—ã—Ö
    peerService.clearMessageHandlers()
    console.log('Cleared old message handlers before setting up client handlers')

    // –ü–µ—Ä–µ–¥ –æ–∂–∏–¥–∞–Ω–∏–µ–º —Å–Ω–∞–ø—à–æ—Ç–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –±–∞—Ä—å–µ—Ä –∏ –≤–∫–ª—é—á–∞–µ–º —Ç–∞–π–º–µ—Ä —Ñ–æ–ª–±—ç–∫–∞
    try {
      if (_snapshotTimeoutHandle) {
        clearTimeout(_snapshotTimeoutHandle)
        _snapshotTimeoutHandle = null
      }
      _acceptLegacyAsInit.value = false
      initReceived.value = false
      _snapshotTimeoutHandle = window.setTimeout(() => {
        if (!initReceived.value) {
          _acceptLegacyAsInit.value = true
        }
      }, SNAPSHOT_TIMEOUT_MS)
    } catch {}

    // Versioned sync handlers (prioritized)
    peerService.onMessage('state_snapshot', (message: PeerMessage) => {
      if (isHost.value) return
      const payload = (message as Extract<PeerMessage, { type: 'state_snapshot' }>).payload as any
      const meta = payload?.meta
      console.log('üì• CLIENT received state_snapshot:', {
        meta,
        hasRoom: !!gameState.value.roomId,
        currentRoom: gameState.value.roomId || '(empty)',
        incomingRoom: meta?.roomId,
        playersInPayload: Array.isArray(payload?.state?.players)
          ? payload.state.players.length
          : -1,
        phase: payload?.state?.phase,
      })
      if (!meta || (gameState.value.roomId && meta.roomId !== gameState.value.roomId)) {
        console.warn('state_snapshot ignored due to room mismatch or missing meta')
        return
      }
      // Snapshot barrier: –ø—Ä–∏–º–µ–Ω—è–µ–º —Ü–µ–ª–∏–∫–æ–º
      const incoming = { ...(payload.state || {}) }
      // –ó–∞—â–∏—Ç–∞: —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è
      if (incoming.hostId && !incoming.players?.some((p: Player) => p.id === incoming.hostId)) {
        console.warn(
          'Snapshot hostId not found among players, will keep as-is but UI may not highlight host',
        )
      }
      gameState.value = incoming
      // –î—É–±–ª–∏—Ä—É–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—ã–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
      hostId.value = incoming.hostId || hostId.value
      roomId.value = incoming.roomId || roomId.value

      currentVersion.value = typeof meta.version === 'number' ? meta.version : 0
      lastServerTime.value = Math.max(lastServerTime.value, meta.serverTime || Date.now())
      initReceived.value = true

      console.log('‚úÖ CLIENT applied snapshot:', {
        players: gameState.value.players.length,
        myPlayerId: myPlayerId.value,
        hostId: hostId.value,
        roomId: roomId.value,
        phase: gameState.value.phase,
      })

      // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä –æ–∂–∏–¥–∞–Ω–∏—è —Å–Ω–∞–ø—à–æ—Ç–∞ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ª–µ–≥–∞—Å–∏-—Ñ–ª–∞–≥
      if (_snapshotTimeoutHandle) {
        clearTimeout(_snapshotTimeoutHandle)
        _snapshotTimeoutHandle = null
      }
      _acceptLegacyAsInit.value = false

      // Drain buffered diffs
      drainPending()
      // Ack
      sendAck(currentVersion.value)
    })

    peerService.onMessage('state_diff', (message: PeerMessage) => {
      if (isHost.value) return
      const payload = (message as Extract<PeerMessage, { type: 'state_diff' }>).payload as any
      const meta = payload?.meta
      console.log('üì• CLIENT received state_diff:', {
        meta,
        hasInit: initReceived.value,
        currentVersion: currentVersion.value,
      })
      if (!meta || (gameState.value.roomId && meta.roomId !== gameState.value.roomId)) {
        console.warn('state_diff ignored due to room mismatch or missing meta')
        return
      }
      if (!initReceived.value) {
        // buffer until snapshot
        if (typeof meta.version === 'number') {
          pendingDiffs.value.set(meta.version, payload)
          console.log('Buffered diff before init, version:', meta.version)
        }
        return
      }
      // Gap detection
      const expected = (currentVersion.value || 0) + 1
      if (meta.version !== expected) {
        console.warn('Diff version gap detected, expected:', expected, 'got:', meta.version)
        if (typeof meta.version === 'number') pendingDiffs.value.set(meta.version, payload)
        // request resync if we see jump ahead without pending chain
        requestResync(currentVersion.value)
        return
      }
      // Apply
      applyDiff(payload.patch)
      currentVersion.value = meta.version
      lastServerTime.value = Math.max(lastServerTime.value, meta.serverTime || Date.now())
      console.log('‚úÖ CLIENT applied diff:', { newVersion: currentVersion.value })
      // Drain any consecutive buffered diffs
      drainPending()
      // Ack
      sendAck(currentVersion.value)
    })

    // –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–∏
    peerService.onMessage('user_joined_broadcast', (message: PeerMessage) => {
      const {
        userId,
        roomId: rid,
        timestamp,
      } = (message as Extract<PeerMessage, { type: 'user_joined_broadcast' }>).payload as any
      if (!gameState.value.presence) gameState.value.presence = {}
      if (!gameState.value.presenceMeta) gameState.value.presenceMeta = {}
      gameState.value.presence[userId] = 'present'
      gameState.value.presenceMeta[userId] = {
        lastSeen: Math.max(
          timestamp || Date.now(),
          gameState.value.presenceMeta[userId]?.lastSeen || 0,
        ),
      }
      // –ó–¥–µ—Å—å –ø–æ–∑–∂–µ –±—É–¥–µ—Ç UI: ARIA-live/—Ç–æ—Å—Ç—ã
    })

    peerService.onMessage('user_left_broadcast', (message: PeerMessage) => {
      const {
        userId,
        roomId: rid,
        timestamp,
        reason,
      } = (message as Extract<PeerMessage, { type: 'user_left_broadcast' }>).payload as any
      if (!gameState.value.presence) gameState.value.presence = {}
      if (!gameState.value.presenceMeta) gameState.value.presenceMeta = {}
      // –ò–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ –ø–æ–º–µ—á–∞–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º
      const ts = timestamp || Date.now()
      const prevMeta = gameState.value.presenceMeta[userId]
      const alreadyAbsent =
        gameState.value.presence?.[userId] === 'absent' && prevMeta?.leftAt && prevMeta.leftAt >= ts
      if (!alreadyAbsent) {
        gameState.value.presence[userId] = 'absent'
        gameState.value.presenceMeta[userId] = {
          lastSeen: Math.max(ts, prevMeta?.lastSeen || 0),
          leftAt: ts,
          reason: reason || 'explicit_leave',
        }
      }
      // ARIA —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      ariaAnnounce('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∏–Ω—É–ª –∫–æ–º–Ω–∞—Ç—É')
    })

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ–±—Ä–æ–≤–æ–ª—å–Ω–æ–º —É—Ö–æ–¥–µ —Ö–æ—Å—Ç–∞
    peerService.onMessage('host_left_room', (message: PeerMessage) => {
      if (isHost.value) return // –•–æ—Å—Ç –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      
      const { hostId: leftHostId, reason } = (message as Extract<PeerMessage, { type: 'host_left_room' }>).payload
      
      console.log('üì¢ CLIENT received host departure notification:', {
        leftHostId,
        reason,
        currentHostId: hostId.value,
        myId: myPlayerId.value
      })
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –Ω–∞—à —Ö–æ—Å—Ç –∫–æ—Ç–æ—Ä—ã–π —É—Ö–æ–¥–∏—Ç
      if (leftHostId === hostId.value) {
        console.log('üö™ Host left voluntarily - ending game for all players')
        
        // –•–æ—Å—Ç —É—à–µ–ª –¥–æ–±—Ä–æ–≤–æ–ª—å–Ω–æ - –∏–≥—Ä–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –¥–ª—è –≤—Å–µ—Ö
        endGameDueToHostLoss()
      }
    })


    peerService.onMessage('game_state_update', (message: PeerMessage) => {
      // –ó–∞—â–∏—Ç–∞: –ø—Ä–∏–Ω–∏–º–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º—ã –∫–ª–∏–µ–Ω—Ç (—É —Ö–æ—Å—Ç–∞ –∏—Å—Ç–∏–Ω–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏)
      if (isHost.value) return

      const newState = {
        ...(message as Extract<PeerMessage, { type: 'game_state_update' }>).payload,
      }
      console.log('üì• CLIENT received game_state_update:', {
        players: Array.isArray(newState.players)
          ? newState.players.map((p: Player) => ({ id: p.id, nick: p.nickname }))
          : [],
        hostId: newState.hostId,
        roomId: newState.roomId,
        phase: newState.phase,
      })

      // Fallback –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π —Å–Ω–∞–ø—à–æ—Ç –≤–æ–≤—Ä–µ–º—è,
      // –ø—Ä–∏–Ω–∏–º–∞–µ–º –ø–µ—Ä–≤—ã–π legacy –∞–ø–¥–µ–π—Ç –∫–∞–∫ –ø–µ—Ä–≤–∏—á–Ω—ã–π —Å–Ω–∏–º–æ–∫
      if (!initReceived.value && _acceptLegacyAsInit.value) {
        gameState.value = newState
        currentVersion.value = 0
        lastServerTime.value = Date.now()
        initReceived.value = true
        if (_snapshotTimeoutHandle) {
          clearTimeout(_snapshotTimeoutHandle)
          _snapshotTimeoutHandle = null
        }
        _acceptLegacyAsInit.value = false
        console.log(
          'üÜó CLIENT accepted legacy game_state_update as initial snapshot (timeout fallback)',
        )
      }

      // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –∫–µ—à–∏—Ä—É–µ–º —Å–Ω–∞–ø—à–æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç —Ö–æ—Å—Ç–∞, —Å TTL
      try {
        storageSafe.setWithTTL(
          'game',
          'hostGameStateSnapshot',
          { ts: Date.now(), state: newState },
          HOST_SNAPSHOT_TTL,
        )
      } catch (e) {
        console.warn('Failed to cache host snapshot on client', e)
      }
      // –û–±–Ω–æ–≤–∏–º —É—Å—Ç–æ–π—á–∏–≤—ã–π roomId
      try {
        if (newState?.roomId) {
          savePersistentRoomId(newState.roomId)
        }
      } catch {}

      // –ö–†–ò–¢–ò–ß–ù–û: –í–∞–ª–∏–¥–∏—Ä—É–µ–º litUpPlayerId –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
      if (newState.litUpPlayerId) {
        console.log('üîç VALIDATING litUpPlayerId:', {
          litUpPlayerId: newState.litUpPlayerId,
          playersInState: newState.players.map((p: Player) => ({ id: p.id, nickname: p.nickname })),
          myPlayerId: myPlayerId.value,
          totalPlayers: newState.players.length,
        })

        const litUpPlayerExists = newState.players.some(
          (p: Player) => p.id === newState.litUpPlayerId,
        )
        if (!litUpPlayerExists) {
          console.log('üßπ Received invalid litUpPlayerId, clearing it:', {
            invalidId: newState.litUpPlayerId,
            availablePlayerIds: newState.players.map((p: Player) => p.id),
            playersWithNicknames: newState.players.map((p: Player) => ({
              id: p.id,
              nickname: p.nickname,
            })),
          })
          newState.litUpPlayerId = null
        } else {
          console.log('‚úÖ litUpPlayerId is valid, keeping it:', newState.litUpPlayerId)
        }
      }

      // –û—Ç–º–µ—Ç–∏–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ —Å–≤–µ–∂–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äî –º–æ–∂–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Ä–µ—Ç—Ä–∞–∏
      try {
        gotFreshState.value = true
      } catch {}

      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –ø–æ–ª–µ–π –≤ –ª–æ–∫–∞–ª—å–Ω—ã–µ refs
      if (newState.hostId) hostId.value = newState.hostId
      if (newState.roomId) roomId.value = newState.roomId

      gameState.value = newState

      console.log('‚úÖ CLIENT applied game_state_update:', {
        players: gameState.value.players.length,
        hostId: hostId.value,
        roomId: roomId.value,
        phase: gameState.value.phase,
      })
    })

    peerService.onMessage('player_id_updated', (message: PeerMessage) => {
      const {
        oldId,
        newId,
        message: updateMessage,
      } = (message as Extract<PeerMessage, { type: 'player_id_updated' }>).payload
      console.log('üîÑ CLIENT: Received player_id_updated message:', {
        oldId,
        newId,
        updateMessage,
      })

      if (myPlayerId.value === oldId) {
        console.log('‚úÖ CLIENT: Updating myPlayerId from old ID to new ID:', {
          oldId,
          newId,
        })
        myPlayerId.value = newId
        // –ö–†–ò–¢–ò–ß–ù–û: –æ–±–Ω–æ–≤–ª—è–µ–º —É—Å—Ç–æ–π—á–∏–≤—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
        try {
          saveStablePlayerId(newId)
        } catch {}
      } else {
        console.log('‚ùå CLIENT: Ignoring player_id_updated message - old ID does not match:', {
          currentId: myPlayerId.value,
          oldId,
        })
      }
    })

    peerService.onMessage('heartbeat', (message: PeerMessage) => {
      const { hostId: heartbeatHostId } = (message as Extract<PeerMessage, { type: 'heartbeat' }>)
        .payload
      peerService.handleHeartbeat(heartbeatHostId)
    })

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ callback –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Ö–æ—Å—Ç–∞
    peerService.onHostDisconnected(() => {
      onHostDisconnectedSafe()
    })

    // –ú–∏–≥—Ä–∞—Ü–∏—è —Ö–æ—Å—Ç–∞ —É–¥–∞–ª–µ–Ω–∞ - —Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ host discovery
    setupHostDiscoveryHandlers()

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ mesh-–ø—Ä–æ—Ç–æ–∫–æ–ª–∞
  }

  // –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
  const broadcastGameState = () => {
    if (isHost.value) {
      // –î—É–±–ª–∏—Ä—É–µ–º phase/—Ä–µ–∂–∏–º –≤ –æ–±—ä–µ–∫—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
      gameState.value.phase = gamePhase.value
      // –í–µ–¥—É—â–∏–π —Ä–µ–∂–∏–º –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –ø–æ currentRound, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∏–∑ currentMode
      gameMode.value = currentMode.value
      gameState.value.gameMode = currentMode.value

      // –í—Å–µ–≥–¥–∞ —à–ª–µ–º —Å–≤–µ–∂—É—é –∫–æ–ø–∏—é, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –º—É—Ç–∞—Ü–∏–π –ø–æ —Å—Å—ã–ª–∫–µ —É –∫–ª–∏–µ–Ω—Ç–æ–≤
      const snapshot = { ...gameState.value }

      // –ü–∏—à–µ–º —Å–Ω–∞–ø—à–æ—Ç —Ö–æ—Å—Ç–∞ –≤ storageSafe —Å TTL, —á—Ç–æ–±—ã –∫–ª–∏–µ–Ω—Ç—ã –º–æ–≥–ª–∏ ¬´—è–∫–æ—Ä–∏—Ç—å—Å—è¬ª –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
      try {
        storageSafe.setWithTTL(
          'game',
          'hostGameStateSnapshot',
          { ts: Date.now(), state: snapshot },
          HOST_SNAPSHOT_TTL,
        )
      } catch (e) {
        console.warn('Failed to persist host snapshot', e)
      }

      peerService.broadcastMessage(
        makeMessage('game_state_update', snapshot, {
          roomId: gameState.value.roomId,
          fromId: gameState.value.hostId,
          ts: Date.now(),
        }),
      )
    }
  }

  // --- –£–¥–∞–ª–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Ñ—É–Ω–∫—Ü–∏–∏ ---

  // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –∏–≥—Ä–æ–∫–∞
  const lightUpPlayer = () => {
    console.log('lightUpPlayer called:', {
      gameStarted: gameState.value.gameStarted,
      myPlayerId: myPlayerId.value,
      isHost: isHost.value,
      hostId: hostId.value,
      connectionStatus: connectionStatus.value,
    })

    if (!gameState.value.gameStarted || !myPlayerId.value) {
      console.log('lightUpPlayer aborted: game not started or no player ID')
      return
    }

    if (isHost.value) {
      console.log('Host processing light up locally')
      // –•–æ—Å—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –ª–æ–∫–∞–ª—å–Ω–æ
      gameState.value.litUpPlayerId = myPlayerId.value
      broadcastGameState()

      setTimeout(() => {
        gameState.value.litUpPlayerId = null
        broadcastGameState()
      }, 2000)
    } else {
      console.log('Client sending light_up_request to host:', hostId.value)
      // –ö–ª–∏–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å —Ö–æ—Å—Ç—É
      peerService.sendMessage(
        hostId.value,
        makeMessage(
          'light_up_request',
          { playerId: myPlayerId.value },
          {
            roomId: roomId.value || gameState.value.roomId,
            fromId: myPlayerId.value,
            ts: Date.now(),
          },
        ),
      )
    }
  }


  // –ü–æ–ø—ã—Ç–∫–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –æ—Ç–∫–ª—é—á–∏–≤—à–µ–º—É—Å—è —Ö–æ—Å—Ç—É
  const attemptReconnectionToHost = async (targetHostId: string) => {
    console.log('üîÑ Attempting to reconnect to host:', targetHostId)

    const maxAttempts = 5
    const attemptInterval = 3000 // 3 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏

    for (let attempt = 1; attempt <= maxAttempts; attempt++) {
      console.log(`üîç Reconnection attempt ${attempt}/${maxAttempts} to host:`, targetHostId)

      try {
        // –ü–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π: –±—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–∏–º–æ—Å—Ç–∏
        const reachable = await tryConnectToKnownHost(targetHostId)
        if (!reachable) {
          console.log('‚õî Host not reachable, break reconnection loop early')
          break
        }

        await peerService.connectToHost(targetHostId)

        // –ï—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ - –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
        peerService.setCurrentHostId(targetHostId)
        peerService.setAsClient()
        setupClientMessageHandlers()

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º —É—Å—Ç–æ–π—á–∏–≤—ã–º ID –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        peerService.sendMessage(
          targetHostId,
          makeMessage(
            'join_request',
            {
              nickname: myNickname.value,
              savedPlayerId: loadStablePlayerId() || myPlayerId.value,
            },
            {
              roomId: roomId.value || gameState.value.roomId,
              fromId: myPlayerId.value,
              ts: Date.now(),
            },
          ),
        )

        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
        peerService.sendMessage(
          targetHostId,
          makeMessage(
            'request_game_state',
            { requesterId: myPlayerId.value },
            {
              roomId: roomId.value || gameState.value.roomId,
              fromId: myPlayerId.value,
              ts: Date.now(),
            },
          ),
        )

        connectionStatus.value = 'connected'
        console.log('‚úÖ Successfully reconnected to host:', targetHostId)
        return
      } catch (error: unknown) {
        if (error instanceof Error) {
          console.error('Failed to reconnect to host:', error.message)
        } else {
          console.error('An unknown error occurred during reconnection.')
        }
        console.log(`‚ùå Reconnection attempt ${attempt} failed`)
        if (attempt < maxAttempts) {
          console.log(`‚è≥ Waiting ${attemptInterval}ms before next attempt...`)
          await new Promise((resolve) => setTimeout(resolve, attemptInterval))
        }
      }
    }

    // –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ—É–¥–∞—á–Ω—ã ‚Äî –Ω–µ –æ—Å—Ç–∞—ë–º—Å—è –≤ –ª–æ–∂–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏, —Å—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π discovery
    console.log('‚ùå All reconnection attempts failed. Starting universal discovery...')
    try {
      const discovered = await universalHostDiscovery({
        myPlayerId: myPlayerId.value,
        myNickname: myNickname.value,
        isHost: false,
        hostId: hostId.value,
        roomId: roomId.value,
        gameState: gameState.value,
      } as any)
      if (discovered) {
        console.log('üîÅ Discovered new host after reconnection failures:', discovered.currentHostId)
        await reconnectToDiscoveredHost(discovered)
        return
      }
    } catch (e) {
      console.warn('Universal discovery after reconnection failures failed', e)
    }

    // –ò–Ω–∞—á–µ ‚Äî –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–∫–ª—é—á–µ–Ω–æ –∏ –ø–µ—Ä–µ–¥–∞—ë–º –¥–∞–ª—å—à–µ –ø–æ –ø–∞–π–ø–ª–∞–π–Ω—É (grace/migration)
    connectionStatus.value = 'disconnected'
  }

  // –ú—é—Ç–µ–∫—Å –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  const reconnectionMutex = new Mutex()

  // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞: –µ—Å–ª–∏ —Ö–æ—Å—Ç —É—à–µ–ª –¥–æ–±—Ä–æ–≤–æ–ª—å–Ω–æ - –∏–≥—Ä–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è, –µ—Å–ª–∏ —Å–µ—Ç—å –º–æ—Ä–≥–Ω—É–ª–∞ - –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
  const onHostDisconnectedSafe = async () => {
    // –ü–†–û–í–ï–†–ö–ê –ù–ê –î–£–ë–õ–ò–†–û–í–ê–ù–ò–ï: –ï—Å–ª–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É–∂–µ –∏–¥–µ—Ç, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –≤—ã–∑–æ–≤—ã
    if (reconnectionMutex.isLocked()) {
      console.log('üö´ HOST RECONNECTION: Already in progress, ignoring duplicate call')
      return
    }

    console.log('üîê HOST RECONNECTION: Acquiring mutex lock')
    return await reconnectionMutex.runExclusive(async () => {
      console.log('‚úÖ HOST RECONNECTION: Mutex acquired, starting reconnection process')
      
      // –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –¥–æ–±—Ä–æ–≤–æ–ª—å–Ω—ã–π –ª–∏ —ç—Ç–æ –≤—ã—Ö–æ–¥
      if (isVoluntaryLeaving) {
        console.log('üö™ VOLUNTARY LEAVE: Skipping reconnection - player is leaving voluntarily')
        return
      }
      
      console.log('üö® HOST DISCONNECTION DETECTED - attempting reconnection to same host')
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      connectionStatus.value = 'connecting'
      
      const targetHostId = hostId.value || gameState.value.hostId
      
      if (!targetHostId) {
        console.error('‚ùå No host ID available for reconnection')
        endGameDueToHostLoss()
        return
      }

      // –ü–æ–ø—ã—Ç–∫–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ç–æ–º—É –∂–µ —Ö–æ—Å—Ç—É (60 –ø–æ–ø—ã—Ç–æ–∫ = 1 –º–∏–Ω—É—Ç–∞)
      console.log('üîÑ Starting reconnection attempts to host:', targetHostId, '(60 attempts, 1 second interval)')
      let reconnected = false
      
      for (let attempt = 1; attempt <= 60; attempt++) {
        try {
          console.log(`üîÑ Reconnection attempt ${attempt}/60`)
          
          // –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Ç–æ–º—É –∂–µ —Ö–æ—Å—Ç—É
          await peerService.connectToHost(targetHostId)
          
          // –ï—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ - –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
          peerService.setCurrentHostId(targetHostId)
          peerService.setAsClient()
          setupClientMessageHandlers()

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
          peerService.sendMessage(
            targetHostId,
            makeMessage(
              'join_request',
              {
                nickname: myNickname.value,
                savedPlayerId: myPlayerId.value,
              },
              {
                roomId: gameState.value.roomId,
                fromId: myPlayerId.value,
                ts: Date.now(),
              },
            ),
          )
          
          // –ñ–¥–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
          await new Promise(resolve => setTimeout(resolve, 500))
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
          const currentRole = peerService.getCurrentRole()
          console.log(`üîç Current peer role after connection attempt: ${currentRole}`)
          
          if (currentRole === 'client') {
            console.log(`‚úÖ Successfully reconnected on attempt ${attempt}`)
            connectionStatus.value = 'connected'
            reconnected = true
            break
          } else {
            console.log(`‚ùå Connection failed, role is: ${currentRole}`)
          }
          
        } catch (error) {
          console.log(`‚ùå Attempt ${attempt} failed:`, error)
        }
        
        // –ñ–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
        await new Promise(resolve => setTimeout(resolve, 1000))
      }
      
      if (!reconnected) {
        console.log('‚ùå All reconnection attempts failed after 1 minute. Host left voluntarily - ending game.')
        endGameDueToHostLoss()
      }
      
      console.log('üîì HOST RECONNECTION: Releasing mutex lock')
    })
  }

  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã –∏–∑-–∑–∞ –ø–æ—Ç–µ—Ä–∏ —Ö–æ—Å—Ç–∞
  const endGameDueToHostLoss = () => {
    console.log('üèÅ Game ended due to host disconnection')
    
    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    connectionStatus.value = 'disconnected'
    isHost.value = false
    hostId.value = ''
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á—Ç–æ –∏–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å
    // (–∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∫–∞–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∏–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é)
    console.log('üè† Returning to main menu due to host loss')
    
    // –û—á–∏—â–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    peerService.disconnect()
    
    // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
    leaveRoom().catch((err) => {
      console.warn('Error during leaveRoom:', err)
    })
    
    // –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    console.log('üß≠ Navigating to main menu...')
    router.push({ name: 'MainMenu' }).catch((err) => {
      console.warn('Navigation to main menu failed:', err)
    })
  }

  // Migration logic completely removed - using simple approach

  // –ë—ã—Å—Ç—Ä—ã–π –æ–ø—Ä–æ—Å —Ö–æ—Å—Ç–∞ —Å—Ä–µ–¥–∏ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∏–≥—Ä–æ–∫–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É—è –æ—Å–Ω–æ–≤–Ω–æ–π peer)
  const quickHostDiscovery = async (
    players: Player[],
  ): Promise<HostDiscoveryResponsePayload | null> => {
    console.log('Starting quick host discovery among remaining players...')

    if (players.length === 0) return null

    return new Promise(async (resolve) => {
      let discoveredHost: HostDiscoveryResponsePayload | null = null
      let responsesReceived = 0
      const maxResponses = players.length

      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π peer –≤–º–µ—Å—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ
      const mainPeer = peerService.getPeer()
      if (!mainPeer || !mainPeer.open) {
        console.log('Main peer not available for discovery')
        resolve(null)
        return
      }

      console.log('Quick discovery with short timeout for', players.length, 'players')

      const discoveryRequest: HostDiscoveryRequestPayload = {
        requesterId: mainPeer.id,
        requesterToken: myPlayer.value?.authToken || '',
        timestamp: Date.now(),
      }

      console.log('üîç DISCOVERY REQUEST PAYLOAD:', discoveryRequest)

      const connectionsToCleanup: any[] = []
      const savedConnections: string[] = []

      // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–∞–∂–¥–æ–º—É –∏–≥—Ä–æ–∫—É
      for (const player of players) {
        try {
          const conn = mainPeer.connect(player.id)

          conn.on('open', () => {
            console.log('Quick discovery connected to:', player.id)

            // –ö–†–ò–¢–ò–ß–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ PeerService –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            peerService.addConnection(player.id, conn)
            savedConnections.push(player.id)

            conn.send({
              type: 'host_discovery_request',
              payload: discoveryRequest,
            })
          })

          conn.on('data', (data: any) => {
            const message = data as PeerMessage
            if (message.type === 'host_discovery_response') {
              const response = message.payload as HostDiscoveryResponsePayload
              console.log('Quick discovery response:', response)

              responsesReceived++

              if (response.isHost && !discoveredHost) {
                discoveredHost = response
                console.log('Quick discovery found host:', response.currentHostId)
                finishDiscovery()
                resolve(discoveredHost)
                return
              }

              if (responsesReceived >= maxResponses) {
                finishDiscovery()
                resolve(discoveredHost)
              }
            }
          })

          conn.on('error', () => {
            responsesReceived++
            if (responsesReceived >= maxResponses) {
              finishDiscovery()
              resolve(discoveredHost)
            }
          })

          // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
          connectionsToCleanup.push(conn)
        } catch (error: any) {
          responsesReceived++
          if (responsesReceived >= maxResponses) {
            finishDiscovery()
            resolve(discoveredHost)
          }
        }
      }

      // –ö–æ—Ä–æ—Ç–∫–∏–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ discovery
      setTimeout(() => {
        console.log('Quick discovery timeout')
        finishDiscovery()
        resolve(discoveredHost)
      }, 2000) // 2 —Å–µ–∫—É–Ω–¥—ã

      function finishDiscovery() {
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–ï –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ PeerService
        connectionsToCleanup.forEach((conn) => {
          // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ù–ï –±—ã–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã
          if (!peerService.hasConnection(conn.peer)) {
            try {
              console.log('Closing unsaved discovery connection:', conn.peer)
              conn.close()
            } catch (e) {
              /* ignore */
            }
          } else {
            console.log('Keeping saved connection:', conn.peer)
          }
        })

        console.log('Discovery completed, saved connections:', savedConnections)
      }
    })
  }

  // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω–æ–º—É —Ö–æ—Å—Ç—É
  const reconnectToDiscoveredHost = async (discoveredHost: HostDiscoveryResponsePayload) => {
    console.log('Reconnecting to discovered host:', discoveredHost.currentHostId)

    try {
      connectionStatus.value = 'connecting'

      // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –Ω–∞–π–¥–µ–Ω–Ω–æ–º—É —Ö–æ—Å—Ç—É
      await peerService.reconnectToNewHost(discoveredHost.currentHostId)

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      isHost.value = false
      hostId.value = discoveredHost.currentHostId
      gameState.value.hostId = discoveredHost.currentHostId

      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º —Ö–æ—Å—Ç–æ–º
      gameState.value = { ...discoveredHost.gameState }

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–æ–ª—å –∫–ª–∏–µ–Ω—Ç–∞
      peerService.setAsClient()

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
      setupClientMessageHandlers()

      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
      peerService.sendMessage(
        discoveredHost.currentHostId,
        makeMessage(
          'request_game_state',
          { requesterId: myPlayerId.value },
          { roomId: gameState.value.roomId, fromId: myPlayerId.value, ts: Date.now() },
        ),
      )

      connectionStatus.value = 'connected'
      console.log('Successfully reconnected to discovered host')
    } catch (error: unknown) {
      if (error instanceof Error) {
        console.error('Failed to reconnect to discovered host:', error.message)
      } else {
        console.error('Failed to reconnect to discovered host: Unknown error')
      }
      connectionStatus.value = 'disconnected'
      throw error as any
    }
  }

  // –ó–∞–ø—É—Å–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏
  // Migration functions removed - using simple approach

  // –í—ã–±–æ—Ä –Ω–æ–≤–æ–≥–æ —Ö–æ—Å—Ç–∞ –∏–∑ –≤–∞–ª–∏–¥–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
  const electNewHostFromValidPlayers = (validPlayers: Player[]): Player => {
    // –ù–æ–≤—ã–π –∫—Ä–∏—Ç–µ—Ä–∏–π: –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π players[i].id (peerId) –ª–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏
    const sortedPlayers = validPlayers
      .slice()
      .sort((a: Player, b: Player) => a.id.localeCompare(b.id))

    if (sortedPlayers.length === 0) {
      throw new Error('No valid players for host election')
    }

    console.log('üîç HOST ELECTION ALGORITHM:', {
      validPlayers: (validPlayers as Player[]).map((p: Player) => ({
        id: p.id,
        nickname: p.nickname,
      })),
      sortedPlayers: (sortedPlayers as Player[]).map((p: Player) => ({
        id: p.id,
        nickname: p.nickname,
      })),
      selectedHost: sortedPlayers[0],
      myPlayerId: myPlayerId.value,
      amISelected: sortedPlayers[0].id === myPlayerId.value,
    })

    return sortedPlayers[0]
  }

  // All migration functions removed - using simple approach
  // If host leaves voluntarily: game ends immediately
  // If network drops: try reconnecting to the same host only

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏ –≤ localStorage
  // –ù–æ–≤–∞—è —Å—Ö–µ–º–∞: –æ—Ç–∫–∞–∑ –æ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ SESSION_STORAGE_KEY.
  // –ê—Ç–æ–º–∞—Ä–Ω—ã–µ –ø–æ–ª—è –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è —á–µ—Ä–µ–∑ Pinia persist; —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é –±–æ–ª—å—à–µ –Ω–µ –ø–∏—à–µ–º.
  const saveSession = () => {
    return
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Å—Å–∏–∏ –∏–∑ localStorage
  // –°–µ—Å—Å–∏–∏ –±–æ–ª—å—à–µ –Ω–µ —á–∏—Ç–∞–µ–º –∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∫–ª—é—á–∞; –æ–ø–∏—Ä–∞–µ–º—Å—è –Ω–∞ –≥–∏–¥—Ä–∞—Ç–∞—Ü–∏—é Pinia –∏ anchorSnapshot.
  const loadSession = (): SessionData | null => {
    return null
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
  const clearSession = () => {
    // no-op: –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∫–ª—é—á–∞ —Å–µ—Å—Å–∏–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç
    console.log('Session cleared (no-op)')
  }

  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏
  const restoreSession = async (): Promise<boolean> => {
    const ridGuard = startRequest('restoreSession')

    // –ß–∏—Ç–∞–µ–º —è–∫–æ—Ä–Ω—ã–π —Å–Ω–∞–ø—à–æ—Ç (–µ—Å–ª–∏ –µ—Å—Ç—å –∏ —Å–≤–µ–∂–∏–π)
    let anchorState: GameState | null = null
    try {
      const cached = storageSafe.getWithTTL<{ ts: number; state: GameState }>(
        'game',
        'hostGameStateSnapshot',
        null,
      )
      if (cached?.state) {
        anchorState = cached.state
        console.log('Using cached host snapshot as anchor for restore')
      }
    } catch (e) {
      console.warn('Failed to read host snapshot from storageSafe', e)
    }

    // –ï—Å–ª–∏ –Ω–∏ —Å–Ω–∞–ø—à–æ—Ç–∞, –Ω–∏ –∞—Ç–æ–º–∞—Ä–Ω—ã—Ö –ø–æ–ª–µ–π ‚Äî —ç—Ç–æ –Ω–µ —Ñ–∞—Ç–∞–ª—å–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∏–º c —Ç–µ–∫—É—â–∏–º state (–∏–Ω–∏—Ü. –ø—É—Å—Ç–æ–π)
    try {
      console.log('Attempting to restore session...')
      restorationState.value = 'discovering'
      connectionStatus.value = 'connecting'

      // –ï—Å–ª–∏ –µ—Å—Ç—å —è–∫–æ—Ä—å ‚Äì –ø—Ä–∏–º–µ–Ω–∏–º –µ–≥–æ –∫–∞–∫ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      if (anchorState) {
        gameState.value = { ...anchorState }
        if ((gameState.value.phase ?? 'lobby') !== 'lobby') {
          gameState.value.gameStarted = true
        }
      }

      // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π discovery: –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞—Ç–æ–º–∞—Ä–Ω—ã–µ –ø–æ–ª—è –∏–∑ —Å—Ç–æ—Ä–∞ (–≥–∏–¥—Ä–∞—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–ª–∞–≥–∏–Ω–æ–º)
      const sessionDataLike = {
        myPlayerId: myPlayerId.value,
        myNickname: myNickname.value,
        isHost: isHost.value,
        hostId: hostId.value,
        roomId: roomId.value,
        gameState: gameState.value,
      } as SessionData

      console.log('Starting universal host discovery...')
      const currentHost = await universalHostDiscovery(sessionDataLike)

      restorationState.value = 'restoring'

      if (currentHost) {
        console.log('Found active host, connecting as client:', currentHost.currentHostId)
        // –ù–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π —Ö–æ—Å—Ç - –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫–∞–∫ –∫–ª–∏–µ–Ω—Ç
        isHost.value = false
        hostId.value = currentHost.currentHostId
        await restoreAsClient(currentHost.currentHostId)
      } else {
        // –ï—Å–ª–∏ discovery –Ω–∏–∫–æ–≥–æ –Ω–µ –Ω–∞—à—ë–ª, –ø—Ä–æ–≤–µ—Ä–∏–º: –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ –º—ã –±—ã–ª–∏ —Ö–æ—Å—Ç–æ–º
        // –•–æ—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ sessionData.isHost === true –ò anchorState.hostId === myPlayerId
        const canBeHost = !!(
          isHost.value &&
          (gameState.value.hostId === myPlayerId.value || !gameState.value.hostId)
        )
        if (canBeHost) {
          console.log('No active host found, becoming host (confirmed by anchor/pinia)...')
          isHost.value = true
          await restoreAsHost()
        } else {
          console.log(
            'No active host found and no authority to self-promote, retrying quick discovery...',
          )
          isHost.value = false
          hostId.value = ''
          const retryHost = await universalHostDiscovery({
            myPlayerId: myPlayerId.value,
            myNickname: myNickname.value,
            isHost: false,
            hostId: hostId.value,
            roomId: roomId.value,
            gameState: gameState.value,
          } as any)
          if (retryHost) {
            hostId.value = retryHost.currentHostId
            await restoreAsClient(retryHost.currentHostId)
          } else {
            connectionStatus.value = 'disconnected'
            restorationState.value = 'idle'
            console.log(
              'Staying disconnected: no authoritative host and not confirmed host self-promotion',
            )
            return false
          }
        }
      }

      // –£—Å–ø–µ—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
      restorationState.value = 'idle'
      if (!gameState.value || !gameState.value.players || gameState.value.players.length === 0) {
        console.log('Session restore finished, but no valid state received ‚Äî staying disconnected')
        connectionStatus.value = 'disconnected'
        endRequestError(
          'restoreSession',
          ridGuard,
          normalizeError('State not synced', 'restore_state_missing'),
        )
        return false
      }
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è: –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π host –Ω–µ–¥–æ—Å—Ç–∏–∂–∏–º ‚Äî –Ω–µ —Å—Ç–∞–≤–∏–º connected
      try {
        const currentHostId = hostId.value || gameState.value.hostId
        if (currentHostId) {
          const reachable = await tryConnectToKnownHost(currentHostId)
          if (!reachable) {
            console.log('Host unreachable on final validation. Marking disconnected.')
            connectionStatus.value = 'disconnected'
            endRequestError(
              'restoreSession',
              ridGuard,
              normalizeError('Host unreachable', 'host_unreachable'),
            )
            return false
          }
        }
      } catch {}
      connectionStatus.value = 'connected'
      console.log('Session successfully restored (validated by state and reachability)')
      sessionTimestamp.value = Date.now()
      endRequestSuccess('restoreSession', ridGuard)
      return true
    } catch (error: unknown) {
      if (error instanceof Error) {
        console.error('Failed to restore session:', error.message)
      } else {
        console.error('Failed to restore session: Unknown error')
      }
      restorationState.value = 'idle'
      connectionStatus.value = 'disconnected'
      endRequestError('restoreSession', ridGuard, normalizeError(error, 'restore_failed'))
      clearSession()
      return false
    }
  }

  // –î–µ—Ç-–≤—ã–±–æ—Ä –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º—É players[].id
  // (—É–¥–∞–ª–µ–Ω–æ: –¥—É–±–ª–∏—Ä–æ–≤–∞–ª–æ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –Ω–∏–∂–µ)

  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–ø—Ä–æ—Å –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Ö–æ—Å—Ç–∞ (–±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è)
  // –õ–æ–∫–∞–ª—å–Ω—ã–π –±–ª—ç–∫–ª–∏—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –≤ —Ä–∞–º–∫–∞—Ö –æ–¥–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ discovery
  function createCandidateBlacklist() {
    const set = new Set<string>()
    return {
      // Debug
      isDebug,
      add: (id: string) => set.add(id),
      has: (id: string) => set.has(id),
    }
  }

  const universalHostDiscovery = async (
    sessionData: SessionData,
  ): Promise<HostDiscoveryResponsePayload | null> => {
    console.log('Starting universal host discovery...')

    const blacklist = createCandidateBlacklist()

    // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –∏–∑–≤–µ—Å—Ç–Ω–æ–º—É —Ö–æ—Å—Ç—É (—Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –¥–æ—Å—Ç–∏–∂–∏–º–æ—Å—Ç–∏)
    if (sessionData.hostId && sessionData.hostId !== sessionData.myPlayerId) {
      console.log(
        'Strategy 1: Trying to connect to last known host (validate reachability):',
        sessionData.hostId,
      )
      const lastKnownHost = await tryConnectToKnownHost(sessionData.hostId)
      if (lastKnownHost) {
        console.log('Last known host is still active:', sessionData.hostId)
        return lastKnownHost
      } else {
        console.log('Last known host unreachable, blacklisting:', sessionData.hostId)
        blacklist.add(sessionData.hostId)
      }
    }

    // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: –û–ø—Ä–æ—Å –≤—Å–µ—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
    // –í–ê–ñ–ù–û: –æ–ø—Ä–∞—à–∏–≤–∞–µ–º –ò —Ö–æ—Å—Ç-—Ñ–ª–∞–≥–æ–≤ —Ç–æ–∂–µ, —Ç–∞–∫ –∫–∞–∫ "isHost" –≤ —Å–Ω–µ–ø—à–æ—Ç–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–º –ø–æ—Å–ª–µ reload
    const savedPlayers = sessionData.gameState.players.filter(
      (p: Player) => p.id && p.id !== sessionData.myPlayerId,
    )
    if (savedPlayers.length > 0) {
      console.log(
        'Strategy 2: Polling saved players (including previous host flag as stale):',
        savedPlayers.map((p: Player) => p.id),
      )
      const discoveredFromPlayers = await quickHostDiscovery(savedPlayers)
      if (discoveredFromPlayers) {
        return discoveredFromPlayers
      }
      // –î–æ–±–∞–≤–∏–º –≤—Å–µ—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–∑ savedPlayers –≤ –±–ª—ç–∫–ª–∏—Å—Ç –ø–æ –º–µ—Å—Ç—É (quickHostDiscovery —Å–∞–º –æ—á–∏—â–∞–µ—Ç —Å–≤–æ–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ–Ω–Ω–µ–∫—Ç—ã;
      // –µ—Å–ª–∏ —Ö–æ—Å—Ç–∞ –Ω–µ –Ω–∞—à–ª–∏, –∑–Ω–∞—á–∏—Ç –Ω–∏ –æ–¥–∏–Ω –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —Å–µ–±—è –∫–∞–∫ —Ö–æ—Å—Ç)
      savedPlayers.forEach((p) => blacklist.add(p.id))
    }

    // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 3: –î–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–∞–Ω–¥–∏–¥–∞—Ç –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º—É id —Å—Ä–µ–¥–∏ –ò–ó–í–ï–°–¢–ù–´–• –∏–≥—Ä–æ–∫–æ–≤,
    // –ù–û —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –¥–æ—Å—Ç–∏–∂–∏–º (–∫–æ—Ä–æ—Ç–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏). –ò—Å–∫–ª—é—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–π hostId.
    const knownPlayers = (gameState.value.players || []).filter(
      (p) => !!p && p.id && p.id !== sessionData.myPlayerId,
    )
    const sortedById = [...knownPlayers].sort((a, b) => a.id.localeCompare(b.id))

    for (const candidate of sortedById) {
      if (blacklist.has(candidate.id)) {
        console.log('Skip blacklisted deterministic candidate:', candidate.id)
        continue
      }
      // –ù–µ –≤—ã–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ hostId –ø–æ–≤—Ç–æ—Ä–Ω–æ
      if (sessionData.hostId && candidate.id === sessionData.hostId) {
        console.log('Skip last unreachable hostId as deterministic candidate:', candidate.id)
        continue
      }
      console.log(
        'Universal host discovery fallback trying deterministic candidate (reachability check):',
        candidate.id,
      )
      const reachable = await tryConnectToKnownHost(candidate.id)
      if (reachable) {
        console.log('Deterministic candidate reachable, selecting as host:', candidate.id)
        return {
          responderId: candidate.id,
          responderToken: candidate.authToken || '',
          isHost: false,
          currentHostId: candidate.id,
          gameState: gameState.value,
          timestamp: Date.now(),
        } as any
      } else {
        console.log('Deterministic candidate NOT reachable, blacklisting:', candidate.id)
        blacklist.add(candidate.id)
      }
    }

    console.log('Universal host discovery failed - no active host found')
    return null
  }

  // –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Ç–∏ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–æ–º–Ω–∞—Ç—ã
  const discoverActiveNetwork = async (
    sessionData: SessionData,
  ): Promise<HostDiscoveryResponsePayload | null> => {
    console.log('Discovering active network for room:', sessionData.roomId)

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –∞–ª–≥–æ—Ä–∏—Ç–º —á—Ç–æ –∏ –≤ universalHostDiscovery
    return await universalHostDiscovery(sessionData)
  }

  // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–∑–≤–µ—Å—Ç–Ω–æ–º—É —Ö–æ—Å—Ç—É
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–∏–º–æ—Å—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ peer –∫–∞–∫ —Ö–æ—Å—Ç–∞.
  // –í–ê–ñ–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π peer, –µ—Å–ª–∏ –æ–Ω —É–∂–µ —Å–æ–∑–¥–∞–Ω, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –≥–æ–Ω–æ–∫ –∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö peer'–æ–≤.
  const tryConnectToKnownHost = async (
    hostId: string,
  ): Promise<HostDiscoveryResponsePayload | null> => {
    return new Promise(async (resolve) => {
      try {
        console.log('Trying to connect to known host (with reachability validation):', hostId)
        const mainPeer = peerService.getPeer()

        const doTempCheck = async () => {
          const tempPeer = new (await import('peerjs')).default()
          tempPeer.on('open', (tempId) => {
            const conn = tempPeer.connect(hostId)
            const timeout = setTimeout(() => {
              try {
                conn.close()
              } catch {}
              try {
                tempPeer.destroy()
              } catch {}
              resolve(null)
            }, 2000)
            conn.on('open', () => {
              conn.send({
                type: 'host_discovery_request',
                payload: {
                  requesterId: tempId,
                  requesterToken: myPlayer.value?.authToken || '',
                  timestamp: Date.now(),
                },
              })
            })
            conn.on('data', (data: any) => {
              const message = data as PeerMessage
              if (message.type === 'host_discovery_response') {
                const response = message.payload as HostDiscoveryResponsePayload
                clearTimeout(timeout)
                try {
                  conn.close()
                } catch {}
                try {
                  tempPeer.destroy()
                } catch {}
                if (response.isHost) {
                  resolve(response)
                } else {
                  resolve(null)
                }
              }
            })
            conn.on('error', () => {
              clearTimeout(timeout)
              try {
                tempPeer.destroy()
              } catch {}
              resolve(null)
            })
          })
          tempPeer.on('error', () => resolve(null))
        }

        if (!mainPeer || !mainPeer.open) {
          // –ù–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ peer ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π
          await doTempCheck()
          return
        }

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π peer –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        const conn = mainPeer.connect(hostId)
        const timeout = setTimeout(() => {
          try {
            conn.close()
          } catch {}
          resolve(null)
        }, 2000)

        conn.on('open', () => {
          conn.send({
            type: 'host_discovery_request',
            payload: {
              requesterId: mainPeer.id,
              requesterToken: myPlayer.value?.authToken || '',
              timestamp: Date.now(),
            },
          })
        })

        conn.on('data', (data: any) => {
          const message = data as PeerMessage
          if (message.type === 'host_discovery_response') {
            const response = message.payload as HostDiscoveryResponsePayload
            clearTimeout(timeout)
            try {
              conn.close()
            } catch {}
            if (response.isHost) {
              resolve(response)
            } else {
              resolve(null)
            }
          }
        })

        conn.on('error', () => {
          clearTimeout(timeout)
          resolve(null)
        })
      } catch (error) {
        console.log('Failed to connect to known host:', error)
        resolve(null)
      }
    })
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ host discovery –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º
  const setupHostDiscoveryHandlers = () => {
    peerService.onMessage('host_discovery_request', (message: PeerMessage, conn: any) => {
      if (!conn) return

      const request = (message as Extract<PeerMessage, { type: 'host_discovery_request' }>).payload
      console.log('Received host discovery request:', request)

      const response: HostDiscoveryResponsePayload = {
        responderId: myPlayerId.value,
        responderToken: myPlayer.value?.authToken || '',
        isHost: isHost.value,
        currentHostId: gameState.value.hostId,
        gameState: gameState.value,
        timestamp: Date.now(),
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç c –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
      conn.send(
        makeMessage('host_discovery_response', response, {
          roomId: gameState.value.roomId,
          fromId: myPlayerId.value,
          ts: Date.now(),
        }),
      )

      console.log('Sent host discovery response:', response)
    })
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ mesh-–ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –¥–ª—è P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –º–µ–∂–¥—É –≤—Å–µ–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏
  const setupMeshProtocolHandlers = () => {
    // Mesh protocol completely removed - using simple hub-and-spoke architecture
    // No peer-to-peer mesh networking, no host migration
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å —Ä–µ—Ç—Ä–∞—è–º–∏ (—ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞)
  const gotFreshState = ref(false)

  async function sendWithRetry(
    targetId: string,
    buildMessage: () => PeerMessage,
    maxAttempts = 3,
    baseDelayMs = 300,
    stopOnStateUpdate = true,
  ): Promise<void> {
    let attempt = 0
    while (attempt < maxAttempts) {
      attempt++
      try {
        peerService.sendMessage(targetId, buildMessage())
      } catch {}
      if (stopOnStateUpdate && gotFreshState.value) {
        return
      }
      const delay = baseDelayMs * Math.pow(2, attempt - 1)
      await new Promise((r) => setTimeout(r, delay))
      if (stopOnStateUpdate && gotFreshState.value) {
        return
      }
    }
  }

  // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ö–æ—Å—Ç–∞
  const restoreAsHost = async () => {
    console.log('Restoring as host...')

    // –ï—Å–ª–∏ —Ñ–∞–∑–∞ –Ω–µ –ª–æ–±–±–∏ ‚Äî —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Ñ–ª–∞–≥ –∑–∞–ø—É—â–µ–Ω–Ω–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    if ((gameState.value.phase ?? 'lobby') !== 'lobby') {
      gameState.value.gameStarted = true
    }

    // –ü–µ—Ä–µ–¥ –ª—é–±—ã–º–∏ —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º phase/gameMode —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ —Ä–µ—Ñ–∞–º–∏
    if (gameState.value.phase) {
      gamePhase.value = gameState.value.phase as any
    }
    if (gameState.value.gameMode) {
      gameMode.value = gameState.value.gameMode as any
    }

    // –ö–†–ò–¢–ò–ß–ù–û: –ü–µ—Ä–µ–¥–∞–µ–º roomId –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ peer ID
    if (!roomId.value) {
      roomId.value = loadPersistentRoomId() || gameState.value.roomId || ''
    }
    // 1) –°—Ç–∞—Ä—Ç—É–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ Peer —Å –ø–æ–ø—ã—Ç–∫–æ–π —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–µ–∂–Ω–∏–π hostId –¥–ª—è —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç—ã
    const newPeerId = await peerService.createHost(roomId.value)

    // 2) –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ä—ã–π hostId –∏ —Ñ–∏–∫—Å–∏—Ä—É–µ–º –Ω–æ–≤—ã–π
    const oldHostId = gameState.value.hostId || myPlayerId.value
    myPlayerId.value = newPeerId
    hostId.value = newPeerId
    gameState.value.hostId = newPeerId

    // 2.1) –ï—Å–ª–∏ –≤ players –µ—â—ë –Ω–µ—Ç –∑–∞–ø–∏—Å–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ ID ‚Äî –¥–µ–ª–∞–µ–º —Ä–µ–º–∞–ø —Å—Ç–∞—Ä–æ–≥–æ hostId->newPeerId
    try {
      const existingWithNew = gameState.value.players.find((p) => p.id === newPeerId)
      if (!existingWithNew && oldHostId && oldHostId !== newPeerId) {
        const idx = gameState.value.players.findIndex((p) => p.id === oldHostId)
        if (idx !== -1) {
          gameState.value.players[idx].id = newPeerId
          gameState.value.players[idx].isHost = true
        } else {
          // –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –¥–æ–±–∞–≤–∏–º —Ö–æ—Å—Ç–∞, –µ—Å–ª–∏ –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ –æ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ players
          gameState.value.players.push({
            id: newPeerId,
            nickname: myNickname.value || generateDefaultNickname(),
            color: getColorByIndex(0),
            isHost: true,
            joinedAt: Date.now(),
            authToken: generateAuthToken(
              newPeerId,
              roomId.value || gameState.value.roomId,
              Date.now(),
            ),
            votingCards: [...DEFAULT_CARDS.voting],
            bettingCards: [...DEFAULT_CARDS.betting],
          } as any)
        }

        // –†–µ–º–∞–ø —Å—Å—ã–ª–æ–∫ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –Ω–∞ —Ö–æ—Å—Ç–∞
        if (gameState.value.litUpPlayerId === oldHostId) gameState.value.litUpPlayerId = newPeerId
        if (gameState.value.currentTurnPlayerId === oldHostId)
          gameState.value.currentTurnPlayerId = newPeerId

        if (gameState.value.votes) {
          const newVotes: Record<string, string[]> = {}
          Object.entries(gameState.value.votes).forEach(([k, v]) => {
            const mappedKey = k === oldHostId ? newPeerId : k
            const mappedArray = (v || []).map((t) => (t === oldHostId ? newPeerId : t))
            newVotes[mappedKey] = mappedArray
          })
          gameState.value.votes = newVotes
        }
        if (gameState.value.voteCounts) {
          const newCounts: Record<string, number> = {}
          Object.entries(gameState.value.voteCounts).forEach(([k, v]) => {
            const mappedKey = k === oldHostId ? newPeerId : k
            newCounts[mappedKey] = v
          })
          gameState.value.voteCounts = newCounts
        }
        if (gameState.value.bets) {
          const newBets: Record<string, '0' | '¬±' | '+'> = {}
          Object.entries(gameState.value.bets).forEach(([k, v]) => {
            const mappedKey = k === oldHostId ? newPeerId : k
            newBets[mappedKey] = v as any
          })
          gameState.value.bets = newBets
        }
        if (gameState.value.guesses) {
          const newGuesses: Record<string, string> = {}
          Object.entries(gameState.value.guesses).forEach(([k, v]) => {
            const mappedKey = k === oldHostId ? newPeerId : k
            const mappedVal = v === oldHostId ? newPeerId : v
            newGuesses[mappedKey] = mappedVal
          })
          gameState.value.guesses = newGuesses
        }
        if (gameState.value.scores) {
          const newScores: Record<string, number> = {}
          Object.entries(gameState.value.scores).forEach(([k, v]) => {
            const mappedKey = k === oldHostId ? newPeerId : k
            newScores[mappedKey] = v
          })
          gameState.value.scores = newScores
        }
        if (gameState.value.roundScores) {
          const newRoundScores: Record<string, number> = {}
          Object.entries(gameState.value.roundScores).forEach(([k, v]) => {
            const mappedKey = k === oldHostId ? newPeerId : k
            newRoundScores[mappedKey] = v
          })
          gameState.value.roundScores = newRoundScores
        }
        if (
          Array.isArray(gameState.value.roundWinners) &&
          gameState.value.roundWinners.length > 0
        ) {
          gameState.value.roundWinners = gameState.value.roundWinners.map((pid) =>
            pid === oldHostId ? newPeerId : pid,
          )
        }
        if (gameState.value.answeringPlayerId === oldHostId) {
          gameState.value.answeringPlayerId = newPeerId
        }
      }
    } catch (e) {
      console.warn('Host ID remap during restoreAsHost failed (non-critical):', e)
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤–æ–π ID –≤ —Å–ø–∏—Å–∫–µ –∏–≥—Ä–æ–∫–æ–≤
    const myPlayerIndex = gameState.value.players.findIndex((p: Player) => p.id === oldHostId)
    if (myPlayerIndex !== -1) {
      gameState.value.players[myPlayerIndex].id = newPeerId
    }

    // 3) –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–æ–ª—å —Ö–æ—Å—Ç–∞ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º heartbeat
    peerService.setRoomContext(roomId.value || gameState.value.roomId || (null as any))
    peerService.setAsHost(newPeerId, roomId.value || gameState.value.roomId)

    // 3.1) –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º handlers –∏ mesh, —á—Ç–æ–±—ã –∫–ª–∏–µ–Ω—Ç—ã –º–æ–≥–ª–∏ –±—ã—Å—Ç—Ä–æ –Ω–∞—Å –æ–±–Ω–∞—Ä—É–∂–∏—Ç—å
    setupHostMessageHandlers()

    // 4) –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ —à–ª–µ–º –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–π —Å–Ω–∞–ø—à–æ—Ç –∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è,
    // —á—Ç–æ–±—ã –∫–ª–∏–µ–Ω—Ç—ã –∑–∞—è–∫–æ—Ä–∏–ª–∏—Å—å, –∞ –ø—Ä–µ—Ç–µ–Ω–¥–µ–Ω—Ç—ã –Ω–∞ –º–∏–≥—Ä–∞—Ü–∏—é –æ—Ç–º–µ–Ω–∏–ª–∏ takeover
    broadcastGameState()
    try {
      peerService.broadcastMessage(
        makeMessage(
          'host_recovery_announcement',
          {
            recoveredHostId: newPeerId,
            gameState: { ...gameState.value },
          } as HostRecoveryAnnouncementPayload,
          { roomId: roomId.value || gameState.value.roomId, fromId: newPeerId, ts: Date.now() },
        ),
      )
    } catch {}

    // –û—Ç–ø—Ä–∞–≤–∏–º —Ç–∞–∫–∂–µ –∫—Ä–∞—Ç–∫–∏–π 'new_host_id' –∫–∞–∫ fallback –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–ø—É—Å–∫–∞—é—Ç announcement
    try {
      broadcastNewHostId(newPeerId)
    } catch {}
    // –¢–∞–∫–∂–µ –ø–æ–ª–æ–∂–∏–º —Å–Ω–∞–ø—à–æ—Ç –≤ storageSafe —Å TTL –∫–∞–∫ —è–∫–æ—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö reload –∫–ª–∏–µ–Ω—Ç–æ–≤
    try {
      storageSafe.setWithTTL(
        'game',
        'hostGameStateSnapshot',
        { ts: Date.now(), state: { ...gameState.value } },
        HOST_SNAPSHOT_TTL,
      )
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —É—Å—Ç–æ–π—á–∏–≤—ã–π roomId –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö —Ä–µ—Å—Ç–∞—Ä—Ç–æ–≤
      if (roomId.value) savePersistentRoomId(roomId.value)
    } catch {}

    console.log('Host restored with ID (may be same as before):', newPeerId)
  }

  // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
  const restoreAsClient = async (targetHostId: string) => {
    console.log('Restoring as client, connecting to:', targetHostId)

    try {
      // –ï—Å–ª–∏ —Ñ–∞–∑–∞ –Ω–µ –ª–æ–±–±–∏ ‚Äî —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º gameStarted –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è UI –æ—Ç–∫–∞—Ç–∞ –≤ –ª–æ–±–±–∏ –¥–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      if ((gameState.value.phase ?? 'lobby') !== 'lobby') {
        gameState.value.gameStarted = true
      }

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–º–Ω–∞—Ç—ã –î–û –ª—é–±—ã—Ö —Å–µ—Ç–µ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
      peerService.setRoomContext(roomId.value || gameState.value.roomId || (null as any))

      // –§–ª–∞–≥ —Å–≤–µ–∂–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
      gotFreshState.value = false

      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–ï –æ—á–∏—â–∞–µ–º litUpPlayerId —Å—Ä–∞–∑—É, –¥–æ–∂–¥–µ–º—Å—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
      console.log('Keeping current litUpPlayerId until state sync:', gameState.value.litUpPlayerId)

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π ID –ü–ï–†–ï–î –µ–≥–æ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å—é (–∏–∑ —Å—Ç–æ—Ä–∞ –∏–ª–∏ –∏–∑ —É—Å—Ç–æ–π—á–∏–≤–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞)
      const originalPlayerId = loadStablePlayerId() || myPlayerId.value
      console.log('Saved original player ID for reconnection (stable):', originalPlayerId)

      // –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Ö–æ—Å—Ç—É
      await peerService.connectToHost(targetHostId)

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤–æ–π ID –Ω–∞ –Ω–æ–≤—ã–π PeerJS ID
      myPlayerId.value = peerService.getMyId() || ''
      console.log('Updated to new peer ID:', myPlayerId.value)
      // –û–±–Ω–æ–≤–ª—è–µ–º —É—Å—Ç–æ–π—á–∏–≤—ã–π id, –µ—Å–ª–∏ –µ—â–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω
      if (myPlayerId.value) saveStablePlayerId(myPlayerId.value)

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–æ–ª—å –∫–ª–∏–µ–Ω—Ç–∞
      isHost.value = false
      hostId.value = targetHostId
      peerService.setCurrentHostId(targetHostId)
      peerService.setAsClient()

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
      setupClientMessageHandlers()

      // –ö–†–ò–¢–ò–ß–ù–û: –î–æ–±–∞–≤–ª—è–µ–º mesh-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏
  
      // –ü—Ä–æ—á–∏—Å—Ç–∏–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      try {
        peerService.cleanupInactiveConnections()
      } catch {}

      // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      await new Promise((resolve) => setTimeout(resolve, 300))

      // –ò–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ join_request —Å —Ä–µ—Ç—Ä–∞—è–º–∏ –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ–∂–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
      await sendWithRetry(
        targetHostId,
        () =>
          makeMessage(
            'join_request',
            {
              nickname: myNickname.value,
              savedPlayerId: originalPlayerId, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Å—Ç–æ–π—á–∏–≤—ã–π/—Å—Ç–∞—Ä—ã–π ID –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
            },
            {
              roomId: roomId.value || gameState.value.roomId,
              fromId: myPlayerId.value,
              ts: Date.now(),
            },
          ),
        3,
        300,
        true,
      )

      // –ò–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å —Ä–µ—Ç—Ä–∞—è–º–∏
      await sendWithRetry(
        targetHostId,
        () =>
          makeMessage(
            'request_game_state',
            { requesterId: myPlayerId.value },
            {
              roomId: roomId.value || gameState.value.roomId,
              fromId: myPlayerId.value,
              ts: Date.now(),
            },
          ),
        3,
        300,
        true,
      )

      // Note: peer list request removed - no longer needed in hub-and-spoke architecture

      // –ñ–¥–µ–º –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–±—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
      await waitForGameStateUpdate()

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞: –µ—Å–ª–∏ –ø–æ—Å–ª–µ sync hostId –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç targetHostId ‚Äî –æ–±–Ω–æ–≤–∏–º –ª–æ–∫–∞–ª—å–Ω–æ
      if (gameState.value.hostId && hostId.value !== gameState.value.hostId) {
        console.log('Adjusting hostId after state sync:', {
          prev: hostId.value,
          next: gameState.value.hostId,
        })
        hostId.value = gameState.value.hostId
      }

      // Note: peer list request in setTimeout removed - no longer needed in hub-and-spoke architecture

      console.log('Client restored and reconnected with updated state')
      // –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è state –æ—Ç —Ö–æ—Å—Ç–∞ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ ‚Äî –æ—Ç–º–µ–Ω—è–µ–º –ª—é–±—ã–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –º–∏–≥—Ä–∞—Ü–∏–∏
      try {
        if (peerService.isInHostRecoveryGracePeriod()) {
          peerService.cancelHostRecoveryGracePeriod()
        }
      } catch {}
    } catch (error: unknown) {
      console.error('Failed to restore as client:', error)
      // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å—Ç–∞—Ä–æ–º—É —Ö–æ—Å—Ç—É, –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –Ω–æ–≤–æ–≥–æ
      await onHostDisconnectedSafe()
    }
  }

  // –û–∂–∏–¥–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
  // BUGFIX: —É–º–µ–Ω—å—à–∞–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏ —É—Å–ª–æ–≤–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏, —á—Ç–æ–±—ã UI –±—ã—Å—Ç—Ä–µ–µ ¬´–ø—Ä–æ—Å—ã–ø–∞–ª—Å—è¬ª –ø–æ—Å–ª–µ reload
  const waitForGameStateUpdate = (): Promise<void> => {
    return new Promise((resolve) => {
      let attempts = 0
      const maxAttempts = 10 // –±—ã–ª–æ 20 -> —É—Å–∫–æ—Ä—è–µ–º

      const snapshotPhase = gameState.value.phase

      const checkForUpdate = () => {
        attempts++

        // –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–º–µ—Ç—å —Ö–æ—Ç—è –±—ã 1 –∏–≥—Ä–æ–∫–∞ –∏ –≤–∞–ª–∏–¥–Ω—É—é —Ñ–∞–∑—É
        const hasAnyPlayers = gameState.value.players.length > 0

        // –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å litUpPlayerId: –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞, –¥–æ–ª–∂–Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
        const litUpPlayerValid =
          !gameState.value.litUpPlayerId ||
          gameState.value.players.some((p: Player) => p.id === gameState.value.litUpPlayerId)

        // –ï—Å–ª–∏ –≤ —Å–Ω–∞–ø—à–æ—Ç–µ –±—ã–ª–∞ –Ω–µ 'lobby' ‚Äî –∂–¥—ë–º –Ω–µ-lobby
        const phaseConsistent =
          snapshotPhase && snapshotPhase !== 'lobby'
            ? gameState.value.phase && gameState.value.phase !== 'lobby'
            : true

        if ((hasAnyPlayers && litUpPlayerValid && phaseConsistent) || attempts >= maxAttempts) {
          if (gameState.value.litUpPlayerId && !litUpPlayerValid) {
            console.log('Clearing invalid litUpPlayerId:', gameState.value.litUpPlayerId)
            gameState.value.litUpPlayerId = null
          }

          if ((gameState.value.phase ?? 'lobby') !== 'lobby') {
            gameState.value.gameStarted = true
          }

          console.log(
            'Game state synchronized (fast), players:',
            gameState.value.players.length,
            'phase:',
            gameState.value.phase,
            'litUpPlayerId:',
            gameState.value.litUpPlayerId,
            'hostId:',
            gameState.value.hostId,
            'roomId:',
            gameState.value.roomId,
          )
          resolve()
        } else {
          if (attempts === Math.floor(maxAttempts / 2)) {
            console.log('‚è≥ Waiting for state sync...', {
              attempts,
              players: gameState.value.players.length,
              phase: gameState.value.phase,
              hostId: gameState.value.hostId,
              roomId: gameState.value.roomId,
            })
          }
          setTimeout(checkForUpdate, 150) // –±—ã—Å—Ç—Ä–µ–µ —Ü–∏–∫–ª
        }
      }

      setTimeout(checkForUpdate, 150)
    })
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏
  const hasActiveSession = (): boolean => {
    const sessionData = loadSession()
    return sessionData !== null
  }

  // –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π "–º—è–≥–∫–∏–π" –≤—ã—Ö–æ–¥ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –æ—á–∫–æ–≤ –∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ–º 'absent'
  // –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
  // - –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–µ—Å–∫–∏ –ø–æ–º–µ—á–∞–µ–º —Å–µ–±—è "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
  // - –®–ª—ë–º user_left_room —Å (userId, roomId, timestamp, currentScore, reason)
  // - –ë–ª–æ–∫–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –∑–∞–≤–∏—Å—è—â–∏–µ –æ—Ç –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è (—á–µ—Ä–µ–∑ isCurrentUserAbsent)
  // - –ü—Ä–∏ –æ—à–∏–±–∫–µ –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  const clientLeaveRoom = async () => {
    try {
      // –ö–†–ò–¢–ò–ß–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–æ–±—Ä–æ–≤–æ–ª—å–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞ –ü–ï–†–ï–î –ª—é–±—ã–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
      isVoluntaryLeaving = true
      console.log('üö™ VOLUNTARY LEAVE: Set voluntary leaving flag to prevent reconnection')
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è
      if (!gameState.value.presence) gameState.value.presence = {}
      if (!gameState.value.presenceMeta) gameState.value.presenceMeta = {}

      const me = myPlayerId.value
      const nowTs = Date.now()

      // 1) –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–ø–¥–µ–π—Ç –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ UI
      if (me) {
        gameState.value.presence[me] = 'absent'
        gameState.value.presenceMeta[me] = {
          lastSeen: Math.max(nowTs, gameState.value.presenceMeta[me]?.lastSeen || 0),
          leftAt: nowTs,
          reason: 'explicit_leave',
        }
      }

      // 2) –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ user_left_room (–æ–¥–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞, –±–µ–∑ —Ä–µ—Ç—Ä–∞–µ–≤)
      const payload = {
        userId: me,
        roomId: roomId.value || gameState.value.roomId,
        timestamp: nowTs,
        currentScore: gameState.value.scores?.[me] ?? 0,
        reason: 'explicit_leave' as const,
      }

      try {
        peerService.sendMessage(
          hostId.value || gameState.value.hostId,
          makeMessage('user_left_room', payload as any, {
            roomId: payload.roomId,
            fromId: me,
            ts: Date.now(),
          }),
        )
      } catch {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º: —ç—Ç–æ best-effort —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, —Ö–æ—Å—Ç –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ —Ç–∞–π–º–∞—É—Ç—É –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è
      }

      // 3) –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –∏ —á–∏—Å—Ç–∏–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –Ω–æ –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ –∏—Å—Ç–æ—Ä–∏—é –æ—á–∫–æ–≤
      // –ö–†–ò–¢–ò–ß–ù–û: –û—á–∏—â–∞–µ–º –≤—Å–µ persistence –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ–º —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∞–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
      try {
        storageSafe.nsRemove('game', 'hostGameStateSnapshot')
        storageSafe.nsRemove('global', 'piniaState')
        console.log('üóëÔ∏è Client cleared persistent state to prevent reconnection attempts')
      } catch {}
      
      peerService.disconnect()
      clearSession()
      connectionStatus.value = 'disconnected'
    } catch (e) {
      // 4) –û—Ç–∫–∞—Ç –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–ø–¥–µ–π—Ç–∞
      const me = myPlayerId.value
      if (me) {
        if (!gameState.value.presence) gameState.value.presence = {}
        if (!gameState.value.presenceMeta) gameState.value.presenceMeta = {}
        gameState.value.presence[me] = 'present'
        const lastSeen = Math.max(Date.now(), gameState.value.presenceMeta[me]?.lastSeen || 0)
        gameState.value.presenceMeta[me] = { lastSeen }
      }
      // –ü—Ä–æ—Å—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ç–æ—Å—Ç–µ—Ä)
      try {
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∏–Ω—É—Ç—å –∫–æ–º–Ω–∞—Ç—É. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.')
      } catch {}
      
      // –ö–†–ò–¢–ò–ß–ù–û: –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–∏ –æ—à–∏–±–∫–µ —Ç–æ–∂–µ
      isVoluntaryLeaving = false
      console.log('üîÑ VOLUNTARY LEAVE: Reset voluntary leaving flag due to error')
      
      throw e
    }
  }

  // –ü–æ–∫–∏–Ω—É—Ç—å –∫–æ–º–Ω–∞—Ç—É
  const leaveRoom = async () => {
    // –ö–†–ò–¢–ò–ß–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–æ–±—Ä–æ–≤–æ–ª—å–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞ –¥–ª—è —Ö–æ—Å—Ç–∞ —Ç–æ–∂–µ
    isVoluntaryLeaving = true
    console.log('üö™ VOLUNTARY LEAVE: Set voluntary leaving flag to prevent reconnection')
    
    console.log('üö™ LEAVE ROOM: Function called')
    console.log('üö™ LEAVE ROOM: Host is leaving the room', {
      roomId: roomId.value,
      isHost: isHost.value,
      myPlayerId: myPlayerId.value,
      currentPlayers: gameState.value.players.length
    })
    
    // –ö–†–ò–¢–ò–ß–ù–û: –ï—Å–ª–∏ —ç—Ç–æ —Ö–æ—Å—Ç, —É–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ–± —É—Ö–æ–¥–µ
    if (isHost.value && gameState.value.players.length > 1) {
      console.log('üì¢ LEAVE ROOM: Host notifying all clients about departure')
      try {
        const leaveMessage = makeMessage(
          'host_left_room',
          { hostId: myPlayerId.value, reason: 'voluntary_leave' },
          {
            roomId: roomId.value,
            fromId: myPlayerId.value,
            ts: Date.now(),
          }
        )
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
        gameState.value.players
          .filter(p => !p.isHost)
          .forEach(client => {
            try {
              peerService.sendMessage(client.id, leaveMessage)
              console.log(`üì¢ Notified client ${client.id} (${client.nickname}) about host departure`)
            } catch (err) {
              console.log(`‚ùå Failed to notify client ${client.id}:`, err)
            }
          })
      } catch (err) {
        console.log('‚ùå Error sending host departure notification:', err)
      }

      // –î–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–µ—Ä–µ–¥ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ–º
      console.log('‚è≥ Waiting for departure messages to be delivered...')
      await new Promise(resolve => setTimeout(resolve, 300))
      console.log('‚è≥ Message delivery wait completed')
    }
    
    // –ö–†–ò–¢–ò–ß–ù–û: –û—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π peer ID —Ö–æ—Å—Ç–∞ –ø—Ä–∏ –ø–æ–∫–∏–¥–∞–Ω–∏–∏ –∫–æ–º–Ω–∞—Ç—ã
    if (roomId.value && isHost.value) {
      console.log('üóëÔ∏è Clearing saved host peer ID for room:', roomId.value)
      peerService.clearSavedHostId(roomId.value)
      // –ù–µ —Ç—Ä–æ–≥–∞–µ–º ROOM_ID_STORAGE_KEY –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø—Ä–∏ —Å–ª—É—á–∞–π–Ω–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ –≤–∫–ª–∞–¥–∫–∏ —Ö–æ—Å—Ç–∞ roomId —Å–æ—Ö—Ä–∞–Ω—è–ª—Å—è
    }

    // –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç —Å–µ—Ç–∏ –∏ —á–∏—Å—Ç–∏–º —Å–µ—Å—Å–∏—é/—Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    console.log('üîå LEAVE ROOM: Calling peerService.disconnect()')
    peerService.disconnect()
    console.log('üßπ LEAVE ROOM: Calling clearSession()')
    clearSession()
    // –ß–∏—Å—Ç–∏–º –≤—Å–µ game-–ø—Ä–µ—Ñ–∏–∫—Å –∫–ª—é—á–∏, –Ω–∏–∫–Ω–µ–π–º —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ (–±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞)
    console.log('üóëÔ∏è LEAVE ROOM: Calling removeGameItemsByPrefix()')
    removeGameItemsByPrefix()

    // –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å Pinia state –∫ –¥–µ—Ñ–æ–ª—Ç—É
    // 1) –ë–∞–∑–æ–≤—ã–µ refs
    myPlayerId.value = ''
    isHost.value = false
    hostId.value = ''
    roomId.value = ''
    connectionStatus.value = 'disconnected'
    gameMode.value = 'basic'
    gamePhase.value = 'lobby'
    currentRound.value = 1

    // 2) –ù–∏–∫–Ω–µ–π–º —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –∫–ª—é—á–µ, –∑–∞—Ç–µ–º –æ—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π ref
    if (!myNickname.value.startsWith(NICKNAME_PREFIX)) {
      try {
        setNickname(myNickname.value || generateDefaultNickname())
      } catch {}
    }
    myNickname.value = ''

    // 3) –°–±—Ä–æ—Å –≤–µ—Ä—Å–∏–∏/—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    currentVersion.value = 0
    initReceived.value = false
    lastServerTime.value = 0
    pendingDiffs.value.clear()
    if (_snapshotTimeoutHandle) {
      clearTimeout(_snapshotTimeoutHandle)
      _snapshotTimeoutHandle = null
    }
    _acceptLegacyAsInit.value = false
    gotFreshState.value = false

    // Migration state reset removed
    try {
      if (peerService.isInHostRecoveryGracePeriod()) {
        peerService.cancelHostRecoveryGracePeriod()
      }
    } catch {}

    // 5) –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã –∫ –¥–µ—Ñ–æ–ª—Ç—É
    gameState.value = {
      roomId: '',
      gameStarted: false,
      players: [],
      litUpPlayerId: null,
      maxPlayers: GAME_CONFIG.MAX_PLAYERS,
      hostId: '',
      createdAt: 0,
      votingCards: {},
      bettingCards: {},
      currentTurn: 0,
      scores: {},
      // –î–ª—è —Ä–µ–∂–∏–º–∞ 2.0 (advanced)
      answers: {},
      guesses: {},
      currentQuestion: null,
      votes: {},
      bets: {},
    }

    // 6) –°–±—Ä–æ—Å –ª—é–±—ã—Ö runtime-—Ö—Ä–∞–Ω–∏–ª–∏—â —Å–Ω–∞–ø—à–æ—Ç–æ–≤
    try {
      storageSafe.nsRemove('game', 'hostGameStateSnapshot')
    } catch {}
    
    // –ö–†–ò–¢–ò–ß–ù–û: –û—á–∏—â–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ Pinia —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∞–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
    try {
      storageSafe.nsRemove('global', 'piniaState')
      console.log('üóëÔ∏è Cleared global Pinia state to prevent automatic session restoration')
    } catch {}
    
    // 7) –°–±—Ä–æ—Å —É—Å—Ç–æ–π—á–∏–≤–æ–≥–æ playerId
    try {
      clearStablePlayerId()
    } catch {}

    console.log('‚úÖ Pinia state fully reset to defaults after leaving room')
    
    // –ö–†–ò–¢–ò–ß–ù–û: –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–æ–±—Ä–æ–≤–æ–ª—å–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞ –≤ –∫–æ–Ω—Ü–µ
    isVoluntaryLeaving = false
    console.log('üîÑ VOLUNTARY LEAVE: Reset voluntary leaving flag')
    
    console.log('üèÅ LEAVE ROOM: Function completed successfully')
  }

  // –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è: –≤—ã—á–∏—Å–ª—è–µ–º—ã–µ –ø–æ–º–æ—â–Ω–∏–∫–∏ –¥–ª—è UI
  const isCurrentUserAbsent = computed<boolean>(() => {
    const me = myPlayerId.value
    const st = gameState.value.presence?.[me]
    return st === 'absent'
  })

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ARIA-live: –≤—ã–∑—ã–≤–∞–π—Ç–µ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö –ø—Ä–∏ —Å–æ–±—ã—Ç–∏—è—Ö user_left_broadcast/user_joined_broadcast
  const ariaAnnounce = (text: string) => {
    try {
      const regionId = 'aria-live-region'
      let region = document.getElementById(regionId)
      if (!region) {
        region = document.createElement('div')
        region.id = regionId
        region.setAttribute('role', 'status')
        region.setAttribute('aria-live', 'polite')
        region.style.position = 'absolute'
        region.style.width = '1px'
        region.style.height = '1px'
        region.style.overflow = 'hidden'
        region.style.clip = 'rect(1px, 1px, 1px, 1px)'
        region.style.clipPath = 'inset(50%)'
        region.style.whiteSpace = 'nowrap'
        region.style.border = '0'
        document.body.appendChild(region)
      }
      region.textContent = text
    } catch {}
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∏–∫–Ω–µ–π–º–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  if (!myNickname.value) {
    // –ü—ã—Ç–∞–µ–º—Å—è –≤–∑—è—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –Ω–∏–∫ –∏–∑ non-prefixed –∫–ª—é—á–∞
    myNickname.value = getNickname() || generateDefaultNickname()
  }

  // –ü—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏, –µ—Å–ª–∏ –º—ã –±—É–¥–µ–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É ‚Äî –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—ã–π roomId
  const preloadedRoomId = loadPersistentRoomId()
  if (preloadedRoomId && !roomId.value) {
    roomId.value = preloadedRoomId
  }

  // –†–µ–∞–∫—Ü–∏—è –Ω–∞ –ø—É–ª—å—Å/–∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ —Ö–æ—Å—Ç–∞ (peerService —É–∂–µ –≤—ã–∑—ã–≤–∞–µ—Ç onHostDisconnected callback)
  try {
    peerService.onHostDisconnected(async () => {
      console.log('peerService reported host disconnection, starting handling')
      await onHostDisconnectedSafe()
    })
  } catch {}

  // ===== DEBUG: –°–Ω–∏–º–æ–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –∂—É—Ä–Ω–∞–ª –¥–µ–π—Å—Ç–≤–∏–π =====
  /**
   * –í—ã–≤–æ–¥–∏—Ç –≤ –∫–æ–Ω—Å–æ–ª—å –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π —Å–Ω–∏–º–æ–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ –∏ –∏–≥—Ä—ã.
   * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç: –º–æ–π –Ω–∏–∫/ID/—Ä–æ–ª—å (—Ö–æ—Å—Ç/–∫–ª–∏–µ–Ω—Ç), —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º/—Ñ–∞–∑—É, –∫–æ–º–Ω–∞—Ç—É, —Ö–æ—Å—Ç–∞,
   * –Ω–æ–º–µ—Ä —Ä–∞—É–Ω–¥–∞ –∏ —Å—á–µ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤/—Å—Ç–∞–≤–æ–∫. –£–¥–æ–±–Ω–æ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∑–∞–≤–∏—Å–∞–Ω–∏–π.
   */
  function debugSnapshot(reason: string) {
    if (!isDebug.value) return
    try {
      const me = myPlayer.value
      const activePlayers = (gameState.value.players || []).filter(
        (p) => gameState.value.presence?.[p.id] !== 'absent',
      )
      const snapshot = {
        reason,
        now: new Date().toISOString(),
        roomId: roomId.value || gameState.value.roomId,
        hostId: hostId.value || gameState.value.hostId,
        isHost: isHost.value,
        my: {
          id: myPlayerId.value,
          nickname: me?.nickname,
          color: me?.color,
        },
        game: {
          mode: gameState.value.gameMode ?? gameMode.value,
          phase: gameState.value.phase ?? gamePhase.value,
          round: currentRound.value,
          playersTotal: gameState.value.players.length,
          playersActive: activePlayers.length,
          currentTurn: gameState.value.currentTurn,
          currentTurnPlayerId: gameState.value.currentTurnPlayerId,
          currentQuestion: gameState.value.currentQuestion,
        },
        votes: {
          votedCount: Object.keys(gameState.value.votes || {}).length,
          voteCounts: gameState.value.voteCounts || {},
        },
        bets: {
          betsCount: Object.keys(gameState.value.bets || {}).length,
        },
        scores: gameState.value.scores || {},
      }
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ª–æ–≥ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —á—Ç–µ–Ω–∏—è

      console.groupCollapsed('üßæ –°–Ω–∏–º–æ–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è')

      console.log(JSON.stringify(snapshot, null, 2))

      console.groupEnd()
    } catch {}
  }

  // –ü—Ä–æ—Å—Ç–æ–π –∂—É—Ä–Ω–∞–ª –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∫–ª—é—á–µ–≤—ã—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤/—Å–æ–±—ã—Ç–∏–π
  function logAction(event: string, payload?: Record<string, unknown>) {
    if (!isDebug.value) return
    try {
      const entry = {
        t: new Date().toISOString(),
        event,
        me: { id: myPlayerId.value, isHost: isHost.value },
        phase: gameState.value.phase ?? gamePhase.value,
        mode: gameState.value.gameMode ?? gameMode.value,
        round: currentRound.value,
        ...(payload || {}),
      }

      console.log('ü™µ [Action]', entry)
    } catch {}
  }

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–Ω–∏–º–æ–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –∫–ª—é—á–µ–≤—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö ‚Äî –ø–æ–º–æ–≥–∞–µ—Ç –ª–æ–≤–∏—Ç—å ¬´–∑–∞–ª–∏–ø—ã –Ω–∞ 3-–º —Ä–∞—É–Ω–¥–µ¬ª
  watch(
    () => [
      gameState.value.phase,
      gameState.value.gameMode,
      currentRound.value,
      Object.keys(gameState.value.votes || {}).length,
      Object.keys(gameState.value.bets || {}).length,
    ],
    ([phase, mode, round, votedCount, betsCount]) => {
      debugSnapshot(
        `watch:phase=${phase};mode=${mode};round=${round};voted=${votedCount};bets=${betsCount}`,
      )
    },
    { deep: false },
  )

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
  watch(
    [gameState, myPlayerId, myNickname, isHost, hostId, roomId, connectionStatus],
    () => {
      // –ü—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ —Ñ–∏–∫—Å–∏—Ä—É–µ–º –º–µ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–∏
      if (connectionStatus.value === 'connected') {
        sessionTimestamp.value = Date.now()
      }
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã
      if (connectionStatus.value === 'connected' && myPlayerId.value) {
        saveSession()
      }
    },
    { deep: true },
  )

  // -------- –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–µ —ç–∫—à–µ–Ω—ã-–æ–±–µ—Ä—Ç–∫–∏: –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Ö–æ—Å—Ç—É --------

  const clientDrawQuestion = () => {
    if (!gameState.value.currentTurnPlayerId) return
    if (isHost.value) {
      // –•–æ—Å—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ –≤ —Å–≤–æ–π —Ö–æ–¥
      drawCard(myPlayerId.value)
    } else {
      // –ö–ª–∏–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —è–≤–Ω—ã–π —Å–≤–æ–π ID
      peerService.sendMessage(
        hostId.value,
        makeMessage(
          'draw_question_request',
          { playerId: myPlayerId.value },
          {
            roomId: roomId.value || gameState.value.roomId,
            fromId: myPlayerId.value,
            ts: Date.now(),
          },
        ),
      )
    }
  }

  // --- –ü—É–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–Ω–æ–ø–∫–∏ ---
  const pendingEvents = ref<{ type: string; payload: any; attempts: number }[]>([])
  const isVoteSubmitting = ref(false)
  const isAnswerSubmitting = ref(false) // <-- –î–æ–±–∞–≤–ª–µ–Ω–æ
  const isGuessSubmitting = ref(false) // <-- –î–æ–±–∞–≤–ª–µ–Ω–æ

  const clientSubmitVote = (votes: string[]) => {
    if (isHost.value) {
      submitVote(myPlayerId.value, votes)
    } else {
      if (isVoteSubmitting.value) return
      isVoteSubmitting.value = true
      const event = {
        type: 'submit_vote' as const,
        payload: { voterId: myPlayerId.value, targetIds: votes },
        attempts: 1,
      }
      pendingEvents.value.push(event)
      sendVoteEvent(event)
    }
  }

  // --- –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤ ---
  const voteAckMap = ref<Record<string, boolean>>({})

  function sendVoteEvent(event: { type: 'submit_vote'; payload: any; attempts: number }) {
    const voteKey = JSON.stringify(event.payload)
    console.log('[VOTE] –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:', { voteKey, attempts: event.attempts })
    peerService.sendMessage(
      hostId.value,
      makeMessage(
        event.type,
        { ...event.payload, stateVersion: gameState.value.stateVersion },
        {
          roomId: roomId.value || gameState.value.roomId,
          fromId: myPlayerId.value,
          ts: Date.now(),
        },
      ),
    )
    // –¢–∞–π–º–∞—É—Ç –Ω–∞ —Å–ª—É—á–∞–π –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è ack
    setTimeout(() => {
      if (!voteAckMap.value[voteKey] && pendingEvents.value.includes(event) && event.attempts < 3) {
        event.attempts++
        console.log('[VOTE] –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:', { voteKey, attempts: event.attempts })
        sendVoteEvent(event)
      } else if (!voteAckMap.value[voteKey] && pendingEvents.value.includes(event)) {
        // –ü—Ä–µ–≤—ã—à–µ–Ω–æ —á–∏—Å–ª–æ –ø–æ–ø—ã—Ç–æ–∫ ‚Äî —É–¥–∞–ª—è–µ–º –∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º
        console.warn(
          '[VOTE] –ü—Ä–µ–≤—ã—à–µ–Ω–æ —á–∏—Å–ª–æ –ø–æ–ø—ã—Ç–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è, —É–¥–∞–ª—è–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏:',
          voteKey,
        )
        pendingEvents.value.splice(pendingEvents.value.indexOf(event), 1)
        isVoteSubmitting.value = false
      }
    }, 3000)
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ACK –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –∏ –¥–æ–≥–∞–¥–æ–∫
  peerService.onMessage('answer_ack' as any, (message: any) => {
    console.log('[ACK] –ü–æ–ª—É—á–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞:', message.payload);
    isAnswerSubmitting.value = false;
  });

  peerService.onMessage('guess_ack' as any, (message: any) => {
    console.log('[ACK] –ü–æ–ª—É—á–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–≥–∞–¥–∫–∏:', message.payload);
    isGuessSubmitting.value = false;
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ vote_ack –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
  peerService.onMessage('vote_ack' as any, (message: any) => {
    const payload = message.payload || {}
    const voteKey = JSON.stringify(payload)
    console.log('[VOTE_ACK] –ü–æ–ª—É—á–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:', voteKey)
    voteAckMap.value[voteKey] = true
    // –£–¥–∞–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
    const idx = pendingEvents.value.findIndex((e) => JSON.stringify(e.payload) === voteKey)
    if (idx !== -1) {
      console.log('[VOTE_ACK] –£–¥–∞–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É:', voteKey)
      pendingEvents.value.splice(idx, 1)
      isVoteSubmitting.value = false
    } else {
      console.warn('[VOTE_ACK] –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ, –Ω–æ —Å–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥–∏:', voteKey)
    }
  })

  // --- –ü—É–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫ –∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–Ω–æ–ø–∫–∏ ---
  const pendingBets = ref<{ type: string; payload: any; attempts: number }[]>([])
  const isBetSubmitting = ref(false)

  const clientSubmitBet = (bet: '0' | '¬±' | '+') => {
    if (isHost.value) {
      submitBet(myPlayerId.value, bet)
    } else {
      if (isBetSubmitting.value) return
      isBetSubmitting.value = true
      const event = {
        type: 'submit_bet' as const,
        payload: { playerId: myPlayerId.value, bet },
        attempts: 1,
      }
      pendingBets.value.push(event)
      sendBetEvent(event)
    }
  }

  function sendBetEvent(event: { type: 'submit_bet'; payload: any; attempts: number }) {
    peerService.sendMessage(
      hostId.value,
      makeMessage(
        event.type,
        { ...event.payload, stateVersion: gameState.value.stateVersion },
        {
          roomId: roomId.value || gameState.value.roomId,
          fromId: myPlayerId.value,
          ts: Date.now(),
        },
      ),
    )
    // –¢–∞–π–º–∞—É—Ç –Ω–∞ —Å–ª—É—á–∞–π –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –æ—Ç–≤–µ—Ç–∞
    setTimeout(() => {
      if (pendingBets.value.includes(event) && event.attempts < 3) {
        event.attempts++
        sendBetEvent(event)
      } else if (pendingBets.value.includes(event)) {
        // –ü—Ä–µ–≤—ã—à–µ–Ω–æ —á–∏—Å–ª–æ –ø–æ–ø—ã—Ç–æ–∫ ‚Äî —É–¥–∞–ª—è–µ–º –∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º
        pendingBets.value.splice(pendingBets.value.indexOf(event), 1)
        isBetSubmitting.value = false
      }
    }, 3000)
  }

  const clientSubmitAnswer = (answer: string) => {
    if (isHost.value) {
      // –•–æ—Å—Ç –ª–æ–∫–∞–ª—å–Ω–æ –∑–∞–ø–æ–ª–Ω—è–µ—Ç –∏ –¥–≤–∏–≥–∞–µ—Ç —Ñ–∞–∑—É
      if (
        gamePhase.value === 'answering' &&
        myPlayerId.value === gameState.value.answeringPlayerId
      ) {
        gameState.value.advancedAnswer = answer
        gamePhase.value = 'guessing'
        gameState.value.phase = 'guessing'
        broadcastGameState()
        logAction('advanced_answer_submitted_switch_to_guessing', {
          currentQuestion: gameState.value.currentQuestion,
        })
        debugSnapshot('after_answer_to_guessing')
      }
    } else {
      peerService.sendMessage(
        hostId.value,
        makeMessage(
          'submit_answer',
          { playerId: myPlayerId.value, answer },
          {
            roomId: roomId.value || gameState.value.roomId,
            fromId: myPlayerId.value,
            ts: Date.now(),
          },
        ),
      )
    }
  }

  // --- –ü—É–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–æ–≥–∞–¥–æ–∫ –∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–Ω–æ–ø–∫–∏ ---
  const pendingGuesses = ref<{ type: string; payload: any; attempts: number }[]>([])

  const clientSubmitGuess = (guess: string) => {
    if (isGuessSubmitting.value) return; // <-- –î–æ–±–∞–≤–ª–µ–Ω–æ
    if (isHost.value) {
      if (!gameState.value.guesses) gameState.value.guesses = {}
      gameState.value.guesses[myPlayerId.value] = guess
      broadcastGameState()
      logAction('advanced_guess_submitted', { guessFor: myPlayerId.value })
      debugSnapshot('after_guess_submit')
    } else {
      if (isGuessSubmitting.value) return
      isGuessSubmitting.value = true
      const event = {
        type: 'submit_guess' as const,
        payload: { playerId: myPlayerId.value, guess },
        attempts: 1,
      }
      pendingGuesses.value.push(event)
      sendGuessEvent(event)
    }
  }

  function sendGuessEvent(event: { type: 'submit_guess'; payload: any; attempts: number }) {
    peerService.sendMessage(
      hostId.value,
      makeMessage(
        event.type,
        { ...event.payload, stateVersion: gameState.value.stateVersion },
        {
          roomId: roomId.value || gameState.value.roomId,
          fromId: myPlayerId.value,
          ts: Date.now(),
        },
      ),
    )
    // –¢–∞–π–º–∞—É—Ç –Ω–∞ —Å–ª—É—á–∞–π –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –æ—Ç–≤–µ—Ç–∞
    setTimeout(() => {
      if (pendingGuesses.value.includes(event) && event.attempts < 3) {
        event.attempts++
        sendGuessEvent(event)
      } else if (pendingGuesses.value.includes(event)) {
        // –ü—Ä–µ–≤—ã—à–µ–Ω–æ —á–∏—Å–ª–æ –ø–æ–ø—ã—Ç–æ–∫ ‚Äî —É–¥–∞–ª—è–µ–º –∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º
        pendingGuesses.value.splice(pendingGuesses.value.indexOf(event), 1)
        isGuessSubmitting.value = false
      }
    }, 3000)
  }

  // –õ—é–±–æ–π –∏–≥—Ä–æ–∫ (—Ö–æ—Å—Ç –∏–ª–∏ –∫–ª–∏–µ–Ω—Ç) –º–æ–∂–µ—Ç –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥ –ø–æ—Å–ª–µ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞
  // –í—ã–±–æ—Ä –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –≤ advanced: –¥–µ–ª–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (answeringPlayerId)
  const submitWinners = (winnerIds: string[]) => {
    if (!isHost.value) return

    // –í–µ–¥–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é –≤ gameState –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ
    const mode = gameState.value.gameMode ?? gameMode.value
    const phase = gameState.value.phase ?? gamePhase.value
    if (mode !== 'advanced') return
    if (phase !== 'selecting_winners') return

    const chooserId = gameState.value.answeringPlayerId
    if (!chooserId) return

    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º winners –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Ö–æ—Å—Ç–∞: —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ, —Ç–æ–ª—å–∫–æ —Ç–µ —É –∫–æ–≥–æ –µ—Å—Ç—å –≤–∞–ª–∏–¥–Ω–∞—è –¥–æ–≥–∞–¥–∫–∞ –≤ —Ç–µ–∫—É—â–µ–º —Ä–∞—É–Ω–¥–µ,
    // –∏—Å–∫–ª—é—á–∞—è chooserId –∏ –∏–≥—Ä–æ–∫–æ–≤ –±–µ–∑ –¥–æ–≥–∞–¥–∫–∏
    const validSet = new Set(
      (winnerIds || []).filter(
        (id) =>
          id &&
          id !== chooserId &&
          // –µ—Å—Ç—å –¥–æ–≥–∞–¥–∫–∞ –∏–º–µ–Ω–Ω–æ –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ
          !!(
            gameState.value.guesses &&
            typeof gameState.value.guesses[id] === 'string' &&
            gameState.value.guesses[id].trim().length > 0
          ) &&
          // –∏–≥—Ä–æ–∫ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
          gameState.value.players.some((p) => p.id === id),
      ),
    )
    const winners = Array.from(validSet)

    if (!gameState.value.roundScores) gameState.value.roundScores = {}
    gameState.value.roundWinners = winners

    // –ù–∞—á–∏—Å–ª—è–µ–º –ø–æ 1 –±–∞–ª–ª—É –∫–∞–∂–¥–æ–º—É –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É (—Ç–æ–ª—å–∫–æ —Ç–µ–º, –∫—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª –¥–æ–≥–∞–¥–∫—É)
    winners.forEach((pid) => {
      gameState.value.roundScores![pid] = (gameState.value.roundScores![pid] || 0) + 1
      gameState.value.scores[pid] = (gameState.value.scores[pid] || 0) + 1
    })

    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∏—Ç–æ–≥–∞–º advanced
    gamePhase.value = 'advanced_results'
    gameState.value.phase = 'advanced_results'
    broadcastGameState()
  }

  // –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π —Ö–µ–ª–ø–µ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
  const clientSubmitWinners = (winnerIds: string[]) => {
    if (isHost.value) {
      submitWinners(winnerIds)
    } else {
      peerService.sendMessage(
        hostId.value,
        makeMessage(
          'submit_winners',
          { chooserId: myPlayerId.value, winners: winnerIds },
          {
            roomId: roomId.value || gameState.value.roomId,
            fromId: myPlayerId.value,
            ts: Date.now(),
          },
        ),
      )
    }
  }

  // Migration state references removed

  const clientNextRound = (force = false) => {
    // –î–µ–ª–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω—ã–º: –¥–æ–ø—É—Å–∫–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ "–°–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥" –∫–∞–∫ –≤ 'results', —Ç–∞–∫ –∏ –≤ 'advanced_results'
    const isResultsPhase = gamePhase.value === 'results' || gamePhase.value === 'advanced_results'

    if (isHost.value) {
      // –ï—Å–ª–∏ –º—ã —Ö–æ—Å—Ç –∏ —É–∂–µ –Ω–µ –≤ —Ñ–∞–∑–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –Ω–æ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ –∫–Ω–æ–ø–∫–∞ –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ ‚Äî
      // –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –±–µ–∑ –æ—à–∏–±–æ–∫ (–∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å).
      if (!isResultsPhase) return

      const totalPlayers = gameState.value.players.length

      if (!force) {
        if (gameMode.value === 'basic') {
          // –í basic –∫–Ω–æ–ø–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–¥—Å—á–µ—Ç–∞ –æ—á–∫–æ–≤ (results),
          // –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–µ –¥–æ–ª–∂–Ω—ã –ª–æ–º–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
          const allVoted = Object.keys(gameState.value.votes || {}).length >= totalPlayers
          const allBet = Object.keys(gameState.value.bets || {}).length >= totalPlayers
          const resultsReady = gamePhase.value === 'results'
          if (!(allVoted && allBet && resultsReady)) return
        } else {
          // advanced: –¥–æ–ø—É—Å–∫–∞–µ–º, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –º–æ–≥ –Ω–∞–∂–∞—Ç—å –∏–∑ 'advanced_results'
          const votedCount = Object.keys(gameState.value.votes || {}).length
          const guessesCount = Object.keys(gameState.value.guesses || {}).filter(
            (pid) => pid !== gameState.value.answeringPlayerId,
          ).length
          const requiredGuesses = Math.max(0, totalPlayers - 1)
          const resultsReady = gamePhase.value === 'advanced_results'
          if (!(votedCount >= totalPlayers && guessesCount >= requiredGuesses && resultsReady))
            return
        }
      }

      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π/–æ–±—ã—á–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ä–∞—É–Ω–¥—É
      finishRoundHostOnly(force)
    } else {
      // –ö–ª–∏–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å —Ö–æ—Å—Ç—É.
      // –ï—Å–ª–∏ —Ö–æ—Å—Ç —É–∂–µ –ø–µ—Ä–µ—à–µ–ª –∏–∑ —Ñ–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–∞–ª—å—à–µ, –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –∫–ª–∏–∫–∏ –Ω–µ –≤—ã–∑–æ–≤—É—Ç –ø–æ–±–æ—á–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ ‚Äî —Ö–æ—Å—Ç –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç.
      peerService.sendMessage(
        hostId.value,
        makeMessage('next_round_request', { playerId: myPlayerId.value, force } as any, {
          roomId: roomId.value || gameState.value.roomId,
          fromId: myPlayerId.value,
          ts: Date.now(),
        }),
      )
    }
  }

  // UI helper: –ø—Ä–∏–∑–Ω–∞–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è/–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  const uiConnecting = computed<boolean>(() => {
    return connectionStatus.value === 'connecting' || restorationState.value !== 'idle'
  })

  // ===== –î–ï–¢–ï–†–ú–ò–ù–ò–†–û–í–ê–ù–ù–ê–Ø –≠–õ–ï–ö–¶–ò–Ø –•–û–°–¢–ê –ü–û –ú–ò–ù–ò–ú–ê–õ–¨–ù–û–ú–£ ID + HEALTH CHECK =====

  // –ù–∞—Ö–æ–¥–∏—Ç –∏–≥—Ä–æ–∫–∞ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º id (—Å—Ç—Ä–æ–∫–æ–≤–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ, id === peerId)
  function getMinIdHostCandidate(players: Player[]): Player | null {
    if (!players || players.length === 0) return null
    const now = Date.now()
    // —Ñ–∏–ª—å—Ç—Ä—É–µ–º ¬´–º–µ—Ä—Ç–≤—ã–µ¬ª id, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–¥–∞–≤–Ω–æ –ø–∞–¥–∞–ª–∏ –Ω–∞ connect
    const alive = players.filter((p) => {
      if (!p?.id) return false
      const until = deadHostBlacklist.get(p.id)
      return !(until && until > now)
    })
    const sorted = (alive.length ? alive : players).sort((a, b) =>
      (a.id || '').localeCompare(b.id || ''),
    )
    return sorted[0] || null
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º —Ö–æ—Å—Ç–µ
  function broadcastNewHostId(newHostId: string) {
    try {
      const msg = makeMessage(
        'new_host_id' as any,
        {
          roomId: roomId.value || gameState.value.roomId,
          newHostId,
        } as any,
        {
          roomId: roomId.value || gameState.value.roomId,
          fromId: myPlayerId.value,
          ts: Date.now(),
        },
      )
      peerService.broadcastMessage(msg)
      console.log('üì¢ Broadcasted new_host_id:', newHostId)
    } catch (e) {
      console.warn('Failed to broadcast new_host_id', e)
    }
  }

  // –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤, —á—Ç–æ –æ–Ω–∏ –æ–±–Ω–æ–≤–∏–ª–∏ —É —Å–µ–±—è –Ω–æ–≤–æ–≥–æ —Ö–æ—Å—Ç–∞
  async function waitClientsAckNewHost(newHostId: string, timeoutMs = 3000): Promise<void> {
    return new Promise((resolve) => {
      const expectedIds = new Set<string>(
        (gameState.value.players || []).map((p) => p.id).filter((pid) => pid && pid !== newHostId),
      )
      if (expectedIds.size === 0) {
        resolve()
        return
      }

      const handler = (m: any) => {
        try {
          if ((m as any).type !== 'client_host_update_ack') return
          const payload = (m as any).payload || {}
          if (!payload || payload.hostId !== newHostId) return
          const from = m.meta?.fromId
          if (from && expectedIds.has(from)) {
            expectedIds.delete(from)
            if (expectedIds.size === 0) {
            }
          }
        } catch {}
      }

      // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ACK
      peerService.onMessage('client_host_update_ack', handler as any)

      // –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è
      setTimeout(() => {
        try {
          peerService.clearMessageHandlers()
          setupHostMessageHandlers()
              } catch {}
        console.warn('Timeout waiting for client_host_update_ack, continuing...')
        resolve()
      }, timeoutMs)
    })
  }

  // –ü—É–±–ª–∏–∫—É–µ–º –ø–æ–ª–Ω—ã–π —Å–Ω–∏–º–æ–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º (–Ω–æ–≤—ã–π —Ö–æ—Å—Ç)
  // NOTE: –µ—Å–ª–∏ –ø–æ–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É–∂–µ –æ–±—ä—è–≤–ª–µ–Ω–∞ –≤—ã—à–µ, –æ—Å—Ç–∞–≤–ª—è–µ–º –æ–¥–Ω—É —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é. –ó–¥–µ—Å—å ‚Äî –æ—Å–Ω–æ–≤–Ω–∞—è –≤–∞–ª–∏–¥–Ω–∞—è –≤–µ—Ä—Å–∏—è.
  function hostBroadcastFullSnapshot() {
    try {
      const payload: any = {
        meta: {
          roomId: roomId.value || gameState.value.roomId,
          version: currentVersion.value || 0,
          serverTime: Date.now(),
        },
        state: { ...gameState.value },
      }
      
      // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–Ω–∞–ø—à–æ—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      console.log('üì§ HOST broadcasting state_snapshot with players:', {
        hostId: payload.state.hostId,
        playersCount: payload.state.players?.length || 0,
        players: payload.state.players?.map((p: any) => ({ 
          id: p.id, 
          nickname: p.nickname, 
          isHost: p.isHost 
        })) || []
      })
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ –≤—Å–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–º –∫–æ–Ω–Ω–µ–∫—Ç–∞–º
      peerService.getConnectedPeers().forEach((pid: string) => {
        try {
          peerService.hostSendSnapshot(pid, payload)
        } catch {}
      })
      console.log('üì§ New host broadcasted state_snapshot to all clients')
    } catch (e) {
      console.warn('Failed to broadcast full snapshot by new host', e)
    }
  }

  // –ü–æ–¥–Ω—è—Ç—å —Å–µ–±—è –≤ —Ö–æ—Å—Ç—ã –∏ —Ä–∞–∑–æ—Å–ª–∞—Ç—å –≤—Å–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è + —Å–Ω–∞–ø—à–æ—Ç
  async function promoteToHostDeterministic(): Promise<void> {
    // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–∫ —Ö–æ—Å—Ç (—Å–æ–∑–¥–∞–µ—Ç Peer/ID, –≤–∫–ª—é—á–∞–µ—Ç heartbeat —Ö–æ—Å—Ç–∞)
    await restoreAsHost()

    // –í —Å–æ—Å—Ç–æ—è–Ω–∏–∏ hostId –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ –Ω–æ–≤—ã–π peer id
    const newHostPeerId = myPlayerId.value
    // –í–∞–∂–Ω—ã–π –º–æ–º–µ–Ω—Ç: –≤ players[] –º–æ–π –æ–±—ä–µ–∫—Ç —É–∂–µ –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –º–æ–π –Ω–æ–≤—ã–π id (restoreAsHost –¥–µ–ª–∞–µ—Ç —ç—Ç–æ)

    // –†–∞–∑–æ—Å–ª–∞—Ç—å new_host_id
    broadcastNewHostId(newHostPeerId)

    // –î–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞–º ack'–Ω—É—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ö–æ—Å—Ç–∞
    await waitClientsAckNewHost(newHostPeerId, 2000)

    // –†–∞–∑–æ—Å–ª–∞—Ç—å state_snapshot, —á—Ç–æ–±—ã –∫–ª–∏–µ–Ω—Ç—ã –æ–±–Ω–æ–≤–∏–ª–∏ —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤/hostId
    hostBroadcastFullSnapshot()
    console.log('‚úÖ Deterministic host promotion finalized with snapshot')
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–º–µ–Ω—ã —Ö–æ—Å—Ç–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –∫–ª–∏–µ–Ω—Ç–∞:
  function setupClientNewHostHandlers() {
    // –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ new_host_id
    peerService.onMessage('new_host_id', (message: PeerMessage) => {
      const payload = (message as any).payload || {}
      const newHost = payload.newHostId as string
      const rid = payload.roomId as string
      console.log('üì• CLIENT received new_host_id:', newHost)

      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π hostId
      if (newHost) {
        hostId.value = newHost
        gameState.value.hostId = newHost
      }
      if (rid && !roomId.value) {
        roomId.value = rid
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ –Ω–æ–≤–æ–º—É —Ö–æ—Å—Ç—É
      try {
        peerService.sendMessage(
          newHost,
          makeMessage('client_host_update_ack' as any, { hostId: newHost, ok: true } as any, {
            roomId: roomId.value || gameState.value.roomId,
            fromId: myPlayerId.value,
            ts: Date.now(),
          }),
        )
        console.log('üì§ CLIENT sent client_host_update_ack to:', newHost)
      } catch (e) {
        console.warn('Failed to send client_host_update_ack', e)
      }

      // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ —Ä–µ–∂–∏–º –∫–ª–∏–µ–Ω—Ç–∞ –∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –Ω–æ–≤–æ–º—É —Ö–æ—Å—Ç—É –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
      isHost.value = false
      try {
        // –Ω–µ –ª–æ–º–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª –∫ —Ö–æ—Å—Ç—É –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç restoreAsClient –ø—É—Ç—å –ø–æ–∑–∂–µ
      } catch {}
    })
  }

  // –ñ—ë—Å—Ç–∫–∏–µ –≥–∞—Ä–∞–Ω—Ç–∏–∏ –ø—Ä–æ—Ç–∏–≤ –¥–≤–æ–π–Ω–æ–≥–æ takeover:
  // 1) –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ö–æ—Å—Ç –ø–æ min(id) –∏ —ç—Ç–æ –ù–ï –º—ã ‚Äî –∑–∞–ø—Ä–µ—â–∞–µ–º emergency takeover
  function shouldBlockEmergencyTakeover(): boolean {
    try {
      const players = (gameState.value.players || []).filter(Boolean)
      const candidate = getMinIdHostCandidate(players)
      if (candidate && candidate.id !== myPlayerId.value) {
        return true
      }
      return false
    } catch {
      return false
    }
  }

  // Emergency takeover logic removed - using simple approach

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è new_host_id (—Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞–∂–¥—ã –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç–æ—Ä–∞)
  try {
    setupClientNewHostHandlers()
  } catch {}

  // --- –°–ï–¢–ï–í–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ò–ì–†–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô –ò –†–û–õ–ï–í–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ---
  // –£–î–ê–õ–ï–ù–û: –¥—É–±–ª–∏—Ä—É—é—â–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è setupClientMessageHandlers/setupHostMessageHandlers (—Å–º. –≤—ã—à–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–µ—Ä—Å–∏–∏)
  // –ù–∏–∂–µ –æ—Å—Ç–∞–≤–ª–µ–Ω—ã —Ç–æ–ª—å–∫–æ —Ö–µ–ª–ø–µ—Ä—ã —Å–º–µ–Ω—ã —Ä–æ–ª–∏ –∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–π heartbeat –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä.

  // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∞–≤—Ç–æ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç–µ–∫—É—â–µ–º—É —Ö–æ—Å—Ç—É –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
  async function ensureConnectionToHost(): Promise<boolean> {
    const target = hostId.value || gameState.value.hostId
    if (!target) return false
    try {
      // –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ ‚Äî –æ–∫
      if ((peerService as any).hasConnection && (peerService as any).hasConnection(target)) {
        return true
      }
      // –µ—Å–ª–∏ –µ—Å—Ç—å –±–∞–∑–æ–≤—ã–π peer ‚Äî –ø—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞–ø—Ä—è–º—É—é
      if ((peerService as any).getPeer && (peerService as any).getPeer()) {
        const ok = await (peerService as any).connectToPeer(target)
        return !!ok
      }
      // –∫–∞–∫ fallback ‚Äî –ø—É—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ —Ö–æ—Å—Ç
      if ((peerService as any).connectToHost) {
        await (peerService as any).connectToHost(target)
        return true
      }
    } catch (e) {
      console.warn('ensureConnectionToHost failed:', e)
    }
    return false
  }

  // –ë–∞–∑–æ–≤—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–∫–ª–∏–µ–Ω—Ç—Å–∫–∞—è —Å—Ç–æ—Ä–æ–Ω–∞)
  peerService.onMessage('game_state_update', (message: PeerMessage) => {
    const state = (message as any).payload as any
    console.log('üì• CLIENT received game_state_update:', {
      players: Array.isArray(state?.players) ? state.players.length : -1,
      hostId: state?.hostId,
      roomId: state?.roomId,
      phase: state?.phase,
    })
    // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    try {
      gameState.value = { ...(gameState.value as any), ...(state || {}) }
      // –ï—Å–ª–∏ —Ö–æ—Å—Ç —Å–º–µ–Ω–∏–ª—Å—è ‚Äî —Ñ–∏–∫—Å–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
      if (state?.hostId && hostId.value !== state.hostId) {
        hostId.value = state.hostId
        gameState.value.hostId = state.hostId
      }
      if (state?.roomId && !roomId.value) {
        roomId.value = state.roomId
      }
    } catch (e) {
      console.warn('Failed to apply game_state_update:', e)
    }
  })

  peerService.onMessage('state_snapshot', (message: PeerMessage) => {
    const payload = (message as any).payload as any
    const st = payload?.state
    console.log('üì• CLIENT received state_snapshot:', {
      meta: payload?.meta,
      hasRoom: !!st?.roomId,
      currentRoom: roomId.value,
      incomingRoom: st?.roomId,
      playersInPayload: Array.isArray(st?.players) ? st.players.length : -1,
    })
    if (st) {
      try {
        gameState.value = { ...(gameState.value as any), ...st }
        if (st.hostId) {
          hostId.value = st.hostId
        }
        if (st.roomId) {
          roomId.value = st.roomId
        }
        // –ï—Å–ª–∏ —Å–Ω–∞–ø—à–æ—Ç –≤–∫–ª—é—á–∞–µ—Ç –º–æ–µ–≥–æ –∏–≥—Ä–æ–∫–∞ ‚Äî —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º myPlayerId –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        if (myPlayerId.value && !st.players?.some((p: any) => p?.id === myPlayerId.value)) {
          // –Ω–µ –∑–∞—Ç–∏—Ä–∞–µ–º, —Ö–æ—Å—Ç –ø—Ä–∏—à–ª—ë—Ç player_id_updated
        }
      } catch (e) {
        console.warn('Failed to apply snapshot:', e)
      }
    }
  })

  peerService.onMessage('player_id_updated', (message: PeerMessage) => {
    const payload = (message as any).payload as { oldId: string; newId: string }
    console.log('üîÑ CLIENT: Received player_id_updated message:', {
      oldId: payload?.oldId,
      newId: payload?.newId,
    })
    if (payload?.oldId && payload?.newId) {
      if (myPlayerId.value && myPlayerId.value === payload.oldId) {
        console.log('‚úÖ CLIENT: Updating myPlayerId from old ID to new ID:', payload)
        myPlayerId.value = payload.newId
        // —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —É—Å—Ç–æ–π—á–∏–≤—ã–π id –¥–ª—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        try {
          saveStablePlayerId(payload.newId)
        } catch {}
      } else {
        console.log('‚ùå CLIENT: Ignoring player_id_updated message - old ID does not match:', {
          currentId: myPlayerId.value,
          oldId: payload?.oldId,
        })
      }
    }
  })

  // –•—ç–Ω–¥–ª–µ—Ä —Å–º–µ–Ω—ã —Ö–æ—Å—Ç–∞ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º
  peerService.onMessage('new_host_id', (message: PeerMessage) => {
    const payload = (message as any).payload || {}
    const newHost = payload.newHostId as string
    const rid = payload.roomId as string
    console.log('üì• CLIENT received new_host_id:', newHost)
    if (newHost) {
      hostId.value = newHost
      gameState.value.hostId = newHost
    }
    if (rid && !roomId.value) {
      roomId.value = rid
    }
    // ACK —É–∂–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤—ã—à–µ –≤ —Ñ–∞–π–ª–µ ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
  })

  // Heartbeat –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è
  peerService.onMessage('heartbeat', (message: PeerMessage) => {
    const payload = (message as any).payload || {}
    const fromId = payload?.hostId || (message as any).meta?.fromId
    if (fromId) {
      peerService.handleHeartbeat(fromId)
    }
  })
  // end of setupClientMessageHandlers (–ø–µ—Ä–µ–µ—Ö–∞–≤—à–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏)
  // ====== –•–ï–õ–ü–ï–†–´ DISCOVERY/RESTORE –° –ü–†–û–í–ï–†–ö–û–ô –î–û–°–¢–£–ü–ù–û–°–¢–ò –•–û–°–¢–ê ======
  async function isHostReachableOnce(hostPeerId: string, timeoutMs = 1500): Promise<boolean> {
    try {
      const basePeer = (peerService as any).getPeer?.()
      if (!basePeer || !basePeer.open) return false
      const result = await (peerService as any).connectToPeer?.(hostPeerId)
      if (result) return true
      return false
    } catch {
      return false
    } finally {
      // –Ω–µ –æ—Å—Ç–∞–≤–ª—è–µ–º –º—É—Å–æ—Ä–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è ‚Äî cleanup –≤—ã–ø–æ–ª–Ω–∏—Ç peerService –ø—Ä–∏ –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö send
    }
  }

  function markDeadHost(hostPeerId: string) {
    deadHostBlacklist.set(hostPeerId, Date.now() + DEAD_HOST_TTL_MS)
  }

  async function tryRestoreAsClientWithHealthCheck(targetHostId: string): Promise<boolean> {
    const reachable = await isHostReachableOnce(targetHostId, 1500)
    if (!reachable) {
      console.log(
        'Health-check failed for host:',
        targetHostId,
        '‚Äî skipping restore and blacklisting briefly',
      )
      markDeadHost(targetHostId)
      return false
    }
    await restoreAsClient(targetHostId)
    return true
  }

  return {
    // State
    gameState,
    myPlayerId,
    myNickname,
    isHost,
    hostId,
    roomId,
    connectionStatus,
    sessionTimestamp,
    gameMode,
    gamePhase,
    uiConnecting,
    // Submission flags for UI
    isVoteSubmitting,
    isAnswerSubmitting,
    isGuessSubmitting,
    // Presence helpers for UI
    isCurrentUserAbsent,
    ariaAnnounce,

    // Computed
    canStartGame,
    myPlayer,
    canJoinRoom,
    currentRound,
    currentMode,
    roundsLeft,

    // Actions
    createRoom,
    joinRoom,
    startGame,
    // lightUpPlayer —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª—Å—è —Ä–∞–Ω—å—à–µ ‚Äî –Ω–æ –æ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —ç—Ç–æ–º —Ñ–∞–π–ª–µ. –£–±–µ—Ä—ë–º –∏–∑ —ç–∫—Å–ø–æ—Ä—Ç–∞, —á—Ç–æ–±—ã –Ω–µ –ª–æ–º–∞—Ç—å —Ç–∏–ø—ã.
    // Host-side direct actions (–∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ö–æ—Å—Ç–æ–º)
    drawCard,
    submitVote,
    submitBet,
    finishRound: finishRoundHostOnly,
    leaveRoom,
    leaveGracefully: clientLeaveRoom,
    // broadcastGameState –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–∞–∫ –ø—É–±–ª–∏—á–Ω—ã–π API ‚Äî –Ω–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º

    // Client-side actions (–æ–±–µ—Ä—Ç–∫–∏, –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π)
    drawQuestion: clientDrawQuestion,
    sendVote: clientSubmitVote,
    sendBet: clientSubmitBet,
    sendAnswer: clientSubmitAnswer,
    sendGuess: clientSubmitGuess,
    sendWinners: clientSubmitWinners,
    nextRound: clientNextRound,
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ —Ñ–∞–∑—ã —Ö–æ—Å—Ç–æ–º (skip)
    forceContinue: (phase?: string) => {
      // –ü—É–±–ª–∏—á–Ω—ã–π API —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º —Ñ–ª–∞–≥–æ–º allowForce = true
      finishRoundHostOnly(true)
    },

    // Advanced mode direct state helpers (–≤—Ä–µ–º–µ–Ω–Ω—ã–µ, –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    submitAnswer: (playerId: string, answer: string) => {
      if (!gameState.value.answers) gameState.value.answers = {}
      gameState.value.answers[playerId] = answer
    },
    submitGuess: (playerId: string, guess: string) => {
      if (!gameState.value.guesses) gameState.value.guesses = {}
      gameState.value.guesses[playerId] = guess
    },

    // Session Management
    saveSession,
    restoreSession,
    hasActiveSession,
    clearSession,
    generateDefaultNickname,

    // Request guard UI flags
    isLoadingCreateRoom,
    isLoadingJoinRoom,
    isLoadingRestore,
    lastErrorCreateRoom,
    lastErrorJoinRoom,
    lastErrorRestore,
  }
})
