import Peer from 'peerjs'
import type { DataConnection } from 'peerjs'
import type { PeerMessage, HeartbeatPayload, MessageMeta } from '@/types/game'
import type {
  StateSnapshotPayload,
  StateDiffPayload,
  StateAckPayload,
  ResyncRequestPayload
} from '@/types/game'
import { 
  HEARTBEAT_INTERVAL, 
  HEARTBEAT_TIMEOUT, 
  HOST_GRACE_PERIOD, 
  HOST_RECOVERY_ATTEMPTS, 
  HOST_RECOVERY_INTERVAL, 
  PROTOCOL_VERSION 
} from '@/types/game'

class PeerService {
  private peer: Peer | null = null
  // –§–ª–∞–≥ –º—è–≥–∫–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, —á—Ç–æ–±—ã –ø–æ–¥–∞–≤–ª—è—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è/–æ—à–∏–±–∫–∏ –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏
  private isShuttingDown: boolean = false
  private connections: Map<string, DataConnection> = new Map()
  private messageHandlers: Map<string, (data: PeerMessage, conn?: DataConnection) => void> = new Map()
  // –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –∫–ª—é—á—É (type+roomId+userId+timestamp)
  private processedMessages: Set<string> = new Set()
  
  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ peer ID —Ö–æ—Å—Ç–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
  private static readonly HOST_PEER_ID_KEY = 'hostPeerId'
  private static readonly HOST_PEER_ROOM_KEY = 'hostPeerRoom'
  
  // Heartbeat —Å–∏—Å—Ç–µ–º–∞
  private heartbeatInterval: number | null = null
  private heartbeatTimers: Map<string, number> = new Map()
  private isHostRole: boolean = false
  private currentRoomId: string | null = null
  private lastHeartbeatReceived: number = 0
  
  // Callback –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Ö–æ—Å—Ç–∞
  private onHostDisconnectedCallback: (() => void) | null = null

  // Callbacks –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ (–¥–ª—è —Ä–æ–ª–∏ —Ö–æ—Å—Ç–∞)
  private onClientDisconnectedCallback: ((peerId: string) => void) | null = null
  private onClientReconnectedCallback: ((peerId: string) => void) | null = null
  
  // Mesh-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è P2P –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
  private knownPeers: Set<string> = new Set()
  private pendingConnections: Map<string, number> = new Map() // ID -> timestamp –ø–æ–ø—ã—Ç–∫–∏
  private isConnectingToPeer: Set<string> = new Set()
  
  // –°–∏—Å—Ç–µ–º–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ö–æ—Å—Ç–∞
  private hostRecoveryState = {
    inGracePeriod: false,
    originalHostId: '',
    gracePeriodStart: 0,
    recoveryAttempts: 0,
    gracePeriodTimer: null as number | null,
    onGracePeriodEndCallback: null as (() => void) | null
  }
  
  // –°–æ–∑–¥–∞–Ω–∏–µ —Ö–æ—Å—Ç–∞ —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º ID –≤ localStorage
  async createHost(roomId?: string): Promise<string> {
    return new Promise((resolve, reject) => {
      let targetPeerId: string | null = null
      
      // –ö–†–ò–¢–ò–ß–ù–û: –í—Å–µ–≥–¥–∞ –ø—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π ID —Ö–æ—Å—Ç–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã
      if (roomId) {
        targetPeerId = this.getSavedHostPeerId(roomId)
        if (targetPeerId) {
          console.log('üîÑ RESTORING host with saved ID for room:', roomId, 'ID:', targetPeerId)
        }
      }
      
      // –ï—Å–ª–∏ ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ localStorage - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
      if (targetPeerId) {
        console.log('üîÑ Attempting to restore host with saved ID:', targetPeerId)
        this.peer = new Peer(targetPeerId)
      } else {
        console.log('üÜï Creating new host with random ID')
        this.peer = new Peer()
      }
      
      this.peer.on('open', (id) => {
        if (targetPeerId && id === targetPeerId) {
          console.log('‚úÖ Host successfully restored with SAVED ID:', id)
        } else {
          console.log('üÜï Host created with new ID:', id)
          // –ï—Å–ª–∏ —Å–æ–∑–¥–∞–ª–∏ –Ω–æ–≤—ã–π ID - –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
          if (roomId) {
            this.saveHostPeerId(roomId, id)
            console.log('üíæ NEW host ID saved to localStorage:', id, 'for room:', roomId)
          }
        }
        
        // –í–°–ï–ì–î–ê —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π ID —Ö–æ—Å—Ç–∞ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏
        if (roomId) {
          this.saveHostPeerId(roomId, id)
        }
        
        resolve(id)
      })
      
      this.peer.on('error', (error) => {
        if (this.isShuttingDown) {
          // –ü–æ–¥–∞–≤–ª—è–µ–º –æ—à–∏–±–∫–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —à—Ç–∞—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
          console.log('Peer error suppressed during shutdown:', error?.type || error)
          return
        }
        console.error('Peer error:', error)
        
        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π ID - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
        if (targetPeerId && (error as any)?.type === 'unavailable-id') {
          console.log('‚ùå Saved ID unavailable, creating new host and clearing localStorage...')
          
          // –û—á–∏—â–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π ID –∏–∑ localStorage
          if (roomId) {
            this.clearHostPeerId(roomId)
          }
          
          this.peer = new Peer()
          
          this.peer.on('open', (newId) => {
            console.log('üÜï Host created with new ID after restore failure:', newId)
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π ID
            if (roomId) {
              this.saveHostPeerId(roomId, newId)
              console.log('üíæ NEW host ID saved after fallback:', newId)
            }
            
            resolve(newId)
          })
          
          this.peer.on('error', (newError) => {
            reject(newError)
          })
        } else {
          reject(error)
        }
      })
      
      this.peer.on('connection', (conn) => {
        this.handleIncomingConnection(conn)
      })
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è —Ö–æ—Å—Ç–∞
      this.peer.on('disconnected', () => {
        if (this.isShuttingDown) {
          console.log('üîå Host disconnected during shutdown - skipping auto-reconnect')
          return
        }
        console.log('üîå Host disconnected from signaling server, attempting reconnect...')
        setTimeout(() => {
          if (this.peer && !this.peer.open && !this.isShuttingDown) {
            console.log('üîÑ Reconnecting host to signaling server...')
            this.peer.reconnect()
          }
        }, 1000)
      })
    })
  }
  
  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –∫ —Ö–æ—Å—Ç—É
  async connectToHost(hostId: string): Promise<void> {
    return new Promise((resolve, reject) => {
      this.peer = new Peer()
      
      this.peer.on('open', () => {
        const conn = this.peer!.connect(hostId)
        
        conn.on('open', () => {
          console.log('Connected to host:', hostId)
          this.connections.set(hostId, conn)
          this.setupConnectionHandlers(conn)
          resolve()
        })
        
        conn.on('error', (error) => {
          console.error('Connection error:', error)
          reject(error)
        })
      })
      
      this.peer.on('error', (error) => {
        if (this.isShuttingDown) {
          console.log('Peer error suppressed during shutdown:', (error as any)?.type || error)
          return
        }
        console.error('Peer error:', error)
        reject(error)
      })
    })
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π (–¥–ª—è —Ö–æ—Å—Ç–∞)
  private handleIncomingConnection(conn: DataConnection) {
    console.log('New connection from:', conn.peer)
    // –í–∞–∂–Ω–æ: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ –ø—É–ª –°–†–ê–ó–£ –∏ –Ω–∞–≤–µ—à–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ –ø–µ—Ä–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
    this.connections.set(conn.peer, conn)
    this.setupConnectionHandlers(conn)

    // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ö—É–∫: –µ—Å–ª–∏ —ç—Ç–æ —Ö–æ—Å—Ç, —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º "reconnect" –∫–ª–∏–µ–Ω—Ç–∞
    if (this.isHostRole && this.onClientReconnectedCallback) {
      try {
        this.onClientReconnectedCallback(conn.peer)
      } catch (e) {
        console.warn('onClientReconnected callback failed in handleIncomingConnection:', e)
      }
    }
  }
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  private setupConnectionHandlers(conn: DataConnection) {
    conn.on('data', (data) => {
      const message = data as PeerMessage
      console.log('üì• RECEIVED MESSAGE:', message.type, 'from:', conn.peer, 'payload:', message.payload)
      // –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –ø–æ –ø–µ—Ä–≤–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –∫–ª–∏–µ–Ω—Ç–∞
      // (PeerJS –∏–Ω–æ–≥–¥–∞ –¥–∞—ë—Ç –∫–æ—Ä–æ—Ç–∫–æ–∂–∏–≤—É—â–∏–µ conn, —É–¥–µ—Ä–∂–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π)
      try {
        const existing = this.connections.get(conn.peer)
        if (!existing || existing !== conn || !existing.open) {
          console.log('üîÅ Updating pool connection for peer:', conn.peer, { hadExisting: !!existing, wasOpen: existing?.open })
          this.connections.set(conn.peer, conn)
        }
      } catch {}

      // Debug: highlight critical init messages
      if (message.type === 'request_game_state' || message.type === 'join_request') {
        console.log('üß≠ INIT MESSAGE RECEIVED on', this.isHostRole ? 'HOST' : 'CLIENT', 'side. Will respond accordingly.')
      }
      if (message.type === 'state_snapshot' || message.type === 'game_state_update') {
        console.log('üß≠ INIT SYNC MESSAGE RECEIVED on', this.isHostRole ? 'HOST' : 'CLIENT', 'side. This should populate client state.')
      }

      // –ü—Ä–æ—Å—Ç–∞—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –ø–æ –∫–ª—é—á—É
      try {
        const key = `${message.type}:${message.meta?.roomId || ''}:${(message as any)?.payload?.userId || (message as any)?.payload?.requesterId || ''}:${message.meta?.ts || (message as any)?.payload?.timestamp || ''}`
        if (this.processedMessages.has(key)) {
          console.log('üßØ Duplicate message ignored:', key)
          return
        }
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –¥–ª—è –ø–∞–º—è—Ç–∏
        if (this.processedMessages.size > 2000) {
          this.processedMessages.clear()
        }
        this.processedMessages.add(key)
      } catch (e) {
        console.warn('Dedup key generation failed (non-critical):', e)
      }
      
      const handler = this.messageHandlers.get(message.type)
      if (handler) {
        console.log('üîß Handling message:', message.type)
        handler(message, conn)
      } else {
        console.log('‚ùå No handler for message type:', message.type, 'Available handlers:', Array.from(this.messageHandlers.keys()))
      }
    })
    
    conn.on('close', () => {
      console.log('Connection closed:', conn.peer)
      const peerId = conn.peer
      this.connections.delete(peerId)

      // –ï—Å–ª–∏ –º—ã —Ö–æ—Å—Ç ‚Äî —É–≤–µ–¥–æ–º–ª—è–µ–º –≤–µ—Ä—Ö–Ω–∏–π —Å–ª–æ–π –æ –¥–∏—Å–∫–æ–Ω–Ω–µ–∫—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞
      if (this.isHostRole && this.onClientDisconnectedCallback) {
        try {
          this.onClientDisconnectedCallback(peerId)
        } catch (e) {
          console.warn('onClientDisconnected callback failed:', e)
        }
      }
    })
    
    conn.on('error', (error) => {
      console.error('Connection error:', error)
      const peerId = conn.peer
      this.connections.delete(peerId)
      // –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ —É —Ö–æ—Å—Ç–∞ ‚Äî —Ç–∞–∫–∂–µ —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π disconnect
      if (this.isHostRole && this.onClientDisconnectedCallback) {
        try {
          this.onClientDisconnectedCallback(peerId)
        } catch (e) {
          console.warn('onClientDisconnected callback failed (error path):', e)
        }
      }
    })
  }
  
  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–µ–±–æ–ª—å—à–∏–º —Ä–µ—Ç—Ä–∞–µ–º, –µ—Å–ª–∏ –∫–∞–Ω–∞–ª –±—ã–ª —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
  private async sendMessageWithRetry(peerId: string, message: PeerMessage, attempts = 2, delayMs = 120): Promise<void> {
    for (let i = 0; i < attempts; i++) {
      const conn = this.connections.get(peerId)
      console.log('Attempting to send message:', {
        peerId,
        messageType: message.type,
        connectionExists: !!conn,
        connectionOpen: conn?.open,
        totalConnections: this.connections.size,
        attempt: i + 1,
        attempts
      })
      if (conn && conn.open) {
        try {
          conn.send(message)
          console.log('Message sent successfully to:', peerId)
          return
        } catch (err) {
          console.error('Failed to send over open connection:', peerId, err)
        }
      } else {
        // –ü–æ–ø—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–µ –∏ –¥–æ–∂–¥–∞—Ç—å—Å—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        if (conn && !conn.open) {
          this.connections.delete(peerId)
          console.warn('Removed closed connection from pool:', peerId)
        }
      }
      if (i < attempts - 1) {
        await new Promise(res => setTimeout(res, delayMs))
      }
    }
    // –§–∏–Ω–∞–ª—å–Ω—ã–π –ª–æ–≥ –≤ —Å–ª—É—á–∞–µ –Ω–µ—É–¥–∞—á–∏
    const finalConn = this.connections.get(peerId)
    console.warn('Connection not found or closed (after retries):', peerId, {
      connectionExists: !!finalConn,
      connectionOpen: finalConn?.open,
      allConnections: Array.from(this.connections.keys())
    })
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–∏—Ä—É
  sendMessage(peerId: string, message: PeerMessage) {
    // –ü—Ä–µ–¥–æ—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    try {
      const removed = this.cleanupInactiveConnections()
      if (removed > 0) {
        console.log('üßπ Cleaned up inactive connections before send:', removed)
      }
    } catch (e) {
      console.warn('Cleanup before send failed (non-critical):', e)
    }
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Å –∫–æ—Ä–æ—Ç–∫–∏–º —Ä–µ—Ç—Ä–∞–µ–º ‚Äî —ç—Ç–æ –ø–æ–∫—Ä—ã–≤–∞–µ—Ç –∫–µ–π—Å,
    // –∫–æ–≥–¥–∞ conn —É—Å–ø–µ–ª –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å—Å—è –º–µ–∂–¥—É –ø—Ä–∏—ë–º–æ–º –∑–∞–ø—Ä–æ—Å–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –æ—Ç–≤–µ—Ç–∞.
    void this.sendMessageWithRetry(peerId, message, 2, 120)
  }
  
  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –ø–∏—Ä–∞–º (–¥–ª—è —Ö–æ—Å—Ç–∞)
  broadcastMessage(message: PeerMessage) {
    // –ü—Ä–µ–¥–æ—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –ø–µ—Ä–µ–¥ —Ä–∞—Å—Å—ã–ª–∫–æ–π
    try {
      const removed = this.cleanupInactiveConnections()
      if (removed > 0) {
        console.log('üßπ Cleaned up inactive connections before broadcast:', removed)
      }
    } catch (e) {
      console.warn('Cleanup before broadcast failed (non-critical):', e)
    }

    const toRemove: string[] = []
    this.connections.forEach((conn, peerId) => {
      if (conn.open) {
        try {
          conn.send(message)
        } catch (err) {
          console.error('Failed to send message to peer during broadcast:', peerId, err)
        }
      } else {
        toRemove.push(peerId)
      }
    })

    if (toRemove.length > 0) {
      toRemove.forEach(id => this.connections.delete(id))
      console.log('üßπ Removed closed connections during broadcast:', toRemove)
    }
  }
  
  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
  onMessage(type: string, handler: (data: PeerMessage, conn?: DataConnection) => void) {
    console.log('üîß Registering message handler for:', type)
    this.messageHandlers.set(type, handler)
  }

  // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏)
  clearMessageHandlers() {
    console.log('üßπ Clearing all message handlers')
    this.messageHandlers.clear()
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
  getRegisteredHandlers(): string[] {
    return Array.from(this.messageHandlers.keys())
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–µ–≥–æ ID
  getMyId(): string | null {
    return this.peer?.id || null
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–∏—Ä–æ–≤
  getConnectedPeers(): string[] {
    return Array.from(this.connections.keys())
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–∏—Ä —Ö–æ—Å—Ç–æ–º
  isHost(): boolean {
    // –ò—Å—Ç–∏–Ω–Ω–∞—è —Ä–æ–ª—å –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è —è–≤–Ω—ã–º —Ñ–ª–∞–≥–æ–º
    return this.isHostRole
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–∏—Ä –∫–ª–∏–µ–Ω—Ç–æ–º
  isClient(): boolean {
    // –ö–ª–∏–µ–Ω—Ç ‚Äî —ç—Ç–æ –Ω–µ-—Ö–æ—Å—Ç —Å –∞–∫—Ç–∏–≤–Ω—ã–º peer
    return !this.isHostRole && !!this.peer && !!this.peer.open
  }
  
  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–æ–ª–∏ —Ö–æ—Å—Ç–∞ –∏ –∑–∞–ø—É—Å–∫ heartbeat
  setAsHost(hostId: string, roomId?: string) {
    this.isHostRole = true
    if (roomId) {
      this.currentRoomId = roomId
    }
    this.startHeartbeat(hostId)
  }
  
  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–æ–ª–∏ –∫–ª–∏–µ–Ω—Ç–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ heartbeat
  setAsClient() {
    this.isHostRole = false
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º heartbeat —Ö–æ—Å—Ç–∞ –∏ –æ—á–∏—â–∞–µ–º –≤—Å–µ —Ç–∞–π–º–µ—Ä—ã –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    this.stopHeartbeat()
    this.heartbeatTimers.forEach(t => clearTimeout(t))
    this.heartbeatTimers.clear()
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –º–∞—Ä–∫–µ—Ä –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ heartbeat, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ª–æ–∂–Ω–æ–≥–æ —Ç–∞–π–º–∞—É—Ç–∞ –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ö–æ—Å—Ç–∞
    this.lastHeartbeatReceived = Date.now()
    this.startHeartbeatMonitoring()
  }
  
  // –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ heartbeat (–¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤)
  private startHeartbeatMonitoring() {
    console.log('Started heartbeat monitoring for client')
    this.lastHeartbeatReceived = Date.now()
  }
  
  // –ó–∞–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ heartbeat (–¥–ª—è —Ö–æ—Å—Ç–∞)
  private startHeartbeat(hostId: string) {
    if (this.heartbeatInterval) {
      clearInterval(this.heartbeatInterval)
    }
    
    this.heartbeatInterval = window.setInterval(() => {
      // –§–æ—Ä–º–∏—Ä—É–µ–º meta –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º BaseMessage
      const meta: MessageMeta = {
        roomId: this.currentRoomId || '',
        fromId: this.getMyId() || hostId,
        ts: Date.now()
      }

      const heartbeatMessage: PeerMessage = {
        type: 'heartbeat',
        protocolVersion: PROTOCOL_VERSION,
        meta,
        payload: {
          timestamp: Date.now(),
          hostId: hostId
        } as HeartbeatPayload
      }
      
      this.broadcastMessage(heartbeatMessage)
      console.log('Heartbeat sent to all clients')
    }, HEARTBEAT_INTERVAL)
    
    console.log('Heartbeat started for host:', hostId)
  }
  
  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ heartbeat
  private stopHeartbeat() {
    if (this.heartbeatInterval) {
      clearInterval(this.heartbeatInterval)
      this.heartbeatInterval = null
    }
    
    // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ç–∞–π–º–µ—Ä–æ–≤ heartbeat
    this.heartbeatTimers.forEach(timer => clearTimeout(timer))
    this.heartbeatTimers.clear()
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ heartbeat (–¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤)
  handleHeartbeat(hostId: string) {
    this.lastHeartbeatReceived = Date.now()
    
    // –°–±—Ä–æ—Å —Ç–∞–π–º–µ—Ä–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Ö–æ—Å—Ç–∞
    if (this.heartbeatTimers.has(hostId)) {
      clearTimeout(this.heartbeatTimers.get(hostId)!)
    }
    
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞
    const timer = window.setTimeout(() => {
      console.log('Host heartbeat timeout detected for:', hostId)
      this.handleHostDisconnection(hostId)
    }, HEARTBEAT_TIMEOUT)
    
    this.heartbeatTimers.set(hostId, timer)
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Ö–æ—Å—Ç–∞
  private handleHostDisconnection(hostId: string) {
    console.log('Host disconnected:', hostId)
    
    // –£–¥–∞–ª—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–º —Ö–æ—Å—Ç–æ–º
    this.connections.delete(hostId)
    
    // –í—ã–∑—ã–≤–∞–µ–º callback –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –≤—ã–±–æ—Ä–æ–≤
    if (this.onHostDisconnectedCallback) {
      this.onHostDisconnectedCallback()
    }
  }
  
  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è callback –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Ö–æ—Å—Ç–∞
  onHostDisconnected(callback: () => void) {
    this.onHostDisconnectedCallback = callback
  }

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è callback'–æ–≤ –¥–ª—è —Å–æ–±—ã—Ç–∏–π –∫–ª–∏–µ–Ω—Ç–æ–≤ (—Ö–æ—Å—Ç-—Å—Ç–æ—Ä–æ–Ω–∞)
  onClientDisconnected(callback: (peerId: string) => void) {
    this.onClientDisconnectedCallback = callback
  }

  onClientReconnected(callback: (peerId: string) => void) {
    this.onClientReconnectedCallback = callback
  }
  
  // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –Ω–æ–≤–æ–º—É —Ö–æ—Å—Ç—É
  async reconnectToNewHost(newHostId: string): Promise<void> {
    console.log('Reconnecting to new host:', newHostId)
    
    // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    this.connections.clear()
    this.stopHeartbeat()
    
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –Ω–æ–≤–æ–º—É —Ö–æ—Å—Ç—É
    return this.connectToHost(newHostId)
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ heartbeat
  isHostActive(): boolean {
    if (this.isHostRole) return true
    
    const timeSinceLastHeartbeat = Date.now() - this.lastHeartbeatReceived
    return timeSinceLastHeartbeat < HEARTBEAT_TIMEOUT
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ heartbeat
  getLastHeartbeatTime(): number {
    return this.lastHeartbeatReceived
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–ª–∏
  getCurrentRole(): 'host' | 'client' | 'disconnected' {
    if (!this.peer || !this.peer.open) return 'disconnected'
    return this.isHostRole ? 'host' : 'client'
  }
  
  // Mesh P2P –º–µ—Ç–æ–¥—ã
  
  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É peer'—É (–¥–ª—è mesh-–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã)
  async connectToPeer(peerId: string): Promise<boolean> {
    console.log('üîó connectToPeer called for:', peerId)
    console.log('üîç My peer ID:', this.getMyId())
    console.log('üìä Current connections:', Array.from(this.connections.keys()))
    console.log('üöÄ Pending connections:', Array.from(this.isConnectingToPeer))
    
    if (peerId === this.getMyId()) {
      console.log('‚ùå Skipping connection to self:', peerId)
      return true
    }
    
    if (this.connections.has(peerId)) {
      const conn = this.connections.get(peerId)
      console.log('‚úÖ Already connected to peer:', peerId, 'connection open:', conn?.open)
      return true
    }
    
    if (this.isConnectingToPeer.has(peerId)) {
      console.log('‚è≥ Already connecting to peer:', peerId)
      return false
    }
    
    console.log('üöÄ Attempting to connect to peer:', peerId)
    this.isConnectingToPeer.add(peerId)
    this.pendingConnections.set(peerId, Date.now())
    
    return new Promise((resolve) => {
      if (!this.peer || !this.peer.open) {
        console.log('‚ùå Peer not ready for connection, peer:', !!this.peer, 'open:', this.peer?.open)
        this.isConnectingToPeer.delete(peerId)
        this.pendingConnections.delete(peerId)
        resolve(false)
        return
      }
      
      console.log('üîå Creating connection to:', peerId)
      const conn = this.peer.connect(peerId)
      
      const timeout = setTimeout(() => {
        console.log('‚è∞ Connection timeout to peer:', peerId)
        this.isConnectingToPeer.delete(peerId)
        this.pendingConnections.delete(peerId)
        conn.close()
        resolve(false)
      }, 5000)
      
      conn.on('open', () => {
        console.log('‚úÖ Successfully connected to peer:', peerId)
        clearTimeout(timeout)
        this.isConnectingToPeer.delete(peerId)
        this.pendingConnections.delete(peerId)
        this.connections.set(peerId, conn)
        this.knownPeers.add(peerId)
        this.setupConnectionHandlers(conn)
        console.log('üìä Total connections after success:', this.connections.size)
        resolve(true)
      })
      
      conn.on('error', (error) => {
        console.log('‚ùå Failed to connect to peer:', peerId, 'error:', error)
        clearTimeout(timeout)
        this.isConnectingToPeer.delete(peerId)
        this.pendingConnections.delete(peerId)
        resolve(false)
      })
      
      console.log('‚è≥ Connection setup completed for:', peerId, 'waiting for events...')
    })
  }
  
  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ –≤—Å–µ–º peer'–∞–º –∏–∑ —Å–ø–∏—Å–∫–∞
  async connectToAllPeers(peerIds: string[]): Promise<void> {
    console.log('Connecting to all peers:', peerIds)
    
    const connectionPromises = peerIds
      .filter(id => id !== this.getMyId())
      .map(peerId => this.connectToPeer(peerId))
    
    const results = await Promise.allSettled(connectionPromises)
    const successful = results.filter(r => r.status === 'fulfilled' && r.value).length
    
    console.log(`Connected to ${successful}/${peerIds.length} peers`)
  }
  
  // –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º peer'–∞–º (mesh broadcast)
  broadcastToAllPeers(message: PeerMessage) {
    const sentTo: string[] = []
    
    this.connections.forEach((conn, peerId) => {
      if (conn.open) {
        try {
          conn.send(message)
          sentTo.push(peerId)
        } catch (error) {
          console.error('Failed to send message to peer:', peerId, error)
        }
      }
    })
    
    console.log(`Broadcasted ${message.type} to ${sentTo.length} peers:`, sentTo)
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö peer'–æ–≤
  getAllKnownPeers(): string[] {
    return Array.from(this.knownPeers)
  }
  
  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ peer'–∞ –≤ —Å–ø–∏—Å–æ–∫ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö
  addKnownPeer(peerId: string) {
    if (peerId !== this.getMyId()) {
      this.knownPeers.add(peerId)
    }
  }
  
  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö peer'–æ–≤
  addKnownPeers(peerIds: string[]) {
    peerIds.forEach(id => this.addKnownPeer(id))
  }
  
  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤ –æ–±—â–∏–π pool (–¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è temporary connections)
  addConnection(peerId: string, connection: DataConnection) {
    if (peerId !== this.getMyId()) {
      console.log('Adding connection to pool:', peerId)
      const existed = this.connections.has(peerId) && this.connections.get(peerId)?.open
      this.connections.set(peerId, connection)
      this.knownPeers.add(peerId)
      this.setupConnectionHandlers(connection)
      // –ï—Å–ª–∏ –º—ã —Ö–æ—Å—Ç –∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ—à–ª–æ –∏–∑ –∑–∞–∫—Ä—ã—Ç–æ–≥–æ –≤ –æ—Ç–∫—Ä—ã—Ç–æ–µ ‚Äî —Ç—Ä–∞–∫—Ç—É–µ–º –∫–∞–∫ "reconnected"
      if (this.isHostRole && this.onClientReconnectedCallback && !existed && connection.open) {
        try {
          this.onClientReconnectedCallback(peerId)
        } catch (e) {
          console.warn('onClientReconnected callback failed:', e)
        }
      }
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  hasConnection(peerId: string): boolean {
    const conn = this.connections.get(peerId)
    return !!(conn && conn.open)
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ peer –¥–ª—è discovery (–≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ)
  getPeer(): Peer | null {
    return this.peer
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
  getActiveConnections(): { peerId: string, isOpen: boolean }[] {
    return Array.from(this.connections.entries()).map(([peerId, conn]) => ({
      peerId,
      isOpen: conn.open
    }))
  }
  
  // –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
  cleanupInactiveConnections() {
    const toRemove: string[] = []
    
    this.connections.forEach((conn, peerId) => {
      if (!conn.open) {
        toRemove.push(peerId)
      }
    })
    
    toRemove.forEach(peerId => {
      console.log('Removing inactive connection:', peerId)
      this.connections.delete(peerId)
    })
    
    return toRemove.length
  }
  
  // –°–∏—Å—Ç–µ–º–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ö–æ—Å—Ç–∞ —Å grace period
  
  // –ó–∞–ø—É—Å–∫ grace period –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ö–æ—Å—Ç–∞
  startHostRecoveryGracePeriod(originalHostId: string, onGracePeriodEnd: () => void) {
    console.log('üïê Starting host recovery grace period for:', originalHostId)
    
    // –ï—Å–ª–∏ —É–∂–µ –≤ grace period - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
    if (this.hostRecoveryState.inGracePeriod) {
      this.cancelHostRecoveryGracePeriod()
    }
    
    this.hostRecoveryState.inGracePeriod = true
    this.hostRecoveryState.originalHostId = originalHostId
    this.hostRecoveryState.gracePeriodStart = Date.now()
    this.hostRecoveryState.recoveryAttempts = 0
    this.hostRecoveryState.onGracePeriodEndCallback = onGracePeriodEnd
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä grace period
    this.hostRecoveryState.gracePeriodTimer = window.setTimeout(() => {
      console.log('‚è∞ Host recovery grace period ended, starting migration')
      this.endHostRecoveryGracePeriod()
    }, HOST_GRACE_PERIOD)
    
    // –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    this.startHostRecoveryAttempts(originalHostId)
  }
  
  // –ü–æ–ø—ã—Ç–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º —Ö–æ—Å—Ç–æ–º
  private async startHostRecoveryAttempts(originalHostId: string) {
    console.log('üîÑ Starting host recovery attempts for:', originalHostId)
    
    const attemptRecovery = async () => {
      if (!this.hostRecoveryState.inGracePeriod || 
          this.hostRecoveryState.recoveryAttempts >= HOST_RECOVERY_ATTEMPTS) {
        return
      }
      
      this.hostRecoveryState.recoveryAttempts++
      console.log(`üîç Host recovery attempt ${this.hostRecoveryState.recoveryAttempts}/${HOST_RECOVERY_ATTEMPTS} for:`, originalHostId)
      
      try {
        const recovered = await this.attemptHostRecovery(originalHostId)
        if (recovered) {
          console.log('‚úÖ Host recovery successful!')
          this.handleHostRecoverySuccess(originalHostId)
          return
        }
      } catch (error) {
        console.log('‚ùå Host recovery attempt failed:', error)
      }
      
      // –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø–æ–ø—ã—Ç–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å –≤—Ä–µ–º—è
      if (this.hostRecoveryState.inGracePeriod && 
          this.hostRecoveryState.recoveryAttempts < HOST_RECOVERY_ATTEMPTS) {
        setTimeout(attemptRecovery, HOST_RECOVERY_INTERVAL)
      }
    }
    
    // –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–≤—É—é –ø–æ–ø—ã—Ç–∫—É –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
    attemptRecovery()
  }
  
  // –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Ö–æ—Å—Ç–æ–º
  private async attemptHostRecovery(originalHostId: string): Promise<boolean> {
    return new Promise((resolve) => {
      try {
        if (!this.peer || !this.peer.open) {
          resolve(false)
          return
        }
        
        console.log('üîå Attempting to reconnect to original host:', originalHostId)
        const conn = this.peer.connect(originalHostId)
        
        const timeout = setTimeout(() => {
          conn.close()
          resolve(false)
        }, 3000) // –ö–æ—Ä–æ—Ç–∫–∏–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –ø–æ–ø—ã—Ç–æ–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        
        conn.on('open', () => {
          console.log('üéâ Successfully reconnected to original host!')
          clearTimeout(timeout)
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º host discovery –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
          conn.send({
            type: 'host_discovery_request',
            payload: {
              requesterId: this.getMyId(),
              requesterToken: '',
              timestamp: Date.now()
            }
          })
        })
        
        conn.on('data', (data: any) => {
          const message = data as PeerMessage
          if (message.type === 'host_discovery_response') {
            const response = message.payload
            console.log('üì® Host discovery response during recovery:', response)
            
            clearTimeout(timeout)
            
            if (response.isHost && response.currentHostId === originalHostId) {
              // –•–æ—Å—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è
              this.connections.set(originalHostId, conn)
              this.setupConnectionHandlers(conn)
              resolve(true)
            } else {
              conn.close()
              resolve(false)
            }
          }
        })
        
        conn.on('error', () => {
          clearTimeout(timeout)
          resolve(false)
        })
        
      } catch (error) {
        console.log('‚ùå Host recovery attempt error:', error)
        resolve(false)
      }
    })
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ö–æ—Å—Ç–∞
  private handleHostRecoverySuccess(originalHostId: string) {
    console.log('üéä Host recovery completed successfully for:', originalHostId)
    console.log('üîç RECOVERY STATE BEFORE:', {
      inGracePeriod: this.hostRecoveryState.inGracePeriod,
      recoveryAttempts: this.hostRecoveryState.recoveryAttempts,
      isHostRole: this.isHostRole,
      connectionsCount: this.connections.size,
      connectionIds: Array.from(this.connections.keys()),
      knownPeers: Array.from(this.knownPeers)
    })
    
    // –û—Ç–º–µ–Ω—è–µ–º grace period
    this.cancelHostRecoveryGracePeriod()
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
    this.isHostRole = false
    this.setAsClient()
    
    console.log('üîç RECOVERY STATE AFTER:', {
      inGracePeriod: this.hostRecoveryState.inGracePeriod,
      isHostRole: this.isHostRole,
      connectionsCount: this.connections.size,
      connectionIds: Array.from(this.connections.keys()),
      lastHeartbeatReceived: this.lastHeartbeatReceived,
      heartbeatTimersCount: this.heartbeatTimers.size
    })
    
    console.log('üì¢ Host recovery successful - cancelling migration and restoring connection')
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º gameStore –æ —É—Å–ø–µ—à–Ω–æ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏
    if (this.onHostRecoveredCallback) {
      setTimeout(() => {
        console.log('üîÑ Triggering host recovery success callback')
        this.onHostRecoveredCallback && this.onHostRecoveredCallback()
      }, 100)
    }
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º callback –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
  private onHostRecoveredCallback: (() => void) | null = null
  
  onHostRecovered(callback: () => void) {
    this.onHostRecoveredCallback = callback
  }
  
  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ grace period
  private endHostRecoveryGracePeriod() {
    if (!this.hostRecoveryState.inGracePeriod) return
    
    console.log('üèÅ Host recovery grace period ended')
    
    const callback = this.hostRecoveryState.onGracePeriodEndCallback
    this.resetHostRecoveryState()
    
    // –í—ã–∑—ã–≤–∞–µ–º callback –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –º–∏–≥—Ä–∞—Ü–∏–∏
    if (callback) {
      callback()
    }
  }
  
  // –û—Ç–º–µ–Ω–∞ grace period
  cancelHostRecoveryGracePeriod() {
    console.log('‚ùå Cancelling host recovery grace period')
    this.resetHostRecoveryState()
  }
  
  // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
  private resetHostRecoveryState() {
    if (this.hostRecoveryState.gracePeriodTimer) {
      clearTimeout(this.hostRecoveryState.gracePeriodTimer)
      this.hostRecoveryState.gracePeriodTimer = null
    }
    
    this.hostRecoveryState.inGracePeriod = false
    this.hostRecoveryState.originalHostId = ''
    this.hostRecoveryState.gracePeriodStart = 0
    this.hostRecoveryState.recoveryAttempts = 0
    this.hostRecoveryState.onGracePeriodEndCallback = null
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –≤ grace period
  isInHostRecoveryGracePeriod(): boolean {
    return this.hostRecoveryState.inGracePeriod
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ recovery state
  getHostRecoveryState() {
    return {
      inGracePeriod: this.hostRecoveryState.inGracePeriod,
      originalHostId: this.hostRecoveryState.originalHostId,
      recoveryAttempts: this.hostRecoveryState.recoveryAttempts,
      gracePeriodStart: this.hostRecoveryState.gracePeriodStart,
      timeRemaining: this.hostRecoveryState.inGracePeriod 
        ? Math.max(0, HOST_GRACE_PERIOD - (Date.now() - this.hostRecoveryState.gracePeriodStart))
        : 0
    }
  }
  
  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ peer ID —Ö–æ—Å—Ç–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã
  private saveHostPeerId(roomId: string, peerId: string): void {
    try {
      const hostData = {
        peerId,
        roomId,
        timestamp: Date.now()
      }
      localStorage.setItem(`${PeerService.HOST_PEER_ID_KEY}_${roomId}`, JSON.stringify(hostData))
      console.log('üíæ Host peer ID saved for room:', roomId, 'ID:', peerId)
    } catch (error) {
      console.error('Failed to save host peer ID:', error)
    }
  }
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ peer ID —Ö–æ—Å—Ç–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã
  private getSavedHostPeerId(roomId: string): string | null {
    try {
      const savedData = localStorage.getItem(`${PeerService.HOST_PEER_ID_KEY}_${roomId}`)
      if (!savedData) return null
      
      const hostData = JSON.parse(savedData)
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å (–Ω–µ —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤)
      const maxAge = 24 * 60 * 60 * 1000 // 24 —á–∞—Å–∞
      if (Date.now() - hostData.timestamp > maxAge) {
        console.log('üïê Saved host peer ID expired, removing from localStorage')
        this.clearHostPeerId(roomId)
        return null
      }
      
      console.log('üìã Found saved host peer ID for room:', roomId, 'ID:', hostData.peerId)
      return hostData.peerId
    } catch (error) {
      console.error('Failed to load saved host peer ID:', error)
      return null
    }
  }
  
  // –û—á–∏—Å—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ peer ID —Ö–æ—Å—Ç–∞
  private clearHostPeerId(roomId: string): void {
    try {
      localStorage.removeItem(`${PeerService.HOST_PEER_ID_KEY}_${roomId}`)
      console.log('üóëÔ∏è Cleared saved host peer ID for room:', roomId)
    } catch (error) {
      console.error('Failed to clear host peer ID:', error)
    }
  }
  
  // –ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ ID —Ö–æ—Å—Ç–∞ (–¥–ª—è –≤—ã–∑–æ–≤–∞ –ø—Ä–∏ –ø–æ–∫–∏–¥–∞–Ω–∏–∏ –∫–æ–º–Ω–∞—Ç—ã)
  clearSavedHostId(roomId: string): void {
    this.clearHostPeerId(roomId)
  }
  
  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∫–æ–º–Ω–∞—Ç—ã (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è meta.roomId –≤ heartbeat)
  setRoomContext(roomId: string | null) {
    this.currentRoomId = roomId || null
  }

  // –£—Ç–∏–ª–∏—Ç–∞ —à–∏—Ä–æ–∫–æ–≤–µ—â–∞—Ç–µ–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏–π –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è
  broadcastUserLeft(roomId: string, hostId: string, userId: string, reason: 'explicit_leave' | 'presence_timeout' | 'connection_closed', timestamp?: number) {
    const ts = timestamp || Date.now()
    const msg: PeerMessage = {
      type: 'user_left_broadcast',
      protocolVersion: PROTOCOL_VERSION,
      meta: { roomId, fromId: hostId, ts },
      payload: { userId, roomId, timestamp: ts, reason } as any
    }
    this.broadcastMessage(msg)
  }

  // ===== New helpers for versioned sync (host side minimal skeleton) =====
  hostSendSnapshot(toPeerId: string, payload: StateSnapshotPayload) {
    const metaRoom = this.currentRoomId || payload.meta.roomId
    const fromId = this.getMyId() || ''
    const ts = Date.now()
    console.log('üì§ HOST sending state_snapshot:', {
      toPeerId,
      roomId: metaRoom,
      fromId,
      ts,
      version: (payload as any)?.meta?.version,
      players: Array.isArray((payload as any)?.state?.players) ? (payload as any).state.players.length : -1,
      phase: (payload as any)?.state?.phase
    })
    const msg: PeerMessage = {
      type: 'state_snapshot',
      protocolVersion: PROTOCOL_VERSION,
      meta: { roomId: metaRoom, fromId, ts },
      payload
    } as any
    this.sendMessage(toPeerId, msg)
  }

  hostBroadcastDiff(payload: StateDiffPayload) {
    const metaRoom = this.currentRoomId || payload.meta.roomId
    const fromId = this.getMyId() || ''
    const ts = Date.now()
    console.log('üì§ HOST broadcasting state_diff:', {
      roomId: metaRoom,
      fromId,
      ts,
      version: (payload as any)?.meta?.version
    })
    const msg: PeerMessage = {
      type: 'state_diff',
      protocolVersion: PROTOCOL_VERSION,
      meta: { roomId: metaRoom, fromId, ts },
      payload
    } as any
    this.broadcastMessage(msg)
  }

  // Lightweight guards (room-scoped)
  guardRoom(meta?: MessageMeta): boolean {
    if (!meta) return true
    if (this.currentRoomId && meta.roomId && meta.roomId !== this.currentRoomId) {
      console.warn('Guard: ignoring message for different room', { current: this.currentRoomId, incoming: meta.roomId })
      return false
    }
    return true
  }

  // Registration helpers for ack/resync (handlers set by store)
  onStateAck(handler: (payload: StateAckPayload, fromId: string) => void) {
    this.onMessage('state_ack', (m, conn) => {
      if (!this.guardRoom(m.meta)) return
      handler((m as any).payload as StateAckPayload, conn?.peer || '')
    })
  }

  onResyncRequest(handler: (payload: ResyncRequestPayload, fromId: string) => void) {
    this.onMessage('resync_request', (m, conn) => {
      if (!this.guardRoom(m.meta)) return
      handler((m as any).payload as ResyncRequestPayload, conn?.peer || '')
    })
  }
  
  // –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
  disconnect() {
    // –ü–æ–º–µ—á–∞–µ–º –Ω–∞—á–∞–ª–æ –º—è–≥–∫–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, —á—Ç–æ–±—ã –ø–æ–¥–∞–≤–ª—è—Ç—å –æ—à–∏–±–∫–∏/–∞–≤—Ç–æ—Ä–µ–∫–æ–Ω–Ω–µ–∫—Ç—ã
    this.isShuttingDown = true

    this.stopHeartbeat()
    this.cancelHostRecoveryGracePeriod()
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ data-–∫–∞–Ω–∞–ª—ã
    try {
      this.connections.forEach((conn) => {
        try { conn.close() } catch {}
      })
    } catch {}
    this.connections.clear()
    
    // –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç —Å–∏–≥–Ω–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –ø–µ—Ä–µ–¥ destroy
    if (this.peer) {
      try {
        // –°–Ω–∏–º–∞–µ–º –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, —á—Ç–æ–±—ã –Ω–µ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å reconnect
        try { (this.peer as any).removeAllListeners?.('disconnected') } catch {}
        try { (this.peer as any).removeAllListeners?.('error') } catch {}
      } catch {}
      try { this.peer.disconnect() } catch {}
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã —Å—Ç–µ–∫ —É—Å–ø–æ–∫–æ–∏–ª—Å—è, –∑–∞—Ç–µ–º —É–Ω–∏—á—Ç–æ–∂–∞–µ–º
      setTimeout(() => {
        try { this.peer && this.peer.destroy() } catch {}
        this.peer = null
      }, 0)
    }
    
    this.isHostRole = false
    this.lastHeartbeatReceived = 0
    this.onHostDisconnectedCallback = null
    
    // –û—á–∏—Å—Ç–∫–∞ mesh –¥–∞–Ω–Ω—ã—Ö
    this.knownPeers.clear()
    this.pendingConnections.clear()
    this.isConnectingToPeer.clear()

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤ –∫–æ–Ω—Ü–µ —Ç–∞—Å–∫–∞
    setTimeout(() => { this.isShuttingDown = false }, 0)
  }
}

export const peerService = new PeerService()
